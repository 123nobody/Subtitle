[Script Info]
; Script generated by Aegisub 3.1.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None
Last Style Storage: Default
Aegisub Scroll Position: 0
Aegisub Active Line: 9
Aegisub Video Zoom Percent: 1.000000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: yin,冬青黑体简体中文 W3,20,&H00FFFFFF,&HF0000000,&H00000000,&H32000000,0,0,0,0,100,100,0,0,1,1,0,2,5,5,5,134

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:05.25,0:00:11.50,yin,,0,0,0,, 斯坦福大学 \N{\fs12}Stanford University.
Dialogue: 0,0:00:11.50,0:00:20.86,yin,,0,0,0,, 欢迎来到 2013/2014 学年秋 CS193P 课程的第二课 \N{\fs12}Well, welcome to lecture number two of CS 193P for fall of 2013/2014 academic year.
Dialogue: 0,0:00:20.86,0:00:24.99,yin,,0,0,0,, 今天最开始我们将有一些幻灯片 \N{\fs12}And today we’re going to have some slides at the beginning,
Dialogue: 0,0:00:24.99,0:00:28.95,yin,,0,0,0,, 一点讲课 然后我将有一个很大的 demo\N{\fs12}little more talking, and then I’m going to have quite a big demo that’s going to try
Dialogue: 0,0:00:28.95,0:00:31.22,yin,,0,0,0,, 我希望用它来综合前两讲 \N{\fs12}and hopefully synthesize all the things I’ve been talking
Dialogue: 0,0:00:31.22,0:00:33.57,yin,,0,0,0,, 我讲过的这些内容 \N{\fs12}about on the slides for the first two lectures,
Dialogue: 0,0:00:33.59,0:00:36.85,yin,,0,0,0,, 也就是 我们将开始创建我们的纸牌游戏 \N{\fs12}which is that we’re going to start building our card game.
Dialogue: 0,0:00:36.85,0:00:38.64,yin,,0,0,0,, 这个纸牌匹配游戏 \N{\fs12}Okay. This card matching game
Dialogue: 0,0:00:38.64,0:00:43.70,yin,,0,0,0,, 将是我们头两周的基础材料 用以学习 Objective-C\N{\fs12}is going to be our substrate for the first two weeks of learning some Objective-C,
Dialogue: 0,0:00:43.70,0:00:47.87,yin,,0,0,0,, 学习 Xcode 学习 iOS 如何衔接起 \N{\fs12}learning about Xcode, learning about how iOS hooks
Dialogue: 0,0:00:47.87,0:00:52.54,yin,,0,0,0,, 控制器 视图以及模型 来建立 UI\N{\fs12}up the controller, and the view, and the model to make a UI.
Dialogue: 0,0:00:52.54,0:00:58.95,yin,,0,0,0,, 记得上次 我讲了这整个 Card 类 \N{\fs12}So if you remember from last time, we did this card thing that — we did the entire card.
Dialogue: 0,0:00:58.95,0:01:00.24,yin,,0,0,0,, 这个类很简单 \N{\fs12}It was a very simple class.
Dialogue: 0,0:01:00.24,0:01:04.11,yin,,0,0,0,, 它有三个属性和一个方法 \N{\fs12}Got a couple of properties — three properties there — and one method.
Dialogue: 0,0:01:04.11,0:01:05.73,yin,,0,0,0,, 就这么简单 \N{\fs12}And that’s pretty much it.
Dialogue: 0,0:01:05.73,0:01:09.84,yin,,0,0,0,, 今天我们将继续考虑另一个类 也就是 Deck\N{\fs12}And so today we’re going to go on and do another class, which is a deck.
Dialogue: 0,0:01:09.84,0:01:11.36,yin,,0,0,0,, 表示牌堆 \N{\fs12}The deck of cards.
Dialogue: 0,0:01:11.36,0:01:14.90,yin,,0,0,0,, 记住 Card 和 Deck 是通用的 \N{\fs12}And remember, that card and deck are generic;
Dialogue: 0,0:01:14.90,0:01:17.30,yin,,0,0,0,, 它们并非专门针对扑克牌 \N{\fs12}they’re not specific to playing cards, right?
Dialogue: 0,0:01:17.30,0:01:20.19,yin,,0,0,0,, 扑克牌是 PlayingCard 诸如梅花 A 红心 K 这些 \N{\fs12}A playing card, like the ace of clubs or the king of hearts –
Dialogue: 0,0:01:20.19,0:01:22.79,yin,,0,0,0,, 扑克牌是 PlayingCard 诸如梅花 A 红心 K 这些 \N{\fs12}something that has all that in it — that’s a playing card thing.
Dialogue: 0,0:01:22.79,0:01:24.38,yin,,0,0,0,, 这里是笼统的纸牌和牌堆 \N{\fs12}These are general cards and decks.
Dialogue: 0,0:01:24.38,0:01:26.66,yin,,0,0,0,, 可以是一副抽认卡 \N{\fs12}So this could be a deck of flash cards,
Dialogue: 0,0:01:26.66,0:01:30.56,yin,,0,0,0,, 一副外语单词卡等等 \N{\fs12}a deck of foreign language words you’re trying to learn or whatever.
Dialogue: 0,0:01:30.56,0:01:33.90,yin,,0,0,0,, 所以 我们希望这些 Deck 和 Card 类具有通用性 \N{\fs12}So we’re trying to keep these deck and card classes somewhat generic.
Dialogue: 0,0:01:33.90,0:01:34.84,yin,,0,0,0,, 这是 Deck\N{\fs12}So here’s deck.
Dialogue: 0,0:01:34.84,0:01:37.68,yin,,0,0,0,, 其基础结构你们应该熟悉 \N{\fs12}It should look familiar in terms of its basic structure, right?
Dialogue: 0,0:01:37.68,0:01:40.79,yin,,0,0,0,, 这里导入我们的父类框架 \N{\fs12}We’re importing our superclasses framework there,
Dialogue: 0,0:01:40.79,0:01:45.44,yin,,0,0,0,, 然后在实现中导入我们的头文件 \N{\fs12}and then obviously importing our own header file in our implementation.
Dialogue: 0,0:01:45.44,0:01:50.31,yin,,0,0,0,,Deck 的接口将有这样两个基础方法 \N{\fs12}And the interface for deck is going to have these two kind of fundamental methods:
Dialogue: 0,0:01:50.31,0:01:52.15,yin,,0,0,0,, 一是将纸牌加到牌堆中 \N{\fs12}One adds a card to the deck
Dialogue: 0,0:01:52.15,0:01:55.59,yin,,0,0,0,, 一是随机从牌堆中抽取一张牌 \N{\fs12}and one draws a random card out of the deck.
Dialogue: 0,0:01:55.59,0:02:00.82,yin,,0,0,0,, 添加纸牌到牌堆中的方法对你们而言有些新 \N{\fs12}And the add a card to the deck is a little bit new to you
Dialogue: 0,0:02:00.82,0:02:03.15,yin,,0,0,0,, 因为你们会看到它有两个参数 \N{\fs12}because you can see it has two arguments.
Dialogue: 0,0:02:03.15,0:02:05.88,yin,,0,0,0,, 这是你们第一次看到有两个参数的方法 \N{\fs12}This is the first method you’ve seen that has two arguments.
Dialogue: 0,0:02:05.88,0:02:08.62,yin,,0,0,0,, 之前你们看到的方法要么是没有参数 \N{\fs12}So far you’ve only seen methods with no arguments or a method
Dialogue: 0,0:02:08.62,0:02:10.71,yin,,0,0,0,, 要么只有一个参数 如 match\N{\fs12}with one argument like that — match –
Dialogue: 0,0:02:10.72,0:02:13.91,yin,,0,0,0,,match 只有一个参数 或 setter 也只有一个参数 \N{\fs12}match had one argument or the setters, they also have one argument.
Dialogue: 0,0:02:13.91,0:02:17.79,yin,,0,0,0,, 注意 Objective-C 中当你有多个参数时 \N{\fs12}So notice that when you have multiple arguments
Dialogue: 0,0:02:17.79,0:02:22.23,yin,,0,0,0,, 它们会穿插在方法名中间 \N{\fs12}in objective C, they’re kind of interspersed with the names of the methods.
Dialogue: 0,0:02:22.23,0:02:28.20,yin,,0,0,0,, 这个方法的名称是 addCard 冒号 atTop 冒号 \N{\fs12}So the name of this method, this long method is add card colon at top colon.
Dialogue: 0,0:02:28.20,0:02:29.95,yin,,0,0,0,, 这是该方法的名称 \N{\fs12}That’s the name of this method.
Dialogue: 0,0:02:29.95,0:02:33.32,yin,,0,0,0,,atTop 这部分其实也是方法名的一部分 \N{\fs12}So the at top part is actually part of the name of this method.
Dialogue: 0,0:02:33.32,0:02:35.56,yin,,0,0,0,, 而参数 像这里要加的纸牌 card\N{\fs12}And the arguments, like the card that you’re going to add
Dialogue: 0,0:02:35.56,0:02:38.19,yin,,0,0,0,, 和表示在牌堆上方还是下方的布尔值 atTop\N{\fs12}and at top — which is a Boolean whether to add it at the top
Dialogue: 0,0:02:38.19,0:02:40.34,yin,,0,0,0,, 和表示在牌堆上方还是下方的布尔值 atTop\N{\fs12}of the deck or at the bottom of the deck –
Dialogue: 0,0:02:40.34,0:02:43.58,yin,,0,0,0,, 这些参数穿插在方法名中间 \N{\fs12}those arguments are interspersed.
Dialogue: 0,0:02:43.58,0:02:47.68,yin,,0,0,0,, 等下你们会看到 这种方法如何调用 \N{\fs12}And we’ll see how you call such a method in a moment here.
Dialogue: 0,0:02:47.68,0:02:50.80,yin,,0,0,0,, 然后随机抽取一张牌的方法 \N{\fs12}And then draw a random card is like a, you know,
Dialogue: 0,0:02:50.80,0:02:55.14,yin,,0,0,0,, 没有参数 会返回一个值 这方面同 getter 类似 \N{\fs12}similar to a getter in that it returns a value and it has no arguments.
Dialogue: 0,0:02:55.14,0:02:58.70,yin,,0,0,0,, 但这不是 getter 因为我们没有将它作为一个属性 \N{\fs12}But this is not a getter because we didn’t make this a property.
Dialogue: 0,0:02:58.70,0:03:00.65,yin,,0,0,0,, 很重要的一点是 \N{\fs12}And it’s kind of important
Dialogue: 0,0:03:00.65,0:03:02.62,yin,,0,0,0,, 你可以把它弄成一个属性 \N{\fs12}to understand you could have made this a property
Dialogue: 0,0:03:02.62,0:03:04.97,yin,,0,0,0,, 例如只读属性这些 \N{\fs12}like a read-only property or something that reads it,
Dialogue: 0,0:03:04.97,0:03:08.52,yin,,0,0,0,, 但随机抽取一张牌做了一些事情 \N{\fs12}but since draw a random card kind of does something,
Dialogue: 0,0:03:08.52,0:03:12.32,yin,,0,0,0,, 它有一个算法 一个机制 \N{\fs12}it has kind of an algorithm to it — a mechanism –
Dialogue: 0,0:03:12.32,0:03:13.91,yin,,0,0,0,, 通常不要把它弄成属性 \N{\fs12}you usually wouldn’t make that a property.
Dialogue: 0,0:03:13.91,0:03:16.54,yin,,0,0,0,, 让 getter 做这个可以说是滥用 \N{\fs12}It’s kind of an abuse of a getter to do that.
Dialogue: 0,0:03:16.54,0:03:18.81,yin,,0,0,0,,getter 的作用只是设置和获取一个值 \N{\fs12}A getter is really just setting and getting a value.
Dialogue: 0,0:03:18.81,0:03:22.20,yin,,0,0,0,, 它可能有副作用 设置可能更新 UI\N{\fs12}It might have side effects, like setting it might update the UI
Dialogue: 0,0:03:22.21,0:03:26.16,yin,,0,0,0,, 或者获取可能确保先初始化了 诸如此类 \N{\fs12}or getting it might make sure it’s initialized first — those kind of things.
Dialogue: 0,0:03:26.16,0:03:28.02,yin,,0,0,0,, 做一些事的方法 \N{\fs12}You’re not going to — something that does something
Dialogue: 0,0:03:28.02,0:03:31.87,yin,,0,0,0,, 例如抽取一张牌不要弄成属性 \N{\fs12}like drawing a card is not going to be a property.
Dialogue: 0,0:03:31.87,0:03:36.95,yin,,0,0,0,, 如果你想要 atTop 这样的参数可选 \N{\fs12}Now, if you want to have, like, that at top argument be optional,
Dialogue: 0,0:03:36.95,0:03:39.77,yin,,0,0,0,,Objective-C 中的唯一做法是 \N{\fs12}okay, the only way to do that in Objective-C –
Dialogue: 0,0:03:39.77,0:03:42.42,yin,,0,0,0,, 显然我们这里需要一个头文件 \N{\fs12}obviously we need our header file there –
Dialogue: 0,0:03:42.42,0:03:44.01,yin,,0,0,0,,Objective-C 中唯一的做法是 \N{\fs12}the only way to do that in Objective-C is
Dialogue: 0,0:03:44.01,0:03:48.86,yin,,0,0,0,, 声明新方法 addCard: 不带 atTop\N{\fs12}to declare a new method, add card colon with no at top on it.
Dialogue: 0,0:03:48.86,0:03:51.49,yin,,0,0,0,, 这是一个完全不同的方法 \N{\fs12}So this is a totally different method, totally unrelated
Dialogue: 0,0:03:51.49,0:03:54.71,yin,,0,0,0,, 只不过在实现中 我们需要调用另一个方法 \N{\fs12}to the other method except for that in its implementation
Dialogue: 0,0:03:54.71,0:03:57.84,yin,,0,0,0,, 只不过在实现中 我们需要调用另一个方法 \N{\fs12}of this other method we’re just going to call the other one.
Dialogue: 0,0:03:57.84,0:04:00.03,yin,,0,0,0,, 所以 addCard 中 我们会说 self addCard\N{\fs12}So in add card we’re going to say self add card
Dialogue: 0,0:04:00.03,0:04:00.89,yin,,0,0,0,,atTop:\N{\fs12}at top colon,
Dialogue: 0,0:04:00.89,0:04:03.97,yin,,0,0,0,, 后面跟默认情况 这里也就是 NO\N{\fs12}whatever we want the default to be, which I’m going to say is no.
Dialogue: 0,0:04:03.97,0:04:07.42,yin,,0,0,0,, 这里只是要你们理解 在某些语言中 \N{\fs12}So just understand that, you know, in some languages,
Dialogue: 0,0:04:07.42,0:04:10.61,yin,,0,0,0,, 某些参数可以是可选的 \N{\fs12}like, some arguments can be optional or you can kind
Dialogue: 0,0:04:10.61,0:04:16.17,yin,,0,0,0,, 或者重载 让相同方法具有不同参数 \N{\fs12}of overload things to have the same method name have different arguments.
Dialogue: 0,0:04:16.17,0:04:19.69,yin,,0,0,0,, 不像 Objective-C 中 每种方法完全不同 \N{\fs12}No. In Objective-C every method is completely distinct
Dialogue: 0,0:04:19.69,0:04:21.15,yin,,0,0,0,, 有不同的名称 \N{\fs12}and has a distinct name.
Dialogue: 0,0:04:21.15,0:04:23.86,yin,,0,0,0,, 多出来的参数会像这样穿插 \N{\fs12}And extra arguments are interspersed like that.
Dialogue: 0,0:04:23.86,0:04:26.24,yin,,0,0,0,, 所以 这是两种不同方法 \N{\fs12}So these would be two different methods.
Dialogue: 0,0:04:26.24,0:04:27.59,yin,,0,0,0,, 能理解吗 \N{\fs12}That make sense?
Dialogue: 0,0:04:27.59,0:04:31.71,yin,,0,0,0,, 好 我们再来看看 Deck 的实现 \N{\fs12}All right. So let’s talk about our implementation of our deck.
Dialogue: 0,0:04:31.71,0:04:34.48,yin,,0,0,0,,Deck 包含一些纸牌 \N{\fs12}So our deck is just going to contain a bunch of cards.
Dialogue: 0,0:04:34.48,0:04:38.29,yin,,0,0,0,, 我们需要某种内部数据结构来存储所有这些牌 \N{\fs12}We need some sort of internal data structure to store all our cards in.
Dialogue: 0,0:04:38.29,0:04:43.45,yin,,0,0,0,, 我们将会用到的是一个可变数组 \N{\fs12}And what we’re going do is we’re going to get a mutable array.
Dialogue: 0,0:04:43.45,0:04:47.59,yin,,0,0,0,, 你们已经见过 NSArray 类 这是一种基础类数组 \N{\fs12}So you’ve already seen the class NS array, which is the foundation class array,
Dialogue: 0,0:04:47.59,0:04:49.25,yin,,0,0,0,, 其中是一组对象 \N{\fs12}which is an array of objects.
Dialogue: 0,0:04:49.25,0:04:51.69,yin,,0,0,0,, 数组中这些对象可以是任何类的 \N{\fs12}Those objects, by the way, in array can be of any class.
Dialogue: 0,0:04:51.69,0:04:56.95,yin,,0,0,0,, 数组中是哪类对象没法指定 \N{\fs12}There’s really no way to specify what kind of class of object is in an array.
Dialogue: 0,0:04:56.95,0:04:58.46,yin,,0,0,0,, 有些语言让你这样做 \N{\fs12}Some languages allow you to do that.
Dialogue: 0,0:04:58.46,0:05:02.80,yin,,0,0,0,, 你可以指定”这是字符串数组” 它于是知道 \N{\fs12}You can specify “This is an array of strings” and it knows that.
Dialogue: 0,0:05:02.80,0:05:04.38,yin,,0,0,0,, 但 Objective-C 不能这样 \N{\fs12}But in Objective-C you can’t do that.
Dialogue: 0,0:05:04.38,0:05:06.97,yin,,0,0,0,, 我将讲到我们怎么处理这个 \N{\fs12}And we’re going to talk about how we deal with that.
Dialogue: 0,0:05:06.99,0:05:08.93,yin,,0,0,0,, 这在 Objective-C 中有些狂放 \N{\fs12}That’s a little bit of the wild west of Objective-C,
Dialogue: 0,0:05:08.93,0:05:11.75,yin,,0,0,0,, 不过如果想确保安全的话 \N{\fs12}but there are ways to kind of check and see what the objects
Dialogue: 0,0:05:11.75,0:05:14.46,yin,,0,0,0,, 我们有办法检查对象是什么 \N{\fs12}are if you want to be really safe about it.
Dialogue: 0,0:05:14.46,0:05:16.35,yin,,0,0,0,, 而这里 我们用这个可变数组 \N{\fs12}But in this case we just have this mutable array.
Dialogue: 0,0:05:16.35,0:05:18.95,yin,,0,0,0,, 可变意思是说我们可以给数组添加对象 \N{\fs12}And mutable means that we can add objects to the array.
Dialogue: 0,0:05:18.95,0:05:21.84,yin,,0,0,0,, 一般的 NSArray 都是不可变的 \N{\fs12}Normally an NS array is immutable.
Dialogue: 0,0:05:21.84,0:05:24.39,yin,,0,0,0,, 创建后 不管其中放入了什么对象 \N{\fs12}Once it’s created, whatever objects enter it,
Dialogue: 0,0:05:24.39,0:05:25.62,yin,,0,0,0,, 这些对象就永远在里面 \N{\fs12}that’s the objects that are in it forever –
Dialogue: 0,0:05:25.62,0:05:27.91,yin,,0,0,0,, 你无法将它们删除 也无法继续添加 \N{\fs12}you can’t take any out and you can’t put any in.
Dialogue: 0,0:05:27.91,0:05:29.80,yin,,0,0,0,, 如果我们希望数组能添加东西 \N{\fs12}So if we want array where we can add stuff,
Dialogue: 0,0:05:29.80,0:05:33.31,yin,,0,0,0,, 我们需要使用 NSArray 的子类 NSMutableArray\N{\fs12}we have to use this subclass of NS array called NS mutable array.
Dialogue: 0,0:05:33.31,0:05:35.79,yin,,0,0,0,, 可以看到 它是一个属性 \N{\fs12}You can see that it’s a property.
Dialogue: 0,0:05:35.79,0:05:38.53,yin,,0,0,0,, 它是强的 因为我们希望只要指着数组时 \N{\fs12}It’s strong because we want this array to stay in the heap
Dialogue: 0,0:05:38.53,0:05:40.55,yin,,0,0,0,, 它就应该保留在堆中 \N{\fs12}as long as we’re pointing at it.
Dialogue: 0,0:05:40.55,0:05:43.06,yin,,0,0,0,, 当然 还有我们总会加的非原子性 \N{\fs12}And of course, we always put nonatomic there.
Dialogue: 0,0:05:43.08,0:05:45.94,yin,,0,0,0,, 这就是一个纸牌的数组 \N{\fs12}So this is going to be an array of cards.
Dialogue: 0,0:05:45.94,0:05:49.84,yin,,0,0,0,, 有了这个之后 我们可以轻松实现 addCard\N{\fs12}Now that we have this, we could easily implement add card,
Dialogue: 0,0:05:49.84,0:05:54.38,yin,,0,0,0,, 例如 我们可以说 “如果在顶部 那么插入对象”\N{\fs12}for example, by just saying, “If at top, then insert object,”
Dialogue: 0,0:05:54.38,0:05:57.86,yin,,0,0,0,,card 是这个方法的第一个参数 \N{\fs12}the card, which is the argument to this method — first argument –
Dialogue: 0,0:05:57.86,0:05:59.20,yin,,0,0,0,, 在下标 0 处 \N{\fs12}”at index zero.”
Dialogue: 0,0:05:59.20,0:06:03.97,yin,,0,0,0,,insertObject atIndex 是 NSMutableArray 中的方法 \N{\fs12}So insert object at index is a method in NS mutable array,
Dialogue: 0,0:06:03.97,0:06:07.28,yin,,0,0,0,, 不是在 NSArray 中 而是 NSMutableArray 中 \N{\fs12}not in NS array — only in NS mutable array
Dialogue: 0,0:06:07.29,0:06:09.03,yin,,0,0,0,, 因为这会让数组变化 \N{\fs12}because that would be mutating it –
Dialogue: 0,0:06:09.03,0:06:11.99,yin,,0,0,0,, 该方法是将对象插入到数组指定下标处 \N{\fs12}that inserts the object at that index in the array
Dialogue: 0,0:06:11.99,0:06:13.74,yin,,0,0,0,, 下标 0 表示是在顶端 \N{\fs12}and index zero is going to be the top
Dialogue: 0,0:06:13.74,0:06:15.16,yin,,0,0,0,, 我们会定义的 \N{\fs12}that we’re going to define.
Dialogue: 0,0:06:15.16,0:06:17.06,yin,,0,0,0,, 如果我们不把它放到顶部 那就放在底部 \N{\fs12}And then otherwise if we’re not going to put it at the
Dialogue: 0,0:06:17.06,0:06:17.91,yin,,0,0,0,, 如果我们不把它放到顶部 那就放在底部 \N{\fs12}top, we’re going to put it at the bottom,
Dialogue: 0,0:06:17.91,0:06:21.14,yin,,0,0,0,, 这要用到另一个 NSMutableArray 方法 addObject\N{\fs12}we’re going to use a different NS mutable array method called add object.
Dialogue: 0,0:06:21.14,0:06:23.88,yin,,0,0,0,, 作用是将数组添加到数组末尾 \N{\fs12}And that just adds something at the end of the array.
Dialogue: 0,0:06:23.88,0:06:25.36,yin,,0,0,0,, 大家都明白了吗 \N{\fs12}So everyone cool with that?
Dialogue: 0,0:06:25.36,0:06:27.53,yin,,0,0,0,, 这里给出这些方法只是为了 \N{\fs12}So I mostly just put this method in here just
Dialogue: 0,0:06:27.53,0:06:30.73,yin,,0,0,0,, 展示给你们可变数组的不同方法 \N{\fs12}to show you there’s a couple of different methods on mutable array and,
Dialogue: 0,0:06:30.73,0:06:32.97,yin,,0,0,0,, 以及如何使用参数 \N{\fs12}you know, how we can use the arguments.
Dialogue: 0,0:06:32.97,0:06:35.02,yin,,0,0,0,, 这里并没有什么大不了 \N{\fs12}It’s no big thing here;
Dialogue: 0,0:06:35.03,0:06:38.21,yin,,0,0,0,, 只是为了让你们习惯这里的情况 \N{\fs12}it’s just kind of to get more used to what’s going on here.
Dialogue: 0,0:06:38.21,0:06:40.97,yin,,0,0,0,, 好 这是 addCard 非常非常简单 \N{\fs12}All right. So that’s add card. Very, very simple.
Dialogue: 0,0:06:40.97,0:06:43.14,yin,,0,0,0,, 不过有个问题 \N{\fs12}And there’s a problem, though.
Dialogue: 0,0:06:43.14,0:06:49.18,yin,,0,0,0,, 在这个 addCard 中 如果我们只是创建一个 Deck\N{\fs12}In this add card, if we just created a deck
Dialogue: 0,0:06:49.18,0:06:52.23,yin,,0,0,0,, 然后调用 addCard 它无法奏效 \N{\fs12}and then called add card, it would not work.
Dialogue: 0,0:06:52.23,0:06:53.93,yin,,0,0,0,, 它什么都做不了 \N{\fs12}It would do nothing.
Dialogue: 0,0:06:53.93,0:06:55.48,yin,,0,0,0,, 为什么呢 \N{\fs12}Why would it do nothing?
Dialogue: 0,0:06:55.48,0:06:58.78,yin,,0,0,0,, 因为属性 cards\N{\fs12}Because the property cards, okay –
Dialogue: 0,0:06:58.78,0:07:01.40,yin,,0,0,0,,self.cards 是我们访问属性的方式 \N{\fs12}self.cards is how we’re accessing our own property –
Dialogue: 0,0:07:01.40,0:07:05.23,yin,,0,0,0,, 其 getter 根据默认是那样的 \N{\fs12}its getter looks like that by default.
Dialogue: 0,0:07:05.23,0:07:07.63,yin,,0,0,0,, 如果我们不自定义 getter getter 就是那样 \N{\fs12}If we don’t give a getter, that’s what the getter looks like.
Dialogue: 0,0:07:07.63,0:07:10.58,yin,,0,0,0,, 它会返回这个_cards 实例变量 \N{\fs12}It’s just going to return this underbar cards instance variable.
Dialogue: 0,0:07:10.58,0:07:14.30,yin,,0,0,0,, 而这个_cards 实例变量最开始会是 0\N{\fs12}Well, that underbar cards instance variable’s going to start out at zero
Dialogue: 0,0:07:14.30,0:07:18.59,yin,,0,0,0,, 因为 Objective-C 中所有实例变量都从 0 开始 \N{\fs12}because all instance variables in an Objective-C object start out zero.
Dialogue: 0,0:07:18.59,0:07:19.44,yin,,0,0,0,, 所有 \N{\fs12}All of them.
Dialogue: 0,0:07:19.44,0:07:21.88,yin,,0,0,0,, 包括指针 \N{\fs12}So including pointers.
Dialogue: 0,0:07:21.88,0:07:24.90,yin,,0,0,0,, 那个指针会是 0 也就是 nil\N{\fs12}So that pointer will be zero, which is we call nil,
Dialogue: 0,0:07:24.90,0:07:29.37,yin,,0,0,0,, 也就是说它没有指向任何东西 也就是说没有数组 \N{\fs12}which means it doesn’t point to anything, which means there is no array.
Dialogue: 0,0:07:29.37,0:07:33.18,yin,,0,0,0,, 指向数组的指针现在什么都没指到 \N{\fs12}We got a pointer to an array that doesn’t point to anything right now.
Dialogue: 0,0:07:33.18,0:07:34.67,yin,,0,0,0,, 这是一个问题 \N{\fs12}So that’s a problem.
Dialogue: 0,0:07:34.67,0:07:36.85,yin,,0,0,0,, 所以当我们执行 addCard 中 \N{\fs12}So when we execute the code in add card
Dialogue: 0,0:07:36.85,0:07:39.67,yin,,0,0,0,,self.cards addObject:card 这样的代码时 \N{\fs12}like self.cards add object card,
Dialogue: 0,0:07:39.67,0:07:43.78,yin,,0,0,0,, 程序不会崩溃 但也不会做任何事情 \N{\fs12}that’s going to not crash but not do anything, either.
Dialogue: 0,0:07:43.78,0:07:47.44,yin,,0,0,0,, 因为我说过 你可以将消息发送给 nil\N{\fs12}Because I told you that you can send messages to nil,
Dialogue: 0,0:07:47.44,0:07:51.75,yin,,0,0,0,, 发送消息给没有指向任何对象的指针 \N{\fs12}send messages to pointers, to objects where it’s not pointing to one at the time,
Dialogue: 0,0:07:51.77,0:07:53.71,yin,,0,0,0,, 这不会崩溃掉 \N{\fs12}and it will not crash.
Dialogue: 0,0:07:53.71,0:07:58.35,yin,,0,0,0,, 如果发送返回某个值的消息 该消息不会执行任何代码 \N{\fs12}If you send a message that returns a value, that message will not execute any code
Dialogue: 0,0:07:58.35,0:07:59.89,yin,,0,0,0,, 它会返回 0\N{\fs12}but it will return zero.
Dialogue: 0,0:07:59.89,0:08:02.14,yin,,0,0,0,, 这里只是一堆 0 在飞舞 \N{\fs12}So a lot of zeros flying around here.
Dialogue: 0,0:08:02.14,0:08:04.05,yin,,0,0,0,, 这个如何修正呢 \N{\fs12}So how are we going to fix this?
Dialogue: 0,0:08:04.05,0:08:06.57,yin,,0,0,0,, 我们如何让 addCard 工作呢 \N{\fs12}How are we going make it so that add card works?
Dialogue: 0,0:08:06.57,0:08:09.49,yin,,0,0,0,, 我们可以在 addCard 最开始加这样一段 \N{\fs12}Well, we could put something at the beginning of add card that says,
Dialogue: 0,0:08:09.51,0:08:12.56,yin,,0,0,0,, 如果 self.cards 为 nil\N{\fs12}”If self.cards is nil,
Dialogue: 0,0:08:12.56,0:08:17.79,yin,,0,0,0,, 那么在堆中分配一个数组并指向它 我们会用到它 \N{\fs12}then go allocate an array in the heap and point to it, and then we’ll use it.”
Dialogue: 0,0:08:17.79,0:08:21.12,yin,,0,0,0,, 这就意味着每次使用 self.cards 时 \N{\fs12}But that would mean every single time we have to use self.cards
Dialogue: 0,0:08:21.12,0:08:23.56,yin,,0,0,0,, 我们都需要检验它是否为 nil\N{\fs12}we’d have to go around and check and make sure it’s not nil.
Dialogue: 0,0:08:23.56,0:08:25.35,yin,,0,0,0,, 这很让人不爽 \N{\fs12}And that would be very annoying.
Dialogue: 0,0:08:25.35,0:08:29.35,yin,,0,0,0,, 这很易于出错 易于产生 bug 我们可能忘记掉 \N{\fs12}That would be very error-prone, bug-prone, we forget to do it somewhere.
Dialogue: 0,0:08:29.35,0:08:30.31,yin,,0,0,0,, 所有这些 \N{\fs12}All these things.
Dialogue: 0,0:08:30.31,0:08:35.32,yin,,0,0,0,, 所以 加入这一段的最佳位置是在 getter 中 \N{\fs12}So a great place to do that little if check is in the getter.
Dialogue: 0,0:08:35.32,0:08:37.22,yin,,0,0,0,, 也就是 cards 的那个 getter\N{\fs12}That getter that we have right there for cards –
Dialogue: 0,0:08:37.22,0:08:40.27,yin,,0,0,0,, 这是私有属性 cards 的 getter\N{\fs12}that’s the getter for our private property cards –
Dialogue: 0,0:08:40.27,0:08:42.54,yin,,0,0,0,, 我们让这里不仅仅是返回_cards\N{\fs12}instead of just returning the cards,
Dialogue: 0,0:08:42.54,0:08:47.26,yin,,0,0,0,, 前面我们再加一行 如果_cards 为 nil\N{\fs12}let’s put a line right in front that says, “If the cards is nil,
Dialogue: 0,0:08:47.26,0:08:52.19,yin,,0,0,0,, 那么 我们就要在堆中分配空间 并赋值给实例变量 \N{\fs12}then let’s go allocate one in the heap and assign it to the instance variable.”
Dialogue: 0,0:08:52.19,0:08:57.73,yin,,0,0,0,, 这里在堆中分配数组的方式是用 \N{\fs12}So the way you allocate an array in the heap is
Dialogue: 0,0:08:57.73,0:09:00.39,yin,,0,0,0,,[[NSMutableArray alloc] init]\N{\fs12}you use NS mutable array alloc init.
Dialogue: 0,0:09:00.39,0:09:04.17,yin,,0,0,0,, 这是两个消息调用嵌套在一起 \N{\fs12}So that’s two message calls nested inside of each other.
Dialogue: 0,0:09:04.17,0:09:06.26,yin,,0,0,0,,alloc 在堆中分配内存 \N{\fs12}The alloc allocates the memory in the heap,
Dialogue: 0,0:09:06.26,0:09:10.54,yin,,0,0,0,,init 则用于初始化内存 让它成为一个合理的数组 \N{\fs12}and init initializes that memory so that it’s a, you know, sensible array.
Dialogue: 0,0:09:10.54,0:09:15.29,yin,,0,0,0,, 过几张幻灯片 我会讲到如何构建我们自己的初始化程序 \N{\fs12}And we’re going to see how we build our own initializer in a couple slides here.
Dialogue: 0,0:09:15.29,0:09:20.97,yin,,0,0,0,, 这样一来 每次调用 self.cards 都能保证它不是 nil\N{\fs12}So this way every single time you call self.cards, you can be sure that it’s not nil;
Dialogue: 0,0:09:20.97,0:09:23.69,yin,,0,0,0,, 它至少会是一个空数组 \N{\fs12}it’s at least going to be an empty array.
Dialogue: 0,0:09:23.71,0:09:25.91,yin,,0,0,0,, 大家都明白这段代码了吗 \N{\fs12}Does everyone understand this code?
Dialogue: 0,0:09:25.91,0:09:28.51,yin,,0,0,0,, 理解这个非常重要 请讲 \N{\fs12}It’s important to understand this. Yeah.
Dialogue: 0,0:09:28.51,0:09:37.47,yin,,0,0,0,,[学生提问 声音不清]\N{\fs12}> [Inaudible]
Dialogue: 0,0:09:37.48,0:09:39.61,yin,,0,0,0,,Paul Hegarty：好 问题是 \N{\fs12}> Paul Hegarty: Okay. So the question is:
Dialogue: 0,0:09:39.62,0:09:42.90,yin,,0,0,0,, 可不可以不将初始化代码放到这个 getter 中 \N{\fs12}Instead of having this initialization code be in this getter,
Dialogue: 0,0:09:42.90,0:09:48.97,yin,,0,0,0,, 而将初始化代码放到 Deck 的 init 中 放到 Deck 中 \N{\fs12}why don’t I make an initializer like in init for deck and put this inside deck?
Dialogue: 0,0:09:48.97,0:09:50.63,yin,,0,0,0,, 这是另一种可选做法 \N{\fs12}And that is another option.
Dialogue: 0,0:09:50.63,0:09:53.82,yin,,0,0,0,, 等下在 PlayingCardDeck 中 我会写一段初始化程序 \N{\fs12}And again, we’re going to see initializer for playing card deck,
Dialogue: 0,0:09:53.82,0:09:55.44,yin,,0,0,0,, 等下在 PlayingCardDeck 中 我会写一段初始化程序 \N{\fs12}we’re going to make an initializer.
Dialogue: 0,0:09:55.44,0:09:57.45,yin,,0,0,0,, 我们可以这样做 \N{\fs12}And we could do that. But
Dialogue: 0,0:09:57.45,0:10:01.10,yin,,0,0,0,, 但让这些的初始化更接近于 \N{\fs12}having the initialization of this thing be closer
Dialogue: 0,0:10:01.10,0:10:04.82,yin,,0,0,0,, 实际获得属性的地方更加…\N{\fs12}to the actual getting of the property is more –
Dialogue: 0,0:10:04.82,0:10:08.97,yin,,0,0,0,, 它让你的 init 中这样的垃圾更少 \N{\fs12}it makes your init less full of a bunch of junk like that.
Dialogue: 0,0:10:08.97,0:10:13.01,yin,,0,0,0,, 顺便说下 这样做被称作惰性实例化 \N{\fs12}And this is called lazy instantiation, by the way, doing it this way.
Dialogue: 0,0:10:13.01,0:10:18.18,yin,,0,0,0,, 我们是惰性地等到最后一秒再实例化 \N{\fs12}We are lazily waiting to the last second until we instantiate.
Dialogue: 0,0:10:18.18,0:10:21.25,yin,,0,0,0,, 这种做法是 Objective-C 中每个人都习惯的 \N{\fs12}This pattern is something everyone in Objective-C is used to,
Dialogue: 0,0:10:21.25,0:10:23.93,yin,,0,0,0,, 你们也应当用这个 而不是写到 init 中 \N{\fs12}and you should definitely use it rather than doing things in your init.
Dialogue: 0,0:10:23.93,0:10:27.53,yin,,0,0,0,,init 中 你希望设置各种 \N{\fs12}In init you want to, you know, set things, set values that,
Dialogue: 0,0:10:27.53,0:10:30.29,yin,,0,0,0,, 不能简单像这样初始化的值 \N{\fs12}you know, can’t easily be defaulted like this.
Dialogue: 0,0:10:30.29,0:10:32.47,yin,,0,0,0,, 不过你问得很好 \N{\fs12}But that’s a very good question.
Dialogue: 0,0:10:32.47,0:10:34.72,yin,,0,0,0,, 过几张幻灯我们就会看到 init\N{\fs12}And we’ll see init in a couple slides.
Dialogue: 0,0:10:34.72,0:10:37.86,yin,,0,0,0,, 这样我们就保证了 self.cards 不为 nil 请讲 \N{\fs12}So this way we’re guaranteed self.cards is never nil. Yeah?
Dialogue: 0,0:10:37.89,0:10:40.63,yin,,0,0,0,,[学生提问 声音不清]\N{\fs12}> [Inaudible]
Dialogue: 0,0:10:40.63,0:10:43.18,yin,,0,0,0,,Paul Hegarty：对 下划线来自上一讲 \N{\fs12}> Paul Hegarty: Yeah. So the underscore is from last lecture.
Dialogue: 0,0:10:43.18,0:10:46.53,yin,,0,0,0,, 记得吧 当我们创建一个属性时 \N{\fs12}Remember that when we create a property,
Dialogue: 0,0:10:46.53,0:10:48.67,yin,,0,0,0,,Objective-C 会自动给出 \N{\fs12}Objective-C automatically does this thing,
Dialogue: 0,0:10:48.67,0:10:51.85,yin,,0,0,0,,@synthesize cards = _cards\N{\fs12}@synthesize cards equals underbar cards.
Dialogue: 0,0:10:51.85,0:10:56.51,yin,,0,0,0,, 也就是说 这赋值了一个实例变量 叫下划线属性名 \N{\fs12}So in other words, it assigns an instance variable called underbar name of property
Dialogue: 0,0:10:56.51,0:10:58.57,yin,,0,0,0,, 作为该属性的存储空间 \N{\fs12}to be the storage space for that property.
Dialogue: 0,0:10:58.57,0:11:02.99,yin,,0,0,0,, 因此_cards 是自动创建的 这是幕后完成的 \N{\fs12}So that’s why underbar cards are automatically created for us there behind the scenes.
Dialogue: 0,0:11:02.99,0:11:06.85,yin,,0,0,0,,@synthesize 没出现在我的代码里 但它确实存在 \N{\fs12}That at sign synthesizes a pop up in our code, but it’s there behind the scenes.
Dialogue: 0,0:11:06.85,0:11:09.18,yin,,0,0,0,, 问得很好 \N{\fs12}That’s a very good question.
Dialogue: 0,0:11:09.18,0:11:11.86,yin,,0,0,0,, 这里还有问题吗 \N{\fs12}Any other questions about this?
Dialogue: 0,0:11:11.86,0:11:18.14,yin,,0,0,0,, 好 下面继续来看随机抽取纸牌方法 \N{\fs12}Okay. So let’s collapse down some of this stuff and look at draw a random card.
Dialogue: 0,0:11:18.14,0:11:24.52,yin,,0,0,0,, 随机抽取纸牌希望从 self.cards 中随机抽选一张牌 \N{\fs12}So draw a random card, all it wants to do is get a random card out of that self.cards.
Dialogue: 0,0:11:24.52,0:11:27.33,yin,,0,0,0,, 代码很简单 \N{\fs12}So that code is very simple as well.
Dialogue: 0,0:11:27.33,0:11:30.25,yin,,0,0,0,, 我们获取一个随机整数 \N{\fs12}So we just get a random integer.
Dialogue: 0,0:11:30.25,0:11:34.04,yin,,0,0,0,,arc4random 就是做这个的 它是一个 C 库函数 \N{\fs12}That’s what arc 4 random does if you don’t know. It’s just a C library function.
Dialogue: 0,0:11:34.04,0:11:35.53,yin,,0,0,0,, 用于获取一个随机整数 \N{\fs12}It gets a random integer.
Dialogue: 0,0:11:35.53,0:11:39.80,yin,,0,0,0,, 之后的 % 表示求余数 \N{\fs12}Then that little percent after it means mod — okay, integer modulo –
Dialogue: 0,0:11:39.80,0:11:42.09,yin,,0,0,0,, 然后 self.cards count 是 \N{\fs12}and then self.cards count is
Dialogue: 0,0:11:42.10,0:11:44.87,yin,,0,0,0,,self.cards 中纸牌的数目 \N{\fs12}the number of cards in our self.cards.
Dialogue: 0,0:11:44.87,0:11:49.17,yin,,0,0,0,, 这就得到随机数 index 作为 self.cards 的下标 \N{\fs12}So we’re just going to get a random index into self.cards,
Dialogue: 0,0:11:49.17,0:11:51.45,yin,,0,0,0,, 然后赋值给 randomCard\N{\fs12}then assign a random card
Dialogue: 0,0:11:51.45,0:11:55.39,yin,,0,0,0,,= self.cards[index]\N{\fs12}to be self.cards square brackets index.
Dialogue: 0,0:11:55.39,0:12:01.48,yin,,0,0,0,, 这里方括号是数组访问的标准语法 \N{\fs12}So this is that same square brackets to access an array kind of syntax.
Dialogue: 0,0:12:01.48,0:12:05.05,yin,,0,0,0,, 有趣的是 self.cards[index] 实际上 \N{\fs12}And it’s interesting, that self.cards square brackets index, actually,
Dialogue: 0,0:12:05.05,0:12:07.29,yin,,0,0,0,, 也是一个消息发送 信不信由你 \N{\fs12}that’s a message send believe it or not.
Dialogue: 0,0:12:07.29,0:12:12.45,yin,,0,0,0,, 这等价于 self.cards objectAtIndex:index\N{\fs12}That’s same as self.cards object at index index.
Dialogue: 0,0:12:12.45,0:12:15.80,yin,,0,0,0,, 这里只是一种特殊的语法甜头 \N{\fs12}It’s just some special syntax and syntactic sugar
Dialogue: 0,0:12:15.80,0:12:18.45,yin,,0,0,0,, 这样你就不需要写很长的 objectAtIndex 了 \N{\fs12}to make it so that you don’t have to have long object at index.
Dialogue: 0,0:12:18.45,0:12:22.46,yin,,0,0,0,, 不需要 objectAtIndexedSubscript 这样的长方法名 \N{\fs12}It’s actually object at subscripted index or something with a real long method name.
Dialogue: 0,0:12:22.46,0:12:26.10,yin,,0,0,0,, 这里只是一些简短美妙的语法 \N{\fs12}So this is just a beautiful, little simple syntax.
Dialogue: 0,0:12:26.10,0:12:30.82,yin,,0,0,0,, 不过这是一种消息发送 来得到数组该下标处的牌 \N{\fs12}But that is a message send to get the card at that index out of the array.
Dialogue: 0,0:12:30.82,0:12:35.56,yin,,0,0,0,, 然后我们还要从数组中删除这张牌 \N{\fs12}And then we’re also going to remove that card out of the array
Dialogue: 0,0:12:35.56,0:12:38.26,yin,,0,0,0,, 因为这张牌已经被抽出 \N{\fs12}because this is draw a random card.
Dialogue: 0,0:12:38.26,0:12:42.45,yin,,0,0,0,, 抽出后就不在这一叠牌中了 \N{\fs12}It’s draw the card out of the deck. So it’s not in the deck anymore, right?
Dialogue: 0,0:12:42.45,0:12:45.66,yin,,0,0,0,, 这段代码也有问题 也就是 \N{\fs12}Now, there’s a problem with this code as well, which is:
Dialogue: 0,0:12:45.66,0:12:48.50,yin,,0,0,0,, 如果这一叠牌是空的怎么办 \N{\fs12}What if the deck is empty?
Dialogue: 0,0:12:48.50,0:12:53.61,yin,,0,0,0,, 如果这一叠牌是空的 那么 unsigned index 将是 0\N{\fs12}If the deck is empty, then that unsigned index is going to be zero,
Dialogue: 0,0:12:53.63,0:12:56.91,yin,,0,0,0,, 这里将是 arc4random % 0\N{\fs12}right, because it’s going to be arc 4 random mod zero.
Dialogue: 0,0:12:56.91,0:12:58.78,yin,,0,0,0,, 这将是 0\N{\fs12}That’s going to be zero.
Dialogue: 0,0:12:58.80,0:13:02.18,yin,,0,0,0,, 于是后面就是 randomCard = self.cards[0]\N{\fs12}And so you’re going to say, “Random card equals self.card sub zero.”
Dialogue: 0,0:13:02.18,0:13:05.14,yin,,0,0,0,, 这会让你的程序崩溃掉 \N{\fs12}Well, that’s going to crash your program
Dialogue: 0,0:13:05.14,0:13:07.94,yin,,0,0,0,, 因为 self.cards 是一个空数组 \N{\fs12}because if self.cards is an empty array,
Dialogue: 0,0:13:07.94,0:13:12.38,yin,,0,0,0,, 那么下标 0 处将没有对象 这是数组下标越界错误 \N{\fs12}then there’s no object at index zero and you’re going to get array index out of bounds.
Dialogue: 0,0:13:12.38,0:13:14.47,yin,,0,0,0,, 小心这个 \N{\fs12}So be careful of that.
Dialogue: 0,0:13:14.47,0:13:18.71,yin,,0,0,0,, 数组在某下标处没有对象时 你就无法得到它 \N{\fs12}The index — you cannot get the index — if an array doesn’t have an object
Dialogue: 0,0:13:18.71,0:13:20.98,yin,,0,0,0,, 数组在某下标处没有对象时 你就无法得到它 \N{\fs12}of that index, you can’t get it.
Dialogue: 0,0:13:20.98,0:13:22.71,yin,,0,0,0,, 这很好修正 \N{\fs12}So that’s easy to fix, though.
Dialogue: 0,0:13:22.71,0:13:26.80,yin,,0,0,0,, 我们可以加上 if ([self.cards count])\N{\fs12}We’re just going to say, “If self.cards count,”
Dialogue: 0,0:13:26.80,0:13:29.76,yin,,0,0,0,, 也就是说 如果数组中有内容 那么我们就这样做 \N{\fs12}in other words if there are things in the array, “then we’ll do that.
Dialogue: 0,0:13:29.76,0:13:32.70,yin,,0,0,0,, 否则我们将返回 randomCard\N{\fs12}Otherwise we’re just going to return random card,” which I
Dialogue: 0,0:13:32.70,0:13:35.48,yin,,0,0,0,, 方法最开始时我就已经将其初始化为 nil 了 \N{\fs12}happily initialized to nil at the beginning of my method.
Dialogue: 0,0:13:35.50,0:13:37.55,yin,,0,0,0,, 所以我喜欢这样做 \N{\fs12}And that’s why I kind of like this thing of
Dialogue: 0,0:13:37.56,0:13:40.11,yin,,0,0,0,, 初始化得到你想要的默认值 \N{\fs12}initialize it to the default value you want,
Dialogue: 0,0:13:40.11,0:13:41.83,yin,,0,0,0,, 然后设置 然后返回 \N{\fs12}then set it, and then return.
Dialogue: 0,0:13:41.83,0:13:44.10,yin,,0,0,0,, 这样一来 如果设置不幸失败的话 \N{\fs12}And that way if the setting fails for some reason
Dialogue: 0,0:13:44.10,0:13:46.12,yin,,0,0,0,, 例如像这样 一叠牌根本就没牌 \N{\fs12}like this — it fails because there’s no cards in the deck –
Dialogue: 0,0:13:46.12,0:13:48.33,yin,,0,0,0,, 它会返回合适的默认值 \N{\fs12}it will return the reasonable default.
Dialogue: 0,0:13:48.33,0:13:50.61,yin,,0,0,0,, 这是一种编程风格 \N{\fs12}That’s just kind of a coding style thing.
Dialogue: 0,0:13:50.61,0:13:53.60,yin,,0,0,0,, 我们对 score 和 match 也做了相同的事情 \N{\fs12}We did that same thing with score and match.
Dialogue: 0,0:13:53.60,0:13:57.05,yin,,0,0,0,, 关于这个有问题吗 请讲 \N{\fs12}Any questions about that? Yeah?
Dialogue: 0,0:13:57.05,0:14:03.58,yin,,0,0,0,,[学生提问 声音不清]\N{\fs12}[Inaudible]
Dialogue: 0,0:14:03.58,0:14:04.96,yin,,0,0,0,,Paul Hegarty：问得很好 \N{\fs12}> Paul Hegarty: Great question.
Dialogue: 0,0:14:04.96,0:14:11.17,yin,,0,0,0,, 问题是 什么时候用 NSInteger 或 NSUInteger\N{\fs12}So the question is: When do I use NS integer or NSU integer
Dialogue: 0,0:14:11.17,0:14:15.37,yin,,0,0,0,, 而不用 int 甚至我们还没讲到过的 NSNumber\N{\fs12}versus int or even NS number, which is an object which we haven’t talked about yet?
Dialogue: 0,0:14:15.37,0:14:17.62,yin,,0,0,0,, 答案是 这是一个风格问题 \N{\fs12}And the answer is it’s a matter of style.
Dialogue: 0,0:14:17.62,0:14:20.92,yin,,0,0,0,, 我会简单讲到这种风格 以及何时使用这些 \N{\fs12}And we’ll talk a little bit about that style and when to use these things.
Dialogue: 0,0:14:20.92,0:14:24.01,yin,,0,0,0,, 只是在局部使用时 \N{\fs12}Here I don’t really want to use an NS number which is an object
Dialogue: 0,0:14:24.01,0:14:27.81,yin,,0,0,0,, 不要用 NSNumber 这种对象 \N{\fs12}when I’m just using it, you know, as a little local thing like that.
Dialogue: 0,0:14:27.81,0:14:28.63,yin,,0,0,0,, 不要那样 \N{\fs12}You would never do that.
Dialogue: 0,0:14:28.63,0:14:32.91,yin,,0,0,0,, 使用 NSNumber 通常是为了将其传递给方法 \N{\fs12}You’re using NS numbers basically to pass them to methods.
Dialogue: 0,0:14:32.93,0:14:35.55,yin,,0,0,0,, 哪怕这时你也可以传递 int 或 float 值 \N{\fs12}And even then you could pass ints, you know, and floats.
Dialogue: 0,0:14:35.55,0:14:41.81,yin,,0,0,0,, 下周讲 NSNumber 时这会变得很明显 \N{\fs12}So it will be become obvious as I talk about NS number, which we’ll do next week.
Dialogue: 0,0:14:41.81,0:14:43.60,yin,,0,0,0,, 这是 Deck\N{\fs12}Okay. So that’s it for deck.
Dialogue: 0,0:14:43.60,0:14:46.15,yin,,0,0,0,,Deck 也是很简单的类 \N{\fs12}Deck, very simple class as well.
Dialogue: 0,0:14:46.17,0:14:49.08,yin,,0,0,0,, 下面看另一个类 也就是 PlayingCard\N{\fs12}So let’s move onto another class, which is playing card.
Dialogue: 0,0:14:49.08,0:14:50.65,yin,,0,0,0,, 我展示 PlayingCard\N{\fs12}The reason I’m showing you playing cards,
Dialogue: 0,0:14:50.65,0:14:52.72,yin,,0,0,0,, 是为了跟你们讲解某一类的子类怎么写 \N{\fs12}I just want to show you what it looks like to make a subclass
Dialogue: 0,0:14:52.72,0:14:54.14,yin,,0,0,0,, 是为了跟你们讲解某一类的子类怎么写 \N{\fs12}of another class that you’ve written.
Dialogue: 0,0:14:54.14,0:14:56.74,yin,,0,0,0,,PlayingCard 是 Card 的子类 \N{\fs12}So playing card is a subclass of card.
Dialogue: 0,0:14:56.74,0:14:59.91,yin,,0,0,0,, 它专指扑克牌 例如红心 K\N{\fs12}And this is the specific card like king of hearts,
Dialogue: 0,0:14:59.91,0:15:02.98,yin,,0,0,0,, 方片 3 这些牌 \N{\fs12}three of diamonds, that kind of card.
Dialogue: 0,0:15:02.98,0:15:08.58,yin,,0,0,0,,PlayingCard 具有特有属性 suit 和 rank\N{\fs12}Now, it has properties that are specific to a playing card, which is the suit and rank.
Dialogue: 0,0:15:08.58,0:15:11.84,yin,,0,0,0,,rank 也就是大小 3 4 J K 这些 \N{\fs12}The rank being like a three, four, a jack, king, right?
Dialogue: 0,0:15:11.84,0:15:14.26,yin,,0,0,0,,suit 是花色 红心 方片 梅花 \N{\fs12}And the suit being hearts, diamonds, clubs.
Dialogue: 0,0:15:14.26,0:15:17.68,yin,,0,0,0,, 我将用单字符表示 suit\N{\fs12}And I’m going to represent the suit as a single character –
Dialogue: 0,0:15:17.68,0:15:19.50,yin,,0,0,0,, 红心字符 梅花字符 \N{\fs12}the hearts characters, the clubs character.
Dialogue: 0,0:15:19.50,0:15:23.34,yin,,0,0,0,, 我好像展示过扑克牌中梅花字符的输入 \N{\fs12}Remember I typed the clubs character I think in the card we might have shown that.
Dialogue: 0,0:15:23.34,0:15:25.19,yin,,0,0,0,, 反正 你可以输入一个字符 \N{\fs12}I don’t know. But you can type a single character.
Dialogue: 0,0:15:25.19,0:15:27.68,yin,,0,0,0,,Unicode 对这四种花色都有相应字符 \N{\fs12}Unicode has a character for each of the four suits.
Dialogue: 0,0:15:27.70,0:15:28.75,yin,,0,0,0,, 这是 suit\N{\fs12}So that’s what my suit is going to be.
Dialogue: 0,0:15:28.75,0:15:33.07,yin,,0,0,0,, 而 rank 是从 0 到 13 数字 \N{\fs12}And then the rank is going to be a number between zero and thirteen.
Dialogue: 0,0:15:33.07,0:15:34.64,yin,,0,0,0,,13 表示 K\N{\fs12}Is that king?
Dialogue: 0,0:15:34.64,0:15:36.62,yin,,0,0,0,, 这些表示大小 \N{\fs12}Yeah. Representing the rank.
Dialogue: 0,0:15:36.62,0:15:39.26,yin,,0,0,0,, 这就是公共 API 中的表示 \N{\fs12}So that’s how I’m going to represent in my public API.
Dialogue: 0,0:15:39.28,0:15:42.13,yin,,0,0,0,, 注意这里我用的是 NSUInteger\N{\fs12}And here I’m using notice NSU integer
Dialogue: 0,0:15:42.13,0:15:43.94,yin,,0,0,0,, 而不是 unsigned int\N{\fs12}instead of unsigned int.
Dialogue: 0,0:15:43.94,0:15:47.27,yin,,0,0,0,,NSUInteger 和 unsigned int 几乎是一回事 \N{\fs12}So NSU integer and unsigned int are almost exactly the same thing.
Dialogue: 0,0:15:47.27,0:15:50.12,yin,,0,0,0,,NSUInteger 唯一不同的是 它是一个 typedef\N{\fs12}The only thing about NSU integer is it’s typedef.
Dialogue: 0,0:15:50.12,0:15:52.54,yin,,0,0,0,, 它在不同平台下可能略有不同 \N{\fs12}It might be a little different on different platforms.
Dialogue: 0,0:15:52.54,0:15:56.52,yin,,0,0,0,, 例如新的 iPhone 5S 是 64 位处理器 \N{\fs12}For example, the new iPhone 5s are 64-bit processers.
Dialogue: 0,0:15:56.52,0:16:01.55,yin,,0,0,0,, 所以 NSUInteger 是 64 位无符号整型 \N{\fs12}So NSU integer is going to be a 64-bit int, unsigned int on an iPhone 5.
Dialogue: 0,0:16:01.55,0:16:05.32,yin,,0,0,0,, 而之前的 iPhone 则只有 32 位 \N{\fs12}And it might only about a 32-bit one back on an iPhone 4 and before.
Dialogue: 0,0:16:05.32,0:16:08.68,yin,,0,0,0,, 这里有些不同 \N{\fs12}So that’s a little bit different.
Dialogue: 0,0:16:08.68,0:16:10.43,yin,,0,0,0,, 很细枝末节 \N{\fs12}So a minor nit.
Dialogue: 0,0:16:10.43,0:16:12.47,yin,,0,0,0,, 我们可能要不了那么大的整数 \N{\fs12}We were probably not representing integers.
Dialogue: 0,0:16:12.47,0:16:14.41,yin,,0,0,0,, 显然 这里只是从 0 到 13\N{\fs12}Certainly here we’re only going zero to thirteen.
Dialogue: 0,0:16:14.41,0:16:15.80,yin,,0,0,0,, 问题不大 \N{\fs12}Probably doesn’t matter.
Dialogue: 0,0:16:15.80,0:16:19.03,yin,,0,0,0,, 要知道 我们用不到 33 位那么大的数 \N{\fs12}But, you know, we’re not representing integers that are so gigantic
Dialogue: 0,0:16:19.03,0:16:21.63,yin,,0,0,0,, 要知道 我们用不到 33 位那么大的数 \N{\fs12}that we’re going to be using the 33rd bit.
Dialogue: 0,0:16:22.66,0:16:25.11,yin,,0,0,0,, 注意到 PlayingCard 中 \N{\fs12}So notice that in playing card
Dialogue: 0,0:16:25.11,0:16:28.32,yin,,0,0,0,, 我们重写了 Card 方法 contents\N{\fs12}we’re overriding card method contents.
Dialogue: 0,0:16:28.32,0:16:30.98,yin,,0,0,0,, 我们从父类继承了 contents\N{\fs12}We inherit contents from our superclass.
Dialogue: 0,0:16:30.98,0:16:33.24,yin,,0,0,0,, 根据默认 contents 仅仅返回 \N{\fs12}And by default contents just returns
Dialogue: 0,0:16:33.24,0:16:36.31,yin,,0,0,0,,contents 属性的值 \N{\fs12}the value of whatever the contents property is.
Dialogue: 0,0:16:36.31,0:16:39.55,yin,,0,0,0,, 但这里在 PlayingCard 中 我们将重写 contents\N{\fs12}But here in the playing card we’re going to override contents
Dialogue: 0,0:16:39.55,0:16:43.92,yin,,0,0,0,, 基于其它两个属性来实际计算 contents\N{\fs12}to actually calculate our contents, based on these other two properties.
Dialogue: 0,0:16:43.92,0:16:46.63,yin,,0,0,0,, 我们重写 contents 的 getter\N{\fs12}So we’re overriding the getter of contents
Dialogue: 0,0:16:46.63,0:16:49.33,yin,,0,0,0,, 也就是这张扑克牌的内容 \N{\fs12}so that it always returns a string –
Dialogue: 0,0:16:49.33,0:16:53.54,yin,,0,0,0,, 让它总是返回一个计算自花色和大小的字符串 \N{\fs12}the contents of this playing card — that is calculated from the suit and rank.
Dialogue: 0,0:16:53.54,0:16:54.68,yin,,0,0,0,, 明白吗 \N{\fs12}You see what we’re doing here?
Dialogue: 0,0:16:54.68,0:16:58.33,yin,,0,0,0,, 我们从父类取存储 contents 的_contents\N{\fs12}So we’re basically taking the storage of contents — underbar contents –
Dialogue: 0,0:16:58.33,0:17:00.24,yin,,0,0,0,, 然后忽略它 \N{\fs12}from our superclass and ignoring it
Dialogue: 0,0:17:00.26,0:17:02.77,yin,,0,0,0,, 因为我们重写了其 getter\N{\fs12}because we’re overriding its getter.
Dialogue: 0,0:17:02.79,0:17:06.94,yin,,0,0,0,, 这就是使用这些属性的一个很好理由 \N{\fs12}So this is a perfectly valid reason why we do these properties as well
Dialogue: 0,0:17:06.94,0:17:10.06,yin,,0,0,0,, 因为我们可能有比单纯存储更好的做法 \N{\fs12}because we might have a better way to do things than the storage.
Dialogue: 0,0:17:10.06,0:17:13.35,yin,,0,0,0,, 这是可以进行实现的方式 我们可以返回一个字符串 \N{\fs12}Now, here’s a way we could implement it: We can just return a string.
Dialogue: 0,0:17:13.35,0:17:15.00,yin,,0,0,0,,NSString stringWithFormat\N{\fs12}NS string, string with format
Dialogue: 0,0:17:15.00,0:17:17.11,yin,,0,0,0,, 类似于 printf 一个字符串 \N{\fs12}just like printf-ing a string.
Dialogue: 0,0:17:17.11,0:17:19.78,yin,,0,0,0,, 别太担心这里的语法 \N{\fs12}Don’t worry about that syntax too much.
Dialogue: 0,0:17:19.78,0:17:22.95,yin,,0,0,0,,printf 字符串的格式是 %d%@\N{\fs12}And I’m printf-ing a string with percent D and percent at sign.
Dialogue: 0,0:17:22.95,0:17:26.70,yin,,0,0,0,,%d 表示整数 %@表示一个对象 \N{\fs12}So percent D means integer; percent at sign means an object.
Dialogue: 0,0:17:26.70,0:17:28.42,yin,,0,0,0,, 一个对象的字符串表示 \N{\fs12}A string representation of an object.
Dialogue: 0,0:17:28.42,0:17:31.03,yin,,0,0,0,, 然后我将使用 rank 和 suit\N{\fs12}And then I’m just using the rank and suit.
Dialogue: 0,0:17:31.03,0:17:32.84,yin,,0,0,0,, 这是处理 contents 的一种方式 \N{\fs12}So this would be one way to do my contents.
Dialogue: 0,0:17:32.84,0:17:35.38,yin,,0,0,0,, 这不是一个很好的方式 因为 \N{\fs12}It’s not a very good way because, for example,
Dialogue: 0,0:17:35.38,0:17:38.57,yin,,0,0,0,, 例如红心 J 是 11 红心 \N{\fs12}the jack of hearts would say 11 hearts.
Dialogue: 0,0:17:38.57,0:17:42.87,yin,,0,0,0,, 至少 J 我们想用 J 而不是 11\N{\fs12}It’s not going to say J at least; we want to say J, not 11.
Dialogue: 0,0:17:42.87,0:17:44.32,yin,,0,0,0,, 这个方式不怎么好 \N{\fs12}So this is not a very good way.
Dialogue: 0,0:17:44.32,0:17:47.45,yin,,0,0,0,, 所以我想让一个数组中 \N{\fs12}So instead I’m going to make an array
Dialogue: 0,0:17:47.45,0:17:51.31,yin,,0,0,0,, 有所有正确的东西 比如 A 表示 1\N{\fs12}that has all the right things like an A for a one,
Dialogue: 0,0:17:51.31,0:17:55.38,yin,,0,0,0,,J 表示 11 Q 表示 12 K 表示 13\N{\fs12}and a J for 11, and a Q for 12, and a K for 13, right?
Dialogue: 0,0:17:55.38,0:17:57.75,yin,,0,0,0,, 这里我创建一个数组 \N{\fs12}So I’m just making this array here.
Dialogue: 0,0:17:57.75,0:18:01.19,yin,,0,0,0,, 中间我需要删去 让它能够显示出来 \N{\fs12}In the middle there I had to cut out to make it fit, right?
Dialogue: 0,0:18:01.19,0:18:03.21,yin,,0,0,0,, 我还让 0 为问号 \N{\fs12}And I even made zero be question mark.
Dialogue: 0,0:18:03.21,0:18:07.22,yin,,0,0,0,, 如果 rank 为 0 它会是问号 如未设 \N{\fs12}So if your rank is zero, it’s going to be, like, question mark, like, unset.
Dialogue: 0,0:18:07.22,0:18:09.57,yin,,0,0,0,, 大小没有设定 \N{\fs12}You know, your rank is basically not set.
Dialogue: 0,0:18:09.57,0:18:12.22,yin,,0,0,0,, 然后我返回一个字符串 \N{\fs12}And then I return a string,
Dialogue: 0,0:18:12.22,0:18:15.29,yin,,0,0,0,, 它会取出那个数组中的 rank\N{\fs12}which is taking the rank out of that array
Dialogue: 0,0:18:15.31,0:18:18.34,yin,,0,0,0,, 然后追加表示 suit 的字符串 \N{\fs12}and appending onto it the little suit string,
Dialogue: 0,0:18:18.34,0:18:20.73,yin,,0,0,0,, 红心 梅花 方片这些 \N{\fs12}the heart, or the club, or the diamond.
Dialogue: 0,0:18:20.73,0:18:22.08,yin,,0,0,0,, 都明白吗 \N{\fs12}Everyone understand this?
Dialogue: 0,0:18:22.08,0:18:25.01,yin,,0,0,0,, 给你们讲这些是为了让你们明白 \N{\fs12}I’m kind of giving you this so you can see how we’re mixing
Dialogue: 0,0:18:25.01,0:18:31.75,yin,,0,0,0,, 如何无缝混合数组符号 消息发送所有这些东西 \N{\fs12}in the array notation, and message sending, and it all kind of seamlessly mixes in there.
Dialogue: 0,0:18:31.75,0:18:38.92,yin,,0,0,0,, 这时 contents 会返回 J 红心 或 5 方块这些 \N{\fs12}So now contents returns J hearts, or 5 diamonds, or whatever.
Dialogue: 0,0:18:38.92,0:18:41.96,yin,,0,0,0,, 注意到 rank 很棒 \N{\fs12}Notice that our rank is really nice
Dialogue: 0,0:18:41.96,0:18:45.78,yin,,0,0,0,, 因为在我们说 new PlayingCard 时 rank 会为 0\N{\fs12}because if our rank is zero, which it starts out being when we say new playing card –
Dialogue: 0,0:18:45.78,0:18:48.00,yin,,0,0,0,, 所有实例变量为 0 所以 rank 为 0\N{\fs12}all the instance variables are zero so rank would be zero –
Dialogue: 0,0:18:48.00,0:18:49.36,yin,,0,0,0,, 我们得到这个问号 \N{\fs12}we get this nice question mark.
Dialogue: 0,0:18:49.36,0:18:51.72,yin,,0,0,0,, 但 suit 开始时是 nil\N{\fs12}But our suit starts out as nil,
Dialogue: 0,0:18:51.72,0:18:56.79,yin,,0,0,0,, 如果 suit 在未设或为 nil 时也能返回问号就好了 \N{\fs12}and it would be nice if the suit also returned question mark if it was unset, if it was nil.
Dialogue: 0,0:18:56.79,0:18:59.35,yin,,0,0,0,, 所以这里我重写 suit 的 getter 如下 \N{\fs12}So here I’m just overriding the getter of suit to say,
Dialogue: 0,0:18:59.35,0:19:04.32,yin,,0,0,0,, 如果 suit 是 nil 那么返回问号 \N{\fs12}”If return, if my suit is nil, then return the question mark,
Dialogue: 0,0:19:04.32,0:19:07.66,yin,,0,0,0,, 否则当 suit 不是 nil 时 那么返回 suit 的实际值 \N{\fs12}otherwise when my suit’s not nil, then return what the suit is.”
Dialogue: 0,0:19:07.66,0:19:10.78,yin,,0,0,0,, 我是在保护我的 API\N{\fs12}So I’m just kind of protecting my API
Dialogue: 0,0:19:10.78,0:19:14.49,yin,,0,0,0,, 保证我在 rank 或 suit 未设时 总是返回问号 \N{\fs12}to make sure I always return question mark when the rank or suit is not set.
Dialogue: 0,0:19:14.50,0:19:15.01,yin,,0,0,0,, 请讲 \N{\fs12}Yeah.
Dialogue: 0,0:19:15.03,0:19:16.75,yin,,0,0,0,,[学生提问 声音不清]\N{\fs12}> [Inaudible]
Dialogue: 0,0:19:18.75,0:19:22.65,yin,,0,0,0,,Paul Hegarty：抱歉 你是说的红色 @号吗 \N{\fs12}> Paul Hegarty: Sorry. All little at signs — the red at signs, you mean?
Dialogue: 0,0:19:22.65,0:19:26.54,yin,,0,0,0,, 对 我们在 Card 中应该没碰到过这个 \N{\fs12}Yeah. Guess we didn’t get to that in card.
Dialogue: 0,0:19:26.54,0:19:28.05,yin,,0,0,0,, 也可能碰到过 \N{\fs12}But we might have. But
Dialogue: 0,0:19:28.09,0:19:28.94,yin,,0,0,0,, 记得吧 \N{\fs12}remember that
Dialogue: 0,0:19:28.94,0:19:32.79,yin,,0,0,0,, 我们这门课碰到的所有字符串都是字符串对象 \N{\fs12}all strings that we’re going to work with in this class are string objects,
Dialogue: 0,0:19:32.79,0:19:34.70,yin,,0,0,0,, 而非 const char\N{\fs12}not const char stars.
Dialogue: 0,0:19:34.70,0:19:36.26,yin,,0,0,0,, 它们是字符串对象 \N{\fs12}They’re string objects.
Dialogue: 0,0:19:36.26,0:19:39.06,yin,,0,0,0,, 如果你在字符串前加一个 @\N{\fs12}And the compiler, if you put an at sign in front of a string,
Dialogue: 0,0:19:39.06,0:19:42.00,yin,,0,0,0,, 编译器会为你创建字符串对象 \N{\fs12}it will make a string object for you.
Dialogue: 0,0:19:42.00,0:19:45.35,yin,,0,0,0,, 这些 @的作用是让所有字符串为字符串对象 \N{\fs12}So that’s what those at signs do, they make all those strings be string objects
Dialogue: 0,0:19:45.35,0:19:47.90,yin,,0,0,0,, 因为我们不能将 const char * 放到 NSArray 中 \N{\fs12}because we can’t put a const char star in an NS array.
Dialogue: 0,0:19:47.90,0:19:51.27,yin,,0,0,0,,NSArray 中只能是对象 所以只能用 NSString 这些 \N{\fs12}NS array is for objects, so we have to put objects in there like NS strings.
Dialogue: 0,0:19:51.27,0:19:53.67,yin,,0,0,0,, 这些才是对象 问得很好 \N{\fs12}Those are objects. Good question.
Dialogue: 0,0:19:53.67,0:19:55.51,yin,,0,0,0,, 请讲 \N{\fs12}Yeah?
Dialogue: 0,0:19:55.51,0:20:00.54,yin,,0,0,0,,[学生提问 声音不清]\N{\fs12}[Inaudible]
Dialogue: 0,0:20:09.54,0:20:11.82,yin,,0,0,0,,Paul Hegarty：对 好 问得很好 \N{\fs12}> Paul Hegarty: Yes. Okay. That’s a good question.
Dialogue: 0,0:20:11.82,0:20:16.18,yin,,0,0,0,, 如果我们用了 getter= 符号 \N{\fs12}If we had used that getter equals notation that we used
Dialogue: 0,0:20:16.18,0:20:18.91,yin,,0,0,0,, 就像 isChosen 和 isMatched 那样 来改名 \N{\fs12}for is chosen and is matched to change the name,
Dialogue: 0,0:20:18.91,0:20:21.82,yin,,0,0,0,, 那么重写时 我们就需要使用新名 \N{\fs12}then when we override we have to use the new name.
Dialogue: 0,0:20:21.82,0:20:25.17,yin,,0,0,0,, 我们就需要用 is 什么 这里不需要那样 \N{\fs12}We’d have to is whatever. Now, this is not the case here.
Dialogue: 0,0:20:25.17,0:20:28.96,yin,,0,0,0,, 但我知道你说的是什么 对 你需要用新名 \N{\fs12}But I know what you’re saying, and yes, you would have to use the new name.
Dialogue: 0,0:20:28.96,0:20:30.23,yin,,0,0,0,, 问得很好 \N{\fs12}Great question.
Dialogue: 0,0:20:30.23,0:20:32.29,yin,,0,0,0,, 这方面还有问题吗 \N{\fs12}Any other questions about this?
Dialogue: 0,0:20:32.29,0:20:37.85,yin,,0,0,0,, 好 这能帮助 suit 在为 nil 或未设时总是返回问号 \N{\fs12}Okay. So that helps the suit always return question mark if the suit is nil or not set.
Dialogue: 0,0:20:37.85,0:20:42.54,yin,,0,0,0,, 我们再加一层保护 以防有人错误设置了 suit\N{\fs12}Let’s also protect people setting the suit to something wrong.
Dialogue: 0,0:20:42.54,0:20:46.53,yin,,0,0,0,, 我们将只让人使用属性的公共 setter 来设置 suit\N{\fs12}Let’s only let people set the suit using this property,
Dialogue: 0,0:20:46.53,0:20:48.46,yin,,0,0,0,, 我们将只让人使用属性的公共 setter 来设置 suit\N{\fs12}the public setter of the property.
Dialogue: 0,0:20:48.46,0:20:53.20,yin,,0,0,0,,suit 将只被允许设置为四种花色之一 \N{\fs12}We’ll only let people set the suit to be one of the four suits.
Dialogue: 0,0:20:53.20,0:20:57.64,yin,,0,0,0,, 我简单在这里创建了四种花色的数组 \N{\fs12}So I just on the fly in the middle there created an array of those four suits.
Dialogue: 0,0:20:57.64,0:20:59.70,yin,,0,0,0,, 然后用到方法 containsObject\N{\fs12}And then I use this method contains object;
Dialogue: 0,0:20:59.70,0:21:04.55,yin,,0,0,0,, 从这里看 你们觉得 containsObject 是什么 \N{\fs12}what class do you think contains object is from that bit on?
Dialogue: 0,0:21:04.55,0:21:05.22,yin,,0,0,0,, 谁讲讲 \N{\fs12}Anyone?
Dialogue: 0,0:21:05.23,0:21:08.31,yin,,0,0,0,,[学生提问 声音不清]\N{\fs12}> [Inaudible]
Dialogue: 0,0:21:08.33,0:21:10.28,yin,,0,0,0,,Paul Hegarty：这是一种 NSArray 方法 正确 \N{\fs12}> Paul Hegarty: It’s an NS array method, exactly.
Dialogue: 0,0:21:10.28,0:21:12.24,yin,,0,0,0,,containsObject 是一种 NSArray 方法 \N{\fs12}So contains object is an NS array method.
Dialogue: 0,0:21:12.24,0:21:15.03,yin,,0,0,0,, 我将它送往我刚创建的数组 \N{\fs12}I’m sending it to the array that I create right in place there.
Dialogue: 0,0:21:15.03,0:21:18.44,yin,,0,0,0,, 包含红心 方片 黑桃 梅花的那个数组 \N{\fs12}The array that has hearts, diamonds, spades, and clubs in it.
Dialogue: 0,0:21:18.44,0:21:20.75,yin,,0,0,0,, 我问 你是否包含这个字符串 \N{\fs12}And I’m just asking: Do you contain this string?
Dialogue: 0,0:21:20.75,0:21:23.76,yin,,0,0,0,,containsObject 会使用 isEqual 方法对比 \N{\fs12}And that contains object is going to compare the contents
Dialogue: 0,0:21:23.76,0:21:27.29,yin,,0,0,0,, 这个字符串的内容和所有这些 \N{\fs12}of this string against all these using a method is equal.
Dialogue: 0,0:21:27.29,0:21:30.60,yin,,0,0,0,, 它会将 suit 作为参数用 isEqual 一一对比四个字符串 \N{\fs12}Actually, it’s going to say is equal to all four of them with the suit as the argument;
Dialogue: 0,0:21:30.60,0:21:32.76,yin,,0,0,0,, 不是 isEqualToString 而是 isEqual\N{\fs12}not is equal to string — is equal.
Dialogue: 0,0:21:32.76,0:21:35.57,yin,,0,0,0,,isEqual 是由 isEqualToString 来实现的 \N{\fs12}And in string is equal is implemented by calling is equal
Dialogue: 0,0:21:35.57,0:21:37.55,yin,,0,0,0,, 如果参数是字符串的话 \N{\fs12}to string if the argument’s a string.
Dialogue: 0,0:21:37.55,0:21:39.92,yin,,0,0,0,, 这里讲了太多无关紧要的细节 \N{\fs12}Anyway, more detail than you need probably there.
Dialogue: 0,0:21:39.92,0:21:41.39,yin,,0,0,0,, 这里显然能起到保护作用 \N{\fs12}But this is obviously protecting it.
Dialogue: 0,0:21:41.39,0:21:44.79,yin,,0,0,0,, 这样内部花色存储变量就无法设置为 \N{\fs12}So there’s no way we can set our internal suit storage variable
Dialogue: 0,0:21:44.79,0:21:48.51,yin,,0,0,0,, 这四种花色以外任何东西了 请讲 \N{\fs12}to anything except for those four suits. Yeah?
Dialogue: 0,0:21:48.51,0:21:58.94,yin,,0,0,0,,[学生提问 声音不清]\N{\fs12}[Inaudible]
Dialogue: 0,0:21:58.94,0:22:01.99,yin,,0,0,0,,Paul Hegarty：问得很棒 你们理解得真不错 \N{\fs12}> Paul Hegarty: Great question. You guys are right on top of it.
Dialogue: 0,0:22:01.99,0:22:04.83,yin,,0,0,0,, 每次我使用 @[这样的符号 \N{\fs12}So every time I use the at sign open square bracket --
Dialogue: 0,0:22:04.83,0:22:06.38,yin,,0,0,0,, 如这里蓝色的部分 \N{\fs12}the blue one -- to
Dialogue: 0,0:22:06.38,0:22:10.17,yin,,0,0,0,, 这实际是在创建新数组 每次都是这样 \N{\fs12}create an array, that's actually creating a new array every time.
Dialogue: 0,0:22:10.17,0:22:13.08,yin,,0,0,0,, 因为我讲过 @[…]\N{\fs12}Because I told you that that at sign square bracket
Dialogue: 0,0:22:13.08,0:22:15.79,yin,,0,0,0,, 及所有这些数组东西 只是在调用方法 \N{\fs12}and all this array stuff is really just calling methods?
Dialogue: 0,0:22:15.79,0:22:19.20,yin,,0,0,0,, 这就像是调用数组 对象这些的 alloc init 方法 \N{\fs12}Well, that’s calling a method like alloc init with array
Dialogue: 0,0:22:19.20,0:22:20.81,yin,,0,0,0,, 这就像是调用数组 对象这些的 alloc init 方法 \N{\fs12}with objects or something like that.
Dialogue: 0,0:22:20.81,0:22:21.83,yin,,0,0,0,, 这是在创建 \N{\fs12}Right? So it is creating it.
Dialogue: 0,0:22:21.83,0:22:25.25,yin,,0,0,0,, 将它移出来也很好 我们会这样做 \N{\fs12}So it would be nice to move it out, and we’re going to do that.
Dialogue: 0,0:22:25.25,0:22:28.38,yin,,0,0,0,, 不过 注意不要预优化 \N{\fs12}Although, again, be careful not to preoptimize.
Dialogue: 0,0:22:28.38,0:22:29.87,yin,,0,0,0,, 它可能不会有任何不同 \N{\fs12}It probably wouldn’t make any different.
Dialogue: 0,0:22:29.87,0:22:31.81,yin,,0,0,0,, 移出来只是为了让代码更简洁 \N{\fs12}I’m only going to move it out to make my code cleaner;
Dialogue: 0,0:22:31.81,0:22:34.68,yin,,0,0,0,, 移出来不是出于任何性能考虑 请讲 \N{\fs12}I’m not going to move it out for any performance reason. Yeah?
Dialogue: 0,0:22:34.71,0:22:38.01,yin,,0,0,0,,[学生提问 声音不清]\N{\fs12}> [Inaudible]
Dialogue: 0,0:22:38.01,0:22:39.18,yin,,0,0,0,,Paul Hegarty：问题是 \N{\fs12}> Paul Hegarty: The question is:
Dialogue: 0,0:22:39.18,0:22:41.43,yin,,0,0,0,,LLVM 会处理这个 为你优化好吗 \N{\fs12}Would LLVM just take care of that, optimize that out for you?
Dialogue: 0,0:22:41.43,0:22:44.00,yin,,0,0,0,, 它可能不会 因为这是一个消息发送 \N{\fs12}And it probably wouldn’t because that’s a message send;
Dialogue: 0,0:22:44.00,0:22:45.90,yin,,0,0,0,, 它不确定这样有没有副作用 \N{\fs12}it’s not sure what there might be side effects of it.
Dialogue: 0,0:22:45.90,0:22:48.99,yin,,0,0,0,, 无论如何 我们这样做是为了让代码更简洁 \N{\fs12}But in any case, we’re just going to do it just to make our code look cleaner.
Dialogue: 0,0:22:48.99,0:22:51.54,yin,,0,0,0,, 性能在这里可以忽略 \N{\fs12}And the performance would be negligible here.
Dialogue: 0,0:22:51.54,0:22:54.24,yin,,0,0,0,, 我们讲的是 UI 这相差很远 \N{\fs12}We’re talking about UI. It’s not even close.
Dialogue: 0,0:22:54.24,0:22:56.90,yin,,0,0,0,, 在这之前 还有一点要讲 \N{\fs12}One thing to note, though, before we do that is
Dialogue: 0,0:22:56.90,0:23:00.27,yin,,0,0,0,, 由于我们现在已经实现了 suit 的 setter 和 getter\N{\fs12}since we’ve implemented both the setter and the getter of suit,
Dialogue: 0,0:23:00.27,0:23:04.44,yin,,0,0,0,, 这就必须处理 @synthesize 了 \N{\fs12}we are now required to do the at sign synthesize.
Dialogue: 0,0:23:04.44,0:23:08.13,yin,,0,0,0,, 换言之 一般我们不需要处理 @synthesize\N{\fs12}In other words, normally we don’t have to do this at sign synthesize.
Dialogue: 0,0:23:08.13,0:23:09.07,yin,,0,0,0,, 它会自动生成 \N{\fs12}It gets done for us.
Dialogue: 0,0:23:09.07,0:23:12.67,yin,,0,0,0,, 但当同时实现 setter 和 getter 时 就需要处理了 \N{\fs12}But if we implement both the setter and the getter, now we do.
Dialogue: 0,0:23:12.67,0:23:15.87,yin,,0,0,0,, 这很容易 因为形式总是一样 \N{\fs12}It’s easy to do because it’s always of this exact same form.
Dialogue: 0,0:23:15.87,0:23:18.61,yin,,0,0,0,, 但容易也需要做 \N{\fs12}But we do have to do it.
Dialogue: 0,0:23:18.61,0:23:21.30,yin,,0,0,0,, 这里 做我刚才讲的事情 \N{\fs12}Okay. So here’s — let’s do what we were saying.
Dialogue: 0,0:23:21.30,0:23:26.82,yin,,0,0,0,, 我们将花色的数组放入到另一个方法中 \N{\fs12}Let’s take that little array of suits we have in there and put it in another method.
Dialogue: 0,0:23:26.82,0:23:29.87,yin,,0,0,0,, 我说过 这样做不会有任何性能好处 \N{\fs12}Now, again, I’m not getting any performance by doing this.
Dialogue: 0,0:23:29.87,0:23:32.02,yin,,0,0,0,, 这样做只是代码更简洁一些 \N{\fs12}I’m just getting code cleanliness by doing this
Dialogue: 0,0:23:32.02,0:23:35.17,yin,,0,0,0,, 因为每次调用 validSuits 时还是会重新创建 \N{\fs12}because I’m still — every time I call valid suits, it’s going to create it again.
Dialogue: 0,0:23:35.17,0:23:37.00,yin,,0,0,0,, 我可以使用一个静态变量 \N{\fs12}Now, I could use a static variable.
Dialogue: 0,0:23:37.00,0:23:39.32,yin,,0,0,0,, 这是 C 我可以存储这个数组 \N{\fs12}This is C. I could store this array.
Dialogue: 0,0:23:39.32,0:23:40.71,yin,,0,0,0,, 开始是 nil\N{\fs12}Started out being nil.
Dialogue: 0,0:23:40.71,0:23:44.24,yin,,0,0,0,, 如果是 nil 设置到这个数组 然后它只会创建一次 \N{\fs12}If it’s nil, set it to this array, and then it would only create it once.
Dialogue: 0,0:23:44.24,0:23:45.47,yin,,0,0,0,, 但要小心 \N{\fs12}But be careful.
Dialogue: 0,0:23:45.47,0:23:47.20,yin,,0,0,0,, 还是那句话 代码简洁性 \N{\fs12}Again, code cleanliness
Dialogue: 0,0:23:47.20,0:23:49.84,yin,,0,0,0,, 还有易理解性 比这样的性能重要十倍 \N{\fs12}and understandably ten times more important than performance like this.
Dialogue: 0,0:23:49.84,0:23:52.85,yin,,0,0,0,, 只要你不是在循环中上千次地调用 validSuits\N{\fs12}So unless you’re going to call valid suits in the inner loop thousands of times,
Dialogue: 0,0:23:52.85,0:23:54.42,yin,,0,0,0,, 这个影响都很小 \N{\fs12}it’s not really going to matter.
Dialogue: 0,0:23:54.42,0:23:57.79,yin,,0,0,0,, 我把它往上移动到一个不同方法中 \N{\fs12}But once I move that up into a different method,
Dialogue: 0,0:23:57.79,0:24:00.72,yin,,0,0,0,, 但这个方法有些不同 \N{\fs12}this kind of method that I moved it to is a little different.
Dialogue: 0,0:24:00.72,0:24:02.50,yin,,0,0,0,, 注意到它前面是个加号 \N{\fs12}Notice it has a plus.
Dialogue: 0,0:24:02.50,0:24:06.08,yin,,0,0,0,, 最开始是加号 而不是减号 看到了吗 \N{\fs12}You see a plus there instead of a minus starting it?
Dialogue: 0,0:24:06.08,0:24:08.38,yin,,0,0,0,,+ (NSArray *)validSuits\N{\fs12}Plus NS array valid suits?
Dialogue: 0,0:24:08.38,0:24:11.09,yin,,0,0,0,,+ 方法是一个类方法 \N{\fs12}Okay. A plus method is a class method.
Dialogue: 0,0:24:11.09,0:24:17.13,yin,,0,0,0,, 这意味着你将它发送给类 而不是对象实例 \N{\fs12}That means you send it to the class, not to an instance of an object.
Dialogue: 0,0:24:17.85,0:24:19.59,yin,,0,0,0,, 因为不是发送给一个实例 \N{\fs12}So since you’re not sending it to an instance,
Dialogue: 0,0:24:19.59,0:24:23.02,yin,,0,0,0,, 所以你不能使用任何实例变量 \N{\fs12}you can’t use any instance variables or anything like that.
Dialogue: 0,0:24:23.02,0:24:25.25,yin,,0,0,0,, 你只能做一些通用性的事情 \N{\fs12}You can only just kind of do generic stuff.
Dialogue: 0,0:24:25.25,0:24:30.14,yin,,0,0,0,, 实际上 + 方法 类方法只用于两种情况 \N{\fs12}So the only thing we really use plus methods for, class methods, is two things really:
Dialogue: 0,0:24:30.14,0:24:31.86,yin,,0,0,0,, 创建事物 \N{\fs12}Creating things
Dialogue: 0,0:24:31.86,0:24:36.01,yin,,0,0,0,, 例如上一张幻灯片中我们有带格式的字符串时 \N{\fs12}like in the previous slide when we had string with format –
Dialogue: 0,0:24:36.01,0:24:38.91,yin,,0,0,0,, 这是类方法 为我们创建一个字符串 \N{\fs12}that’s a class method that was creating a string for us;
Dialogue: 0,0:24:38.91,0:24:41.88,yin,,0,0,0,, 然后就是这样的工具方法 \N{\fs12}and then also utility methods like this,
Dialogue: 0,0:24:41.88,0:24:43.93,yin,,0,0,0,, 例如返回常数 \N{\fs12}like the return constants
Dialogue: 0,0:24:43.93,0:24:47.21,yin,,0,0,0,, 还有其它我们的类需要工具方法的情况 \N{\fs12}and things that, you know, our class wants and utility methods.
Dialogue: 0,0:24:47.21,0:24:48.26,yin,,0,0,0,, 这是一个例子 \N{\fs12}But here’s an example.
Dialogue: 0,0:24:48.26,0:24:50.25,yin,,0,0,0,, 再看调用类方法的方式 \N{\fs12}And the way we call the class method –
Dialogue: 0,0:24:50.25,0:24:52.16,yin,,0,0,0,, 你们已经看过我调用了一些 \N{\fs12}you’ve already seen me call a few of them –
Dialogue: 0,0:24:52.16,0:24:55.25,yin,,0,0,0,, 这里就是在调用它 首先是开方括号 \N{\fs12}but here’s calling it here is we put open square bracket,
Dialogue: 0,0:24:55.25,0:24:58.10,yin,,0,0,0,, 然后是类名 然后是方法名 \N{\fs12}the name of the class, the name of the method.
Dialogue: 0,0:24:58.10,0:25:00.54,yin,,0,0,0,, 同其它方法一样 它也可以有参数 \N{\fs12}And again, it could have arguments. It’s just like any other method.
Dialogue: 0,0:25:00.56,0:25:02.91,yin,,0,0,0,, 大家都能理解吗 \N{\fs12}But everyone understand this?
Dialogue: 0,0:25:03.69,0:25:05.63,yin,,0,0,0,, 好 回头几张幻灯片 \N{\fs12}Okay. And if you go back and look a couple slides
Dialogue: 0,0:25:05.63,0:25:09.14,yin,,0,0,0,, 你会看到 [NSString 带格式的字符串 \N{\fs12}and you see open square bracket NS string, string with format,
Dialogue: 0,0:25:09.14,0:25:12.03,yin,,0,0,0,, 完全相同的语法 \N{\fs12}same exact type of syntax.
Dialogue: 0,0:25:12.03,0:25:13.72,yin,,0,0,0,, 这就是类方法的样子 \N{\fs12}So that's what a class method looks like.
Dialogue: 0,0:25:13.72,0:25:19.35,yin,,0,0,0,, 用于创建事物 以及用作工具方法 \N{\fs12}Again, for creating things basically and for utility methods.
Dialogue: 0,0:25:19.35,0:25:20.46,yin,,0,0,0,, 我们会谈到 \N{\fs12}And we'll talk about the difference of:
Dialogue: 0,0:25:20.46,0:25:23.88,yin,,0,0,0,, 用类方法创建和用 alloc init 创建的不同 \N{\fs12}When do we create something with a class method versus alloc init?
Dialogue: 0,0:25:23.88,0:25:25.66,yin,,0,0,0,, 不久后我就会讲到 \N{\fs12}We'll talk about that soon.
Dialogue: 0,0:25:25.66,0:25:28.97,yin,,0,0,0,, 我还让 validSuits 是公共的 \N{\fs12}I'm also going to make valid suits public.
Dialogue: 0,0:25:28.97,0:25:33.36,yin,,0,0,0,, 这样 PlayingCard 的使用者就知道 validSuits 是什么 \N{\fs12}And that way people who are using my playing card know what the valid suits are.
Dialogue: 0,0:25:33.36,0:25:35.29,yin,,0,0,0,, 我只需要把它放到头文件中 \N{\fs12}And all I need to do is put it in the header file.
Dialogue: 0,0:25:35.29,0:25:36.77,yin,,0,0,0,, 现在就是公共的了 \N{\fs12}Boom, it's public now.
Dialogue: 0,0:25:36.77,0:25:41.42,yin,,0,0,0,, 这里对扑克牌大小字符串也做相同的事情 \N{\fs12}So let's do a similar thing here with those rank strings.
Dialogue: 0,0:25:41.42,0:25:45.79,yin,,0,0,0,, 我将把上面的大小字符串 \N{\fs12}So I'm going to take those ranks strings -- that array of rank strings right up there --
Dialogue: 0,0:25:45.79,0:25:48.90,yin,,0,0,0,, 放入到一个类方法中 \N{\fs12}and I'm going to put that in a class method.
Dialogue: 0,0:25:48.90,0:25:52.28,yin,,0,0,0,, 还是那句话 这是为了可读性 而非性能 \N{\fs12}And again, this is for readability, not for performance.
Dialogue: 0,0:25:52.28,0:25:56.68,yin,,0,0,0,, 因为每次调用 rankStrings 这都会重新创建 \N{\fs12}Because every time I call rank strings, it's still going to create that thing again.
Dialogue: 0,0:25:56.68,0:26:00.36,yin,,0,0,0,, 然后 我在这上面调用它 \N{\fs12}And then I call it instead up there.
Dialogue: 0,0:26:00.36,0:26:03.70,yin,,0,0,0,, 我不打算让 rankStrings 本身成为公共的 \N{\fs12}And I'm not going to make rank strings itself public,
Dialogue: 0,0:26:03.70,0:26:06.88,yin,,0,0,0,, 但我打算让另一个类方法 maxRank 成为公共的 \N{\fs12}but I am going to make another class method called max rank,
Dialogue: 0,0:26:06.88,0:26:09.71,yin,,0,0,0,, 这个方法考虑的是 rankStrings 中有多少字符串 \N{\fs12}which just looks at how many strings are in rank strings.
Dialogue: 0,0:26:09.71,0:26:13.08,yin,,0,0,0,, 我将把这作为公共方法返回 \N{\fs12}And I'm going to return that as a public method.
Dialogue: 0,0:26:13.08,0:26:16.51,yin,,0,0,0,, 这里有三个类方法 让你们钻研 \N{\fs12}So there's three class methods for you to sink your teeth
Dialogue: 0,0:26:16.51,0:26:19.88,yin,,0,0,0,, 两个是公共的 一个不是 \N{\fs12}into -- two of them public, one not.
Dialogue: 0,0:26:19.88,0:26:22.11,yin,,0,0,0,, 这些都是工具方法 \N{\fs12}All right. And so they're all utility methods, right?
Dialogue: 0,0:26:22.11,0:26:26.32,yin,,0,0,0,, 我们没有在任何这些方法中访问任何实例变量 \N{\fs12}We're not accessing any instance variables in any of those methods.
Dialogue: 0,0:26:26.32,0:26:28.70,yin,,0,0,0,, 我讲这些的唯一原因 \N{\fs12}That's the only reason I'm showing those,
Dialogue: 0,0:26:28.70,0:26:31.65,yin,,0,0,0,, 就是让你们了解类方法是怎样的 \N{\fs12}is just so you see what a class method looks like.
Dialogue: 0,0:26:33.17,0:26:35.88,yin,,0,0,0,, 我们还可以重写 rank 的 setter\N{\fs12}We also could override the setter of rank just
Dialogue: 0,0:26:35.88,0:26:38.21,yin,,0,0,0,, 来保证这里不允许 \N{\fs12}to be complete here to make sure it doesn't allow you
Dialogue: 0,0:26:38.21,0:26:40.97,yin,,0,0,0,, 设置错误的大小 例如 15\N{\fs12}to set a wrong rank like set rank 15 --
Dialogue: 0,0:26:40.97,0:26:42.32,yin,,0,0,0,, 没有大小为 15 的牌 \N{\fs12}there's no such card as 15.
Dialogue: 0,0:26:42.32,0:26:45.82,yin,,0,0,0,, 我们需要确保大小小于最大大小 \N{\fs12}So let's make sure that the rank is less than the max rank,
Dialogue: 0,0:26:45.82,0:26:47.61,yin,,0,0,0,, 刚那个工具方法做了这个 \N{\fs12}which is the utility method we just did.
Dialogue: 0,0:26:47.61,0:26:50.93,yin,,0,0,0,, 大家都理解了吗 \N{\fs12}Does that all come together for you, make sense?
Dialogue: 0,0:26:50.93,0:26:53.03,yin,,0,0,0,, 这里只是参考材料 \N{\fs12}So this is kind of reference material.
Dialogue: 0,0:26:53.03,0:26:56.50,yin,,0,0,0,, 你们的幻灯片中 有我讲的所有这些注释 \N{\fs12}You have these slides that have all the annotations of all the things I'm saying.
Dialogue: 0,0:26:56.50,0:26:59.21,yin,,0,0,0,, 你们可以回头看幻灯片当作复习 \N{\fs12}So feel free to go back and look at it and remind yourself
Dialogue: 0,0:26:59.21,0:27:01.95,yin,,0,0,0,, 关于这些 NSArray 语法 \N{\fs12}about all these NS array, syntax,
Dialogue: 0,0:27:01.95,0:27:04.49,yin,,0,0,0,, 这些类方法 等等 \N{\fs12}and all the class methods, all that stuff.
Dialogue: 0,0:27:04.49,0:27:08.51,yin,,0,0,0,, 最后我们要看的是 init 方法 \N{\fs12}Okay. The last thing we're going to look at is the init method business.
Dialogue: 0,0:27:08.51,0:27:12.08,yin,,0,0,0,, 这里我们还有一个类叫 PlayingCardDeck\N{\fs12}So we're going to have another class here called playing card deck.
Dialogue: 0,0:27:12.08,0:27:15.85,yin,,0,0,0,,PlayingCardDeck 是 Deck 的一个子类 \N{\fs12}And a playing card deck is a subclass of deck.
Dialogue: 0,0:27:15.85,0:27:18.97,yin,,0,0,0,, 它没有公共 API\N{\fs12}And it has no public API.
Dialogue: 0,0:27:18.97,0:27:25.34,yin,,0,0,0,, 它将只是重写一个间接继承自 NSObject 的方法 \N{\fs12}It's just going to override a method that it inherits indirectly from NS object --
Dialogue: 0,0:27:25.34,0:27:28.15,yin,,0,0,0,,NSObject 通过 Deck 这里没动它 \N{\fs12}okay, NS object through deck, which doesn't touch it --
Dialogue: 0,0:27:28.15,0:27:29.71,yin,,0,0,0,, 直到 PlayingCardDeck\N{\fs12}all the way to playing card deck.
Dialogue: 0,0:27:29.73,0:27:32.11,yin,,0,0,0,, 这个方法叫作 init\N{\fs12}And that method is called init.
Dialogue: 0,0:27:32.11,0:27:37.91,yin,,0,0,0,, 这个 init 同之前我们创建那个可变数组时所说的 \N{\fs12}So this is the same init, same kind of method that when we created that array --
Dialogue: 0,0:27:37.91,0:27:41.28,yin,,0,0,0,,[NSMutableArray alloc] init 中的 init 一样 \N{\fs12}that mutable array we said NS mutable array alloc init.
Dialogue: 0,0:27:41.28,0:27:45.00,yin,,0,0,0,, 有人需要调用这个 PlayingCardDeck init 方法 \N{\fs12}so someone is going to call this PlayingCardDeck init method –
Dialogue: 0,0:27:45.00,0:27:47.34,yin,,0,0,0,, 也就是你们 在作业中 \N{\fs12}namely you in your homework
Dialogue: 0,0:27:47.34,0:27:50.44,yin,,0,0,0,, 会通过 PlayingCardDeck alloc 调用这个 \N{\fs12}are going to call this by doing playing card deck alloc,
Dialogue: 0,0:27:50.44,0:27:52.78,yin,,0,0,0,, 然后外面再写 init\N{\fs12}and then on the outside, init.
Dialogue: 0,0:27:52.78,0:27:55.38,yin,,0,0,0,, 这就是创建一个 PlayingCardDeck 的方式 \N{\fs12}And that’s how you’re going to create a playing card deck.
Dialogue: 0,0:27:55.38,0:27:59.23,yin,,0,0,0,, 这就是我们创建大多数对象实例的方式 并非所有 \N{\fs12}And that is how we create most instances of objects — not all.
Dialogue: 0,0:27:59.23,0:28:02.14,yin,,0,0,0,, 有时我们会使用 NSString 带格式的字符串 \N{\fs12}Sometimes we do things like the NS string, string with format.
Dialogue: 0,0:28:02.14,0:28:04.07,yin,,0,0,0,, 但大多数时候 大于一半的时候 \N{\fs12}But most of the time — more than half the time –
Dialogue: 0,0:28:04.07,0:28:06.64,yin,,0,0,0,, 我们会用 alloc 然后外面用 init\N{\fs12}we do alloc and then on the outside init.
Dialogue: 0,0:28:06.64,0:28:08.04,yin,,0,0,0,, 听好 \N{\fs12}Listen carefully:
Dialogue: 0,0:28:08.04,0:28:13.03,yin,,0,0,0,, 除了外面有 init 时 永远别调用 alloc 那些东西 \N{\fs12}Never call that alloc thing without wrapping an init around it.
Dialogue: 0,0:28:13.03,0:28:14.35,yin,,0,0,0,, 不要犯忌 \N{\fs12}Don’t ever do that.
Dialogue: 0,0:28:14.35,0:28:18.52,yin,,0,0,0,, 不初始化就分配对象在堆中毫无意义 \N{\fs12}That makes no sense to have an object allocated in the heap that’s never been initialized.
Dialogue: 0,0:28:18.52,0:28:19.96,yin,,0,0,0,, 只有嵌套才对 \N{\fs12}Always have that nested.
Dialogue: 0,0:28:19.96,0:28:25.22,yin,,0,0,0,, 反之 除了里面有 alloc 外面也不要调用 init\N{\fs12}And vice versa: Never call that init except for when you wrap it around an alloc.
Dialogue: 0,0:28:25.22,0:28:27.79,yin,,0,0,0,, 而且一定不要超过一次地调用 init\N{\fs12}And definitely never call that init more than once.
Dialogue: 0,0:28:27.79,0:28:31.36,yin,,0,0,0,, 如果你按照我说的 只在里面有 alloc 时才调用 \N{\fs12}And if you obey my rule of only calling it wrapped around an alloc,
Dialogue: 0,0:28:31.36,0:28:32.87,yin,,0,0,0,, 调用就不可能超过一次 \N{\fs12}you can’t call it more than once.
Dialogue: 0,0:28:32.87,0:28:36.17,yin,,0,0,0,,init 没有说你能重新 init 的 \N{\fs12}Init is not something like you can re-init.
Dialogue: 0,0:28:36.17,0:28:39.58,yin,,0,0,0,,init 只能发生一次 紧接 alloc 之后 这就完了 \N{\fs12}Init happens once right after alloc, and that’s it.
Dialogue: 0,0:28:39.58,0:28:43.49,yin,,0,0,0,, 这是一条硬性规定 永远不要违反 \N{\fs12}That is a hard and fast rule we never break.
Dialogue: 0,0:28:43.49,0:28:45.06,yin,,0,0,0,, 这里我讲了 \N{\fs12}So you heard it here.
Dialogue: 0,0:28:45.06,0:28:46.11,yin,,0,0,0,, 别忘记 \N{\fs12}Don’t forget.
Dialogue: 0,0:28:46.63,0:28:50.92,yin,,0,0,0,, 好 我们来看看这个 init 方法的怪异返回类型 \N{\fs12}All right. Let’s look at the whacky return type to this init method.
Dialogue: 0,0:28:50.92,0:28:55.41,yin,,0,0,0,, 你也许会以为 init 方法会返回一个 PlayingCardDeck\N{\fs12}You might think this init method should return a playing card deck star
Dialogue: 0,0:28:55.43,0:28:58.90,yin,,0,0,0,, 因为它在初始化 也许会返回它自身 \N{\fs12}because it’s kind of initializing and maybe it returns itself.
Dialogue: 0,0:28:58.90,0:29:02.53,yin,,0,0,0,, 实际上 init 确实总返回 self\N{\fs12}And in fact, init does always return self.
Dialogue: 0,0:29:02.53,0:29:04.76,yin,,0,0,0,,init 总会返回自身 \N{\fs12}So init is always going to return self.
Dialogue: 0,0:29:04.76,0:29:07.03,yin,,0,0,0,, 这里比较怪异 我会讲到 \N{\fs12}Okay. More whackiness there, which I’m going to describe.
Dialogue: 0,0:29:07.03,0:29:10.32,yin,,0,0,0,, 方便起见 它总返回 self 让你能够写 \N{\fs12}Just for convenience, it always returns self so that you can do,
Dialogue: 0,0:29:10.32,0:29:14.32,yin,,0,0,0,,[PlayingCardDeck alloc] init 这些 发送一条消息 \N{\fs12}like, playing card deck alloc init, sent it a message.
Dialogue: 0,0:29:14.32,0:29:17.33,yin,,0,0,0,, 它返回 self 是很方便的 \N{\fs12}So it’s just convenience that it returns self.
Dialogue: 0,0:29:17.33,0:29:21.28,yin,,0,0,0,, 但它的返回类型不能是 PlayingCardDeck\N{\fs12}But it can’t really have its return type being playing card deck star
Dialogue: 0,0:29:21.30,0:29:23.48,yin,,0,0,0,, 因为这些它继承于 NSObject\N{\fs12}because it inherited this from NS object.
Dialogue: 0,0:29:23.48,0:29:28.48,yin,,0,0,0,, 而 NSObject 已经将其定义为 NSObject\N{\fs12}And NS object already defined it as NS object star.
Dialogue: 0,0:29:28.48,0:29:30.52,yin,,0,0,0,, 明白吗 所以说有些奇怪 \N{\fs12}You see? So it’s kind of weird
Dialogue: 0,0:29:30.52,0:29:32.79,yin,,0,0,0,, 你继承了一个方法 其返回值 \N{\fs12}that you’re inheriting a method whose return value would have
Dialogue: 0,0:29:32.79,0:29:36.87,yin,,0,0,0,, 需要在每次重写时发生变化 \N{\fs12}to change every time you, you know, overrode it.
Dialogue: 0,0:29:36.87,0:29:40.37,yin,,0,0,0,, 于是人们发明了这个新东西 这是 iOS7 的新属性 \N{\fs12}So they invented this new thing — this is new for iOS 7, by the way –
Dialogue: 0,0:29:40.39,0:29:42.01,yin,,0,0,0,, 叫实例类型 \N{\fs12}called instance type.
Dialogue: 0,0:29:42.01,0:29:43.94,yin,,0,0,0,, 实例类型也就是说 \N{\fs12}And what instance type means is this is going
Dialogue: 0,0:29:43.94,0:29:49.49,yin,,0,0,0,, 这会返回一个对象 具有相同类类型 \N{\fs12}to return an object that is of the same instance — same type, same class type –
Dialogue: 0,0:29:49.49,0:29:52.18,yin,,0,0,0,, 同这条消息要发送到的对象一样 \N{\fs12}as the object you sent this message to.
Dialogue: 0,0:29:52.18,0:29:54.75,yin,,0,0,0,, 这对 init 很有意义 \N{\fs12}Which makes perfect sense for inits.
Dialogue: 0,0:29:54.75,0:29:58.14,yin,,0,0,0,, 这门课上 只有这里会用到这个 \N{\fs12}And in this class that’s probably all you’re going to use this for right here.
Dialogue: 0,0:29:58.14,0:30:00.80,yin,,0,0,0,, 听不懂我刚讲的这些不要紧 我在幻灯片中也讲了 \N{\fs12}So if you don’t really understand what I just said — it’s explained in the slides –
Dialogue: 0,0:30:00.80,0:30:02.05,yin,,0,0,0,, 听不懂我刚讲的这些不要紧 我在幻灯片中也讲了 \N{\fs12}but if you don’t really understand it,
Dialogue: 0,0:30:02.05,0:30:04.08,yin,,0,0,0,, 你只需知道 凡是初始化时 \N{\fs12}just know that whenever you do an initializer,
Dialogue: 0,0:30:04.08,0:30:07.68,yin,,0,0,0,, 它都会返回实例类型作为返回类型 \N{\fs12}it’s going to return instance type as its return type
Dialogue: 0,0:30:07.68,0:30:10.02,yin,,0,0,0,, 你将总是返回 self\N{\fs12}and you’re always going to return self.
Dialogue: 0,0:30:11.67,0:30:14.49,yin,,0,0,0,, 还有一点 也是记住就行 \N{\fs12}Now, also just take my word for it.
Dialogue: 0,0:30:14.49,0:30:18.28,yin,,0,0,0,, 后面这几行代码也非常奇怪 \N{\fs12}We’re going to do these next lines of codes as well because they are really strange.
Dialogue: 0,0:30:18.28,0:30:21.88,yin,,0,0,0,, 第一行 self = [super init] 这很奇怪 \N{\fs12}That first line, self equals super init, that is weird.
Dialogue: 0,0:30:21.88,0:30:23.11,yin,,0,0,0,, 这非常奇怪 \N{\fs12}That is super weird.
Dialogue: 0,0:30:23.11,0:30:26.89,yin,,0,0,0,,Objective-C 中将什么东西复制给 self\N{\fs12}Assigning something to self in Objective-C –
Dialogue: 0,0:30:26.89,0:30:30.30,yin,,0,0,0,, 永远不要这样做 唯独除了 init 里 \N{\fs12}just never do that, except for this one time and that’s in your init.
Dialogue: 0,0:30:30.30,0:30:35.88,yin,,0,0,0,, 对 self 赋值 调用父类初始化器 \N{\fs12}You take self and you assign it to calling your superclasses initializer
Dialogue: 0,0:30:35.88,0:30:37.95,yin,,0,0,0,, 于是父类会被初始化 \N{\fs12}so that your superclass gets initialized.
Dialogue: 0,0:30:37.95,0:30:40.99,yin,,0,0,0,, 为什么将结果赋值给 self 呢 \N{\fs12}Why do we assign the result to self?
Dialogue: 0,0:30:40.99,0:30:42.99,yin,,0,0,0,, 可以说是古老的历史残留 \N{\fs12}It’s kind of ancient history
Dialogue: 0,0:30:42.99,0:30:45.44,yin,,0,0,0,, 因为人们这样做了很长时间 \N{\fs12}as to why this has been done for a long time.
Dialogue: 0,0:30:45.44,0:30:48.85,yin,,0,0,0,, 一般 我们会检验父类 init 的返回 \N{\fs12}Basically we’re checking the return of our superclasses init
Dialogue: 0,0:30:48.85,0:30:50.67,yin,,0,0,0,, 确保它正确被初始化 \N{\fs12}to make sure it properly initialized.
Dialogue: 0,0:30:50.67,0:30:55.08,yin,,0,0,0,, 因为任何初始化器无法初始化自身的时候 \N{\fs12}Because at any time if your initializer cannot initialize itself,
Dialogue: 0,0:30:55.08,0:30:56.99,yin,,0,0,0,, 它应返回 nil\N{\fs12}it should return nil.
Dialogue: 0,0:30:56.99,0:31:00.31,yin,,0,0,0,, 这让所有人知道 你的任意子类 \N{\fs12}And that lets everybody know any of your subclasses
Dialogue: 0,0:31:00.31,0:31:02.67,yin,,0,0,0,, 或任何人尝试分配和初始化你 \N{\fs12}or anyone trying to alloc and initialize you,
Dialogue: 0,0:31:02.67,0:31:05.09,yin,,0,0,0,, 你无法创建一个结构良好的对象 \N{\fs12}you could not create a well-formed object.
Dialogue: 0,0:31:05.09,0:31:07.54,yin,,0,0,0,, 你可以看到 这个代码很奇怪 \N{\fs12}So you can see how this code, strange as it is –
Dialogue: 0,0:31:07.54,0:31:09.56,yin,,0,0,0,,self = [super init] 然后 if (self)\N{\fs12}self equals super init, and then if self,
Dialogue: 0,0:31:09.56,0:31:12.50,yin,,0,0,0,, 我将初始化自身 返回 self\N{\fs12}I’m going to initialize myself, return self –
Dialogue: 0,0:31:12.50,0:31:16.80,yin,,0,0,0,, 这将能确保 当我的父类在我调用 init 时 \N{\fs12}that’s going to ensure that I don’t even try to initialize myself if my superclass,
Dialogue: 0,0:31:16.80,0:31:21.37,yin,,0,0,0,, 如果无法初始化自身 我就不用尝试初始化我自己 \N{\fs12}when I call its init, you know, can’t initialize itself.
Dialogue: 0,0:31:21.37,0:31:24.27,yin,,0,0,0,, 照做就行了 \N{\fs12}So just do it.
Dialogue: 0,0:31:24.27,0:31:27.73,yin,,0,0,0,, 不懂不要紧 照做就行了 \N{\fs12}If you don’t understand it, don’t worry about it too much. Just do it.
Dialogue: 0,0:31:27.73,0:31:31.14,yin,,0,0,0,, 有一点我要讲明 init 没有参数 \N{\fs12}Now, one thing here is we’re talking about init with no arguments.
Dialogue: 0,0:31:31.14,0:31:33.83,yin,,0,0,0,, 让初始化器有参数是完全有可能的 \N{\fs12}It is possible to have initializers with arguments
Dialogue: 0,0:31:33.83,0:31:36.94,yin,,0,0,0,, 因为有时你需要参数来恰当地初始化一个类 \N{\fs12}because sometimes you need arguments to properly initialize a class.
Dialogue: 0,0:31:36.94,0:31:40.05,yin,,0,0,0,, 周一我会进一步讲到这个 \N{\fs12}And we’re going to talk about that a little more on Monday.
Dialogue: 0,0:31:40.05,0:31:43.05,yin,,0,0,0,, 今天只讲解 init 的梗概 \N{\fs12}So today we’re just going to kind of bare bones init.
Dialogue: 0,0:31:43.05,0:31:45.11,yin,,0,0,0,, 这个 init 需要做什么 \N{\fs12}So what does this init need to do?
Dialogue: 0,0:31:45.11,0:31:46.32,yin,,0,0,0,, 我需要怎样做 \N{\fs12}What do I need to do
Dialogue: 0,0:31:46.32,0:31:48.56,yin,,0,0,0,, 才能得到初始化良好的 PlayingCardDeck\N{\fs12}to have a well-formed initialized playing card deck?
Dialogue: 0,0:31:48.56,0:31:53.30,yin,,0,0,0,,PlayingCardDeck 有 52 张牌 一样一张 \N{\fs12}Well, a playing card deck has 52 cards in it, one of each kind of card.
Dialogue: 0,0:31:53.30,0:31:57.75,yin,,0,0,0,, 梅花 K 方片 3 总共 52 张 \N{\fs12}King of clubs, three of diamonds — all 52 of them.
Dialogue: 0,0:31:57.75,0:32:03.16,yin,,0,0,0,, 我只需要遍历所有花色 遍历所有大小 \N{\fs12}So I just need to iterate to all the suits, and then iterate through all the ranks,
Dialogue: 0,0:32:03.16,0:32:06.24,yin,,0,0,0,, 创建一张牌 然后添加到我自身 \N{\fs12}and create a card, and add it to myself.
Dialogue: 0,0:32:06.24,0:32:09.81,yin,,0,0,0,, 这里我遍历花色 遍历大小 \N{\fs12}So here’s me iterating through the suits, iterating through the ranks.
Dialogue: 0,0:32:09.81,0:32:12.38,yin,,0,0,0,, 大家都明白吗 \N{\fs12}Everyone cool with that?
Dialogue: 0,0:32:12.38,0:32:16.02,yin,,0,0,0,, 然后我将导入 PlayingCard\N{\fs12}Then I’m going to import playing card
Dialogue: 0,0:32:16.02,0:32:18.57,yin,,0,0,0,, 因为我要创建一张 PlayingCard\N{\fs12}because I’m going to create a playing card,
Dialogue: 0,0:32:18.58,0:32:20.52,yin,,0,0,0,,[PlayingCard alloc] init\N{\fs12}playing card alloc init.
Dialogue: 0,0:32:20.52,0:32:23.83,yin,,0,0,0,, 然后我要设置这张牌的大小 设置花色 \N{\fs12}Then I’m going to set that card’s rank, set that card’s suit.
Dialogue: 0,0:32:23.83,0:32:28.40,yin,,0,0,0,,rank 和 suit 是这里的迭代变量 \N{\fs12}Rank and suit are my little iteration variables there.
Dialogue: 0,0:32:28.40,0:32:31.05,yin,,0,0,0,, 然后我把它加到我自身 \N{\fs12}And then I’m going to add it to myself.
Dialogue: 0,0:32:31.05,0:32:35.50,yin,,0,0,0,, 我是一个 Deck 这很好 \N{\fs12}I’m a deck, so that’s perfectly fine.
Dialogue: 0,0:32:35.50,0:32:39.36,yin,,0,0,0,, 大家都明白这段代码吗 \N{\fs12}Everybody cool with that code?
Dialogue: 0,0:32:39.36,0:32:42.93,yin,,0,0,0,, 现在我就得到一个结构良好的 PlayingCardDeck\N{\fs12}So now I’m a well-formed playing card deck and I can be used
Dialogue: 0,0:32:42.93,0:32:45.39,yin,,0,0,0,, 可以被用于随机抽取纸牌 等等动作 \N{\fs12}to draw random cards and all that stuff,
Dialogue: 0,0:32:45.39,0:32:47.45,yin,,0,0,0,, 这将是你们的作业内容 \N{\fs12}which you will need to do for your homework.
Dialogue: 0,0:32:48.50,0:32:51.66,yin,,0,0,0,, 实际上 你们的作业是将所有这四个类补全 \N{\fs12}And in fact, for your homework you’re going to have to type all four of these classes in.
Dialogue: 0,0:32:51.66,0:32:54.57,yin,,0,0,0,, 我希望你们体会到录入类 键入内容 \N{\fs12}I want you to get experience entering classes, typing a thing,
Dialogue: 0,0:32:54.57,0:32:59.78,yin,,0,0,0,, 观看 Xcode 抱怨你的错误 等等 \N{\fs12}watching as Xcode complains at you as you mistype things, and stuff like that.
Dialogue: 0,0:32:59.78,0:33:03.52,yin,,0,0,0,, 然后你们将会使用 PlayingCardDeck 和 PlayingCard\N{\fs12}And then you’re going to be using playing card deck and playing card.
Dialogue: 0,0:33:03.52,0:33:06.22,yin,,0,0,0,,PlayingCardDeck 和 Card 是你们作业中 \N{\fs12}Well, playing card deck and card really are the two main ones
Dialogue: 0,0:33:06.22,0:33:08.40,yin,,0,0,0,, 主要要用到的两个类 \N{\fs12}you’re going to be using to do your homework.
Dialogue: 0,0:33:09.39,0:33:11.88,yin,,0,0,0,, 对此有问题吗 \N{\fs12}Questions about that?
Dialogue: 0,0:33:11.88,0:33:14.22,yin,,0,0,0,, 幻灯片就到这里 \N{\fs12}Okay. So that’s it for the slides.
Dialogue: 0,0:33:14.22,0:33:16.97,yin,,0,0,0,, 下面我将给出一个大而古老的 demo\N{\fs12}So now I’m going to do a big old demo.
Dialogue: 0,0:33:16.97,0:33:21.29,yin,,0,0,0,, 这个 demo 将综合你们到目前为止看到过的一切 \N{\fs12}And this demo is going to integrate everything you’ve seen so far.
Dialogue: 0,0:33:21.29,0:33:23.68,yin,,0,0,0,, 尤其是我们谈过的 MVC 内容 \N{\fs12}Most notably that MVC stuff we talked about,
Dialogue: 0,0:33:23.68,0:33:26.94,yin,,0,0,0,, 例如目标动作 设置目标 发射动作 \N{\fs12}like target action, you know, dropping the target and shooting the action
Dialogue: 0,0:33:26.94,0:33:30.07,yin,,0,0,0,, 还有绿色箭头的 outlet 指向相反方向 \N{\fs12}or the green arrow outlet that points the other way.
Dialogue: 0,0:33:30.07,0:33:34.22,yin,,0,0,0,, 我们会展示这些在 Xcode 中是怎样 \N{\fs12}We’re going to show you what that actually looks like in Xcode.
Dialogue: 0,0:33:34.22,0:33:37.19,yin,,0,0,0,, 我问你们谁用过 Xcode 时 \N{\fs12}I think when I asked who of you have done Xcode,
Dialogue: 0,0:33:37.19,0:33:39.24,yin,,0,0,0,, 几乎所有人都举手了 \N{\fs12}almost every single one of you raised your hands.
Dialogue: 0,0:33:39.24,0:33:42.16,yin,,0,0,0,, 所以我不打算讲解 Xcode 中的所有按钮 \N{\fs12}So I’m not going to spend too much time talking about all the buttons in Xcode.
Dialogue: 0,0:33:42.16,0:33:44.68,yin,,0,0,0,, 我将很快略过这些 \N{\fs12}I think I’ll quickly pass over those.
Dialogue: 0,0:33:44.68,0:33:49.75,yin,,0,0,0,, 没有用过 Xcode 的人 课程幻灯片中有详细介绍 \N{\fs12}But if you haven’t used Xcode, it’s in very much detail in the lecture slides.
Dialogue: 0,0:33:49.75,0:33:51.44,yin,,0,0,0,, 你们可以看看 \N{\fs12}There’s kind of this walkthrough.
Dialogue: 0,0:33:51.44,0:33:54.19,yin,,0,0,0,, 你可以跟随课程幻灯片一起看 \N{\fs12}By the way, if you’re following along in the lecture slides,
Dialogue: 0,0:33:54.19,0:33:57.07,yin,,0,0,0,, 不过我的 demo 同幻灯片中不完全一样 \N{\fs12}my demo’s not going to be exactly like what’s in the slides.
Dialogue: 0,0:33:57.07,0:34:00.86,yin,,0,0,0,, 幻灯片要多于我这里 40 分钟可以讲的内容 \N{\fs12}The slides cover a little bit more than I can cover in forty minutes here.
Dialogue: 0,0:34:00.86,0:34:03.48,yin,,0,0,0,, 而且它也是参考材料 \N{\fs12}And it’s also reference material.
Dialogue: 0,0:34:03.48,0:34:07.33,yin,,0,0,0,, 如果我在 demo 中讲的东西让你觉得 \N{\fs12}So if I do something today in this demo and you’re like,
Dialogue: 0,0:34:07.33,0:34:08.43,yin,,0,0,0,, 哦 他怎么做的 \N{\fs12}”Oh, how did he do that?”
Dialogue: 0,0:34:08.43,0:34:10.70,yin,,0,0,0,, 你可以去查幻灯片 它会告诉你 \N{\fs12}if you go look in those slides, it will tell you.
Dialogue: 0,0:34:10.70,0:34:13.03,yin,,0,0,0,, 所以不要觉得 我要逐一记下 \N{\fs12}So do not feel like, “I got to furiously write
Dialogue: 0,0:34:13.03,0:34:15.63,yin,,0,0,0,, 他在这 40 分钟里面要讲的每一个细节 \N{\fs12}down every button click he’s going to do in the next forty minutes.”
Dialogue: 0,0:34:15.63,0:34:16.68,yin,,0,0,0,, 不用这样 \N{\fs12}No way. Okay?
Dialogue: 0,0:34:16.68,0:34:19.24,yin,,0,0,0,, 你可以边看幻灯片边看 demo\N{\fs12}Follow along in those slides if you want,
Dialogue: 0,0:34:19.24,0:34:23.50,yin,,0,0,0,, 也可以关掉笔记本 只看我讲 然后理解 \N{\fs12}or just close your laptop, and watch, and let it sink in
Dialogue: 0,0:34:23.52,0:34:26.12,yin,,0,0,0,, 因为你们作业中需要再现 \N{\fs12}because you’re going to have to reproduce what I’m doing
Dialogue: 0,0:34:26.12,0:34:28.40,yin,,0,0,0,, 我这 40 分钟所要讲的内容 \N{\fs12}in the next forty minutes for your homework.
Dialogue: 0,0:34:28.40,0:34:31.34,yin,,0,0,0,, 而幻灯片中会一步步告诉你怎么做 \N{\fs12}And those slides are going to walk you through step by step how to do it.
Dialogue: 0,0:34:31.34,0:34:35.30,yin,,0,0,0,, 现在你们什么都不需要做 只需要仔细听我讲 \N{\fs12}So do not feel like you need to do anything right now but let this all sink in.
Dialogue: 0,0:34:35.30,0:34:37.69,yin,,0,0,0,, 感受一下发生了什么 \N{\fs12}Get a feel for what’s going on.
Dialogue: 0,0:34:37.69,0:34:42.96,yin,,0,0,0,, 然后当你要坐下来做时 还有幻灯片可查 \N{\fs12}And then when you sit down to do it, you’ll be guided through it.
Dialogue: 0,0:34:42.96,0:34:46.22,yin,,0,0,0,, 下周 我将更详细讲到 Objective-C\N{\fs12}Next week we’re going to talk a lot more about Objective-C,
Dialogue: 0,0:34:46.22,0:34:47.79,yin,,0,0,0,, 详细回答 NSNumber 等同学们提出的一些问题 \N{\fs12}answer some of these more detailed questions
Dialogue: 0,0:34:47.79,0:34:50.41,yin,,0,0,0,, 详细回答 NSNumber 等同学们提出的一些问题 \N{\fs12}like NS number and some of these other things people are asking.
Dialogue: 0,0:34:50.41,0:34:54.90,yin,,0,0,0,, 而且我会讲到 Objective-C 中的一些特定内容 \N{\fs12}And we’ll talk about some of the specific things about Objective-C
Dialogue: 0,0:34:54.91,0:34:57.74,yin,,0,0,0,, 例如动态绑定 协议 \N{\fs12}like dynamic binding, and protocols,
Dialogue: 0,0:34:57.74,0:35:00.03,yin,,0,0,0,, 这些东西一般在其它语言中是没有的 \N{\fs12}and things that you don’t generally see as much
Dialogue: 0,0:35:00.03,0:35:02.84,yin,,0,0,0,, 这些东西一般在其它语言中是没有的 \N{\fs12}in other languages or don’t exist in other languages.
Dialogue: 0,0:35:02.84,0:35:04.06,yin,,0,0,0,, 我会讲给你们 \N{\fs12}So we’ll try and cover all that.
Dialogue: 0,0:35:04.06,0:35:07.44,yin,,0,0,0,, 在下周末最后 等你们熟悉了 Objective-C\N{\fs12}So by the end of next week you’re up to speed in Objective-C.
Dialogue: 0,0:35:07.44,0:35:10.17,yin,,0,0,0,, 熟悉了 Xcode\N{\fs12}You’re starting to really run with Xcode.
Dialogue: 0,0:35:10.17,0:35:13.77,yin,,0,0,0,, 之后我们就可以开始真正做点什么了 \N{\fs12}And so the week after that we can really start doing some,
Dialogue: 0,0:35:13.77,0:35:17.26,yin,,0,0,0,, 进行强大的 iOS7 编程 \N{\fs12}you know, high power iOS 7 stuff.
Dialogue: 0,0:35:18.08,0:35:20.57,yin,,0,0,0,, 好 开始 demo\N{\fs12}Okay. So demo here.
Dialogue: 0,0:35:23.14,0:35:25.79,yin,,0,0,0,,demo 我将用 Xcode 来进行 \N{\fs12}So the demo I’m going to run in Xcode.
Dialogue: 0,0:35:25.79,0:35:27.75,yin,,0,0,0,, 启动 Xcode\N{\fs12}So I’m just going to launch Xcode.
Dialogue: 0,0:35:27.75,0:35:32.49,yin,,0,0,0,,Xcode 需要到 Mac app 商店 \N{\fs12}So Xcode you get by running — going to your Mac app store.
Dialogue: 0,0:35:32.49,0:35:34.93,yin,,0,0,0,, 也就是这个 \N{\fs12}That’s this thing down here, right?
Dialogue: 0,0:35:34.93,0:35:37.67,yin,,0,0,0,, 用 Mac 登陆 app 商店 然后搜索 Xcode\N{\fs12}Get the app store on your Mac, and you just search for Xcode, find it.
Dialogue: 0,0:35:37.67,0:35:40.68,yin,,0,0,0,, 它是免费的 下载运行即可 很简单 \N{\fs12}It’s free. You download it and you run it. It’s as simple as that.
Dialogue: 0,0:35:40.70,0:35:44.85,yin,,0,0,0,, 第一次使用时它的界面是这样的 \N{\fs12}This is what it’s going to look like when you first bring it up,
Dialogue: 0,0:35:44.85,0:35:46.22,yin,,0,0,0,, 这是启动画面 \N{\fs12}this splash screen here.
Dialogue: 0,0:35:46.24,0:35:50.09,yin,,0,0,0,, 随着学期的进行 这里将充满你所做的各种项目 \N{\fs12}As the quarter goes on, this will fill up with all the projects that you’re doing.
Dialogue: 0,0:35:50.09,0:35:52.25,yin,,0,0,0,, 用过 Xcode 的人应该会很习惯 \N{\fs12}You’re probably used to that if you know Xcode.
Dialogue: 0,0:35:52.25,0:35:55.02,yin,,0,0,0,, 今天我们要创建一个新项目 \N{\fs12}And what we’re going to do today is create a new project.
Dialogue: 0,0:35:55.02,0:35:59.51,yin,,0,0,0,, 你可以到源控制中查看已有项目 \N{\fs12}You can either check an existing project out of source control
Dialogue: 0,0:35:59.51,0:36:00.85,yin,,0,0,0,, 你也可以创建新的 \N{\fs12}or you can create a new one.
Dialogue: 0,0:36:00.87,0:36:02.28,yin,,0,0,0,, 我们要创建新的 \N{\fs12}And so we’re going to create a new one.
Dialogue: 0,0:36:02.28,0:36:06.83,yin,,0,0,0,, 创建新项目时 它会尝试给我们一点帮助 \N{\fs12}So when we create a new one, it wants to give us a little bit of help
Dialogue: 0,0:36:06.85,0:36:10.48,yin,,0,0,0,, 它会给我们提供不同应用的模板 \N{\fs12}by offering to create a template for different kinds of applications
Dialogue: 0,0:36:10.48,0:36:12.81,yin,,0,0,0,, 比如 openGL 游戏 \N{\fs12}like an openGL game.
Dialogue: 0,0:36:12.83,0:36:16.49,yin,,0,0,0,, 它会为你创建某种框架 \N{\fs12}Okay. It will create some framework for that for you.
Dialogue: 0,0:36:16.49,0:36:18.22,yin,,0,0,0,,Master-Detail 应用 \N{\fs12}Master detail applications,
Dialogue: 0,0:36:18.22,0:36:19.74,yin,,0,0,0,, 这是我们这学期晚些时候要做的 \N{\fs12}something we’re going to do later in the quarter,
Dialogue: 0,0:36:19.74,0:36:21.51,yin,,0,0,0,, 只是我们会自己写代码 \N{\fs12}although we’re going to build all the code ourselves;
Dialogue: 0,0:36:21.51,0:36:23.46,yin,,0,0,0,, 我们不会用这个模板 \N{\fs12}we’re not going to use this template.
Dialogue: 0,0:36:23.46,0:36:29.25,yin,,0,0,0,, 这里的单视图应用就是一单个 MVC\N{\fs12}And this single view application one right here is basically a single MVC,
Dialogue: 0,0:36:29.26,0:36:32.55,yin,,0,0,0,, 课上我们的所有应用都将由此开始 \N{\fs12}which is how we’re going it start all of our applications in this classroom –
Dialogue: 0,0:36:32.55,0:36:35.64,yin,,0,0,0,, 首先是单个 MVC 之后再添加更多 MVC\N{\fs12}with a single MVC. Then we’re going to add more MVCs and build up.
Dialogue: 0,0:36:35.64,0:36:39.48,yin,,0,0,0,, 这是基本的单 MVC app\N{\fs12}So this is your basic single MVC app.
Dialogue: 0,0:36:39.50,0:36:41.20,yin,,0,0,0,, 点击这个 \N{\fs12}So I’m going to click that.
Dialogue: 0,0:36:41.22,0:36:43.60,yin,,0,0,0,, 这里它会要求一些相关信息 \N{\fs12}And here it’s going to ask for some information about it
Dialogue: 0,0:36:43.60,0:36:45.81,yin,,0,0,0,, 例如 你想给该 app 起什么名 \N{\fs12}like what do you want to call this app?
Dialogue: 0,0:36:45.81,0:36:49.86,yin,,0,0,0,, 这是一个扑克牌匹配游戏 我打算叫它 Machismo\N{\fs12}This is a card matching game I have decided to call Machismo.
Dialogue: 0,0:36:50.72,0:36:53.68,yin,,0,0,0,, 这是我们 app 的名称 起个有趣的名字 \N{\fs12}So that’s going to be the name of our app just for fun.
Dialogue: 0,0:36:53.68,0:36:55.75,yin,,0,0,0,, 组织名可以任选 \N{\fs12}And organization name can be anything you want.
Dialogue: 0,0:36:55.75,0:36:59.99,yin,,0,0,0,, 它会显示在你创建的所有类的头文件之中 \N{\fs12}It’s going to appear in the headers of all the classes that you create.
Dialogue: 0,0:36:59.99,0:37:01.74,yin,,0,0,0,, 我这里写斯坦福大学 \N{\fs12}So I make mine be Stanford University.
Dialogue: 0,0:37:01.74,0:37:05.61,yin,,0,0,0,, 你们也可以写 Bob’s Game House 什么都行 \N{\fs12}You can make yours be Bob’s Game House or whatever.
Dialogue: 0,0:37:05.61,0:37:09.50,yin,,0,0,0,, 这个标识符对你需要是唯一的 \N{\fs12}This identifier should be unique to you.
Dialogue: 0,0:37:09.50,0:37:13.31,yin,,0,0,0,, 我的是 edu.Stanford.cs193p.instructor\N{\fs12}So I have edu.Stanford.cs193p.instructor.
Dialogue: 0,0:37:13.31,0:37:16.79,yin,,0,0,0,, 你的可以是 edu.Stanford.cs193p. 你的 SUNet ID\N{\fs12}You might have edu.Stanford.cs193p dot your SUNet ID.
Dialogue: 0,0:37:16.81,0:37:19.28,yin,,0,0,0,, 这肯定是独一无二的 \N{\fs12}That will be completely unique.
Dialogue: 0,0:37:19.28,0:37:23.33,yin,,0,0,0,, 这些反的 DNS 能给出很好的唯一名称 \N{\fs12}These reverse DNS is a really good way to create a unique name.
Dialogue: 0,0:37:23.33,0:37:26.03,yin,,0,0,0,, 它还会为这个 app 创建一个唯一名称 \N{\fs12}And it’s going to create a unique name for this app
Dialogue: 0,0:37:26.03,0:37:28.31,yin,,0,0,0,, 通过将这个和名称结合 \N{\fs12}by combining this with the names.
Dialogue: 0,0:37:28.31,0:37:31.45,yin,,0,0,0,, 如这里的包标识符 \N{\fs12}So you can see it’s done that here, this bundle identifier.
Dialogue: 0,0:37:31.45,0:37:32.98,yin,,0,0,0,, 然后这个类前缀 \N{\fs12}And then this class prefix –
Dialogue: 0,0:37:32.98,0:37:38.40,yin,,0,0,0,, 这一模板将为我们创建一个视图和一个控制器 \N{\fs12}this template is going to create a view and a controller for us.
Dialogue: 0,0:37:38.40,0:37:42.17,yin,,0,0,0,, 这里说的是 你希望你的控制器类名为什么 \N{\fs12}And this is saying, “What do you want the name of your controller class to be?”
Dialogue: 0,0:37:42.17,0:37:45.64,yin,,0,0,0,, 默认情况下 它会被叫作 ViewController\N{\fs12}By default it’s going to be called “view controller,” okay?
Dialogue: 0,0:37:45.64,0:37:49.12,yin,,0,0,0,, 但如果这里你键入诸如 CardGame\N{\fs12}But if you type something here like “card game,” now
Dialogue: 0,0:37:49.12,0:37:51.44,yin,,0,0,0,, 它就会叫作 CardGameViewController\N{\fs12}it’s going to be called “card game view controller,”
Dialogue: 0,0:37:51.44,0:37:53.15,yin,,0,0,0,, 这个名字对我们更好 \N{\fs12}which is a little better name for us.
Dialogue: 0,0:37:53.15,0:37:55.50,yin,,0,0,0,, 它为你创建这个控制器时 会加上这个前缀 \N{\fs12}So that’s just the prefix it’s going to put on the name
Dialogue: 0,0:37:55.50,0:37:57.33,yin,,0,0,0,, 它为你创建这个控制器时 会加上这个前缀 \N{\fs12}of your controller that it creates for you.
Dialogue: 0,0:37:57.35,0:38:00.18,yin,,0,0,0,, 最后这里我们可以让创建的 app\N{\fs12}And then finally here we can create an app here just
Dialogue: 0,0:38:00.18,0:38:02.55,yin,,0,0,0,, 只适用于 iPad 只适用于 iPhone\N{\fs12}for iPad, or just for iPhone,
Dialogue: 0,0:38:02.55,0:38:05.45,yin,,0,0,0,, 或能够运行在两个平台上的通用 app\N{\fs12}or a universal app that will run on both platforms.
Dialogue: 0,0:38:05.45,0:38:10.18,yin,,0,0,0,, 创建通用 app 时 UI 仍然需要单独设计 \N{\fs12}Now, when you create a universal app, you still have to design your UI’s separately
Dialogue: 0,0:38:10.18,0:38:13.46,yin,,0,0,0,, 因为屏幕规则更多时 你需要设计不同的 UI\N{\fs12}because if you have more screen rules, you’re just going to design a different UI.
Dialogue: 0,0:38:13.46,0:38:15.55,yin,,0,0,0,,iPad 不只是一个大 iPhone\N{\fs12}iPad is not just a big iPhone.
Dialogue: 0,0:38:15.55,0:38:18.82,yin,,0,0,0,, 有更多屏幕空间时 你可以做更多事情 \N{\fs12}You can do a lot more stuff if you have more screen real estate.
Dialogue: 0,0:38:18.82,0:38:23.06,yin,,0,0,0,, 但你仍然可以让很多 MVC 共享 \N{\fs12}But you still might have a lot of your MVC’s shared, right,
Dialogue: 0,0:38:23.06,0:38:26.61,yin,,0,0,0,, 因为 iPad 中在 MVC 中可能有一些小的子区域 \N{\fs12}because that iPad might have little subareas that are in MVC
Dialogue: 0,0:38:26.61,0:38:29.52,yin,,0,0,0,, 同 iPhone 完全相同 或非常非常相似 \N{\fs12}that are exactly the same as on an iPhone or very, very similar.
Dialogue: 0,0:38:29.52,0:38:34.42,yin,,0,0,0,,iOS7 中完全支持让创建的 app 同时针对两大平台 \N{\fs12}So totally supported in iOS 7 to build apps that target both platforms
Dialogue: 0,0:38:34.42,0:38:38.29,yin,,0,0,0,, 也有很棒的工具让你能单独创建两个 UI\N{\fs12}and has great tools for letting you build your two UI’s separately
Dialogue: 0,0:38:38.29,0:38:40.47,yin,,0,0,0,, 并共享下面的所有 MVC\N{\fs12}and share all the MVCs underneath.
Dialogue: 0,0:38:40.47,0:38:42.59,yin,,0,0,0,, 这里我们只针对 iPhone 编程 \N{\fs12}We’re going to do iPhone only here just
Dialogue: 0,0:38:42.59,0:38:46.51,yin,,0,0,0,, 因为这样屏幕更小 而我只有这么大的屏幕空间 \N{\fs12}because it keeps the screen small and I only have so much real estate here.
Dialogue: 0,0:38:46.51,0:38:52.15,yin,,0,0,0,,[学生提问 声音不清]\N{\fs12}[Inaudible]
Dialogue: 0,0:38:52.15,0:38:54.39,yin,,0,0,0,,Paul Hegarty：问题是 我在 iPad 上能否 \N{\fs12}> Paul Hegarty: Yeah. So the question is: If I’m on my iPad
Dialogue: 0,0:38:54.39,0:38:56.70,yin,,0,0,0,, 运行只针对 iPhone 的 app 能 \N{\fs12}and I run an app that’s iPhone only, yes,
Dialogue: 0,0:38:56.70,0:39:00.88,yin,,0,0,0,, 这里可以说有一个仿真模式 \N{\fs12}there’s an emulation mode essentially that will kind
Dialogue: 0,0:39:00.88,0:39:04.20,yin,,0,0,0,, 将一个大的 iPhone 状东西放到 iPad 屏幕上 \N{\fs12}of make a big iPhone-shaped thing on the iPad screen.
Dialogue: 0,0:39:04.20,0:39:05.89,yin,,0,0,0,, 这里我选 iPhone\N{\fs12}So we’re going to do iPhone here.
Dialogue: 0,0:39:05.89,0:39:07.57,yin,,0,0,0,, 然后点下一步 \N{\fs12}So that’s it. I’m going to hit next.
Dialogue: 0,0:39:07.57,0:39:10.24,yin,,0,0,0,, 下一步它想知道 “你要把这个项目放在哪”\N{\fs12}Next it wants to know, “Where are you going it put this project?”
Dialogue: 0,0:39:10.24,0:39:13.66,yin,,0,0,0,, 我强烈推荐放在主目录中 \N{\fs12}I strongly recommend putting it in your home directory –
Dialogue: 0,0:39:13.66,0:39:17.12,yin,,0,0,0,, 一个叫作 developer(开发者) 的目录内 \N{\fs12}in a directory called “developer” in your home directory.
Dialogue: 0,0:39:17.12,0:39:19.67,yin,,0,0,0,, 除非你要使用不同的类 \N{\fs12}Unless maybe we’re working on different class.
Dialogue: 0,0:39:19.67,0:39:23.06,yin,,0,0,0,, 也许你有 cs193p 在主目录下 然后其它类 \N{\fs12}Maybe you have the CS 193P in your home directory and then other class.
Dialogue: 0,0:39:23.06,0:39:25.34,yin,,0,0,0,, 总之 把它放到主目录中 \N{\fs12}But bottom line: Put it in your home directory;
Dialogue: 0,0:39:25.35,0:39:28.05,yin,,0,0,0,, 不要放到根或类似的地方 \N{\fs12}do not put it, like, in root or somewhere like that.
Dialogue: 0,0:39:28.05,0:39:31.35,yin,,0,0,0,, 这在原来导致过问题 \N{\fs12}That has in the past caused problems.
Dialogue: 0,0:39:31.35,0:39:34.68,yin,,0,0,0,, 放在这里很好 这是我的主目录 这是 cs193p\N{\fs12}But a great place to put it here. This is my home directory, CS 193P there.
Dialogue: 0,0:39:34.68,0:39:37.03,yin,,0,0,0,, 主目录 developer\N{\fs12}I see home directory, developer.
Dialogue: 0,0:39:37.03,0:39:39.51,yin,,0,0,0,, 我将把它放到这里 这里还没有任何项目 \N{\fs12}This is where I’m going to put it. I don’t have any projects yet.
Dialogue: 0,0:39:39.51,0:39:43.05,yin,,0,0,0,, 这下面有一个小内容 叫源控制 我会讲到这个 \N{\fs12}This little thing down here, source control, we will be talking about that.
Dialogue: 0,0:39:43.05,0:39:45.68,yin,,0,0,0,, 它很好地整合到了 Xcode 中 \N{\fs12}It’s really nicely integrated into Xcode,
Dialogue: 0,0:39:45.68,0:39:47.07,yin,,0,0,0,, 不过今天我不打算讲 \N{\fs12}but we’re not going to talk about it today.
Dialogue: 0,0:39:47.07,0:39:49.42,yin,,0,0,0,, 这个不选 \N{\fs12}So leave that unclicked.
Dialogue: 0,0:39:51.58,0:39:53.78,yin,,0,0,0,, 这是我们的新项目 \N{\fs12}And so here’s our new project.
Dialogue: 0,0:39:53.78,0:39:55.81,yin,,0,0,0,, 它会显示这个屏幕 \N{\fs12}You can see it shows us this screen,
Dialogue: 0,0:39:55.81,0:39:58.63,yin,,0,0,0,, 可以通过点上面这个来得到 \N{\fs12}which you get to by clicking on this very top thing up here.
Dialogue: 0,0:39:58.63,0:40:00.47,yin,,0,0,0,, 这是我们的项目设置 \N{\fs12}So this is kind of like our project settings.
Dialogue: 0,0:40:00.47,0:40:02.31,yin,,0,0,0,, 这里有很多设置 \N{\fs12}And there’s a whole bunch of settings here.
Dialogue: 0,0:40:02.31,0:40:04.59,yin,,0,0,0,, 这学期我会讲到所有这些 \N{\fs12}We’ll be talk being all this stuff as the quarter goes on.
Dialogue: 0,0:40:04.59,0:40:08.53,yin,,0,0,0,, 但今天我不打算讲 因为我要将焦点集中在 MVC 上 \N{\fs12}But today we’re not going to talk about any of it because we want to focus on our MVC.
Dialogue: 0,0:40:08.53,0:40:15.86,yin,,0,0,0,, 我们的 MVC 中 这里这个 Main.storyboard 是我们的视图 \N{\fs12}And our MVC, this right here, main.storyboard, is our view.
Dialogue: 0,0:40:15.86,0:40:18.14,yin,,0,0,0,, 这是 MVC 中的视图 \N{\fs12}That’s our view of our MVC.
Dialogue: 0,0:40:18.16,0:40:21.16,yin,,0,0,0,, 然后这里有 CardGameViewController.m 和.h\N{\fs12}And then you see this card game view controller M and H?
Dialogue: 0,0:40:21.16,0:40:23.01,yin,,0,0,0,, 这是我们的控制器 \N{\fs12}That’s our controller.
Dialogue: 0,0:40:23.01,0:40:24.44,yin,,0,0,0,, 这里没有模型 \N{\fs12}There’s no model here.
Dialogue: 0,0:40:24.44,0:40:27.04,yin,,0,0,0,, 模型将是那四个类 \N{\fs12}Your model is going to be those four classes –
Dialogue: 0,0:40:27.04,0:40:29.42,yin,,0,0,0,,Deck Card PlayingCard PlayingCardDeck\N{\fs12}deck, card, playing card, playing card deck –
Dialogue: 0,0:40:29.42,0:40:31.12,yin,,0,0,0,, 这将是你的模型 \N{\fs12}that’s going to be your model.
Dialogue: 0,0:40:31.12,0:40:32.44,yin,,0,0,0,, 你需要输入这些 \N{\fs12}So you’ll have to enter that in.
Dialogue: 0,0:40:32.44,0:40:35.10,yin,,0,0,0,, 最后我会展示如何做到 \N{\fs12}I’ll show you at the end how to do that.
Dialogue: 0,0:40:35.10,0:40:38.77,yin,,0,0,0,, 这里的 CardGameAppDelegate.h 和.m\N{\fs12}This little thing here, card game app delegate dot H and M,
Dialogue: 0,0:40:38.77,0:40:44.46,yin,,0,0,0,, 这个我在讲多任务处理这些时会简要讲到 \N{\fs12}we’ll talk about that briefly, especially when we start talking about things like multitasking.
Dialogue: 0,0:40:44.46,0:40:46.86,yin,,0,0,0,, 这里我不想看到它们 \N{\fs12}But I like to just move those out of the way.
Dialogue: 0,0:40:46.86,0:40:49.92,yin,,0,0,0,, 我通常把它们放到支持文件文件夹中 \N{\fs12}So I often put them down here in this supporting files folder.
Dialogue: 0,0:40:49.92,0:40:53.05,yin,,0,0,0,, 顺便说下 文件可以直接拖动 拖到哪都行 \N{\fs12}And you can just pick up any file, by the way, and move them anywhere you want
Dialogue: 0,0:40:53.05,0:40:55.26,yin,,0,0,0,, 这是为了屏幕上更简洁 \N{\fs12}here to kind of clean up your view.
Dialogue: 0,0:40:55.26,0:41:00.78,yin,,0,0,0,, 这里于是就只显示有视图和控制器了 \N{\fs12}So here I’ve got my view and my controller only showing here.
Dialogue: 0,0:41:00.78,0:41:04.77,yin,,0,0,0,, 我们直接到视图 看它是怎样的 \N{\fs12}So let’s go straight to the view and see what that looks like.
Dialogue: 0,0:41:04.77,0:41:09.23,yin,,0,0,0,, 这是我的视图 一个空 iPhone5 大小的空间 \N{\fs12}So here’s my view. It’s a blank iPhone 5 sized, right?
Dialogue: 0,0:41:09.23,0:41:12.77,yin,,0,0,0,, 一个又高又窄的视图 \N{\fs12}A tall and thin view.
Dialogue: 0,0:41:12.77,0:41:15.81,yin,,0,0,0,, 而且它是空的 什么都没有 空白一片 \N{\fs12}And it’s blank. Nothing new. It’s white.
Dialogue: 0,0:41:15.81,0:41:19.36,yin,,0,0,0,, 顺便说下 这里用来点击文件的地方 \N{\fs12}This area on the left, by the way, where we clicked on these files,
Dialogue: 0,0:41:19.36,0:41:20.91,yin,,0,0,0,, 叫作导航栏 \N{\fs12}that’s called the “navigator.”
Dialogue: 0,0:41:20.91,0:41:23.03,yin,,0,0,0,, 你不仅可以浏览所有文件 \N{\fs12}And you can not only navigate all your files here,
Dialogue: 0,0:41:23.03,0:41:25.23,yin,,0,0,0,, 你还可以浏览断点 \N{\fs12}but you can navigate your break points,
Dialogue: 0,0:41:25.23,0:41:28.20,yin,,0,0,0,, 创建问题 类层次结构 \N{\fs12}and build problems, and your class hierarchies.
Dialogue: 0,0:41:28.20,0:41:29.15,yin,,0,0,0,, 这些都在这上面 \N{\fs12}All that stuff up here.
Dialogue: 0,0:41:29.15,0:41:32.60,yin,,0,0,0,, 大多数人用过 Xcode 应该都知道这些 \N{\fs12}So again, most of you know Xcode, so you probably know most of this stuff.
Dialogue: 0,0:41:32.60,0:41:35.70,yin,,0,0,0,, 我们在这学期的过程中会不断演示 \N{\fs12}We’ll be demoing all this as the quarter goes on.
Dialogue: 0,0:41:35.70,0:41:38.95,yin,,0,0,0,, 而这块区域叫作”工具区”\N{\fs12}And this area over here is called the “utilities area.”
Dialogue: 0,0:41:38.95,0:41:43.63,yin,,0,0,0,, 这里会显示中间这里的细节情况 \N{\fs12}And this is where you basically find out detail about what’s going on here.
Dialogue: 0,0:41:43.63,0:41:48.62,yin,,0,0,0,, 例如属性 尺寸 连接检查器 \N{\fs12}So inspectors for attributes, and dimensions, and connections,
Dialogue: 0,0:41:48.62,0:41:50.25,yin,,0,0,0,, 这些都在这里 \N{\fs12}and things like that go here.
Dialogue: 0,0:41:50.25,0:41:53.43,yin,,0,0,0,, 而且这里还可以拖出这些东西 \N{\fs12}And this is also where you can drag out the things
Dialogue: 0,0:41:53.43,0:41:56.07,yin,,0,0,0,, 用于构建你的用户界面 \N{\fs12}that you’re going to use to build your user interface
Dialogue: 0,0:41:56.07,0:41:59.61,yin,,0,0,0,, 因为我们将要完全图形化地创建视图 \N{\fs12}because we’re going to build our view entirely graphically.
Dialogue: 0,0:41:59.61,0:42:02.77,yin,,0,0,0,, 我们大多数时候会写代码来创建视图 \N{\fs12}We’re not going to write code, for the most part, to build our view.
Dialogue: 0,0:42:02.77,0:42:06.43,yin,,0,0,0,, 随着学期进行 我们会更多地学到如何写代码来创建视图 \N{\fs12}As the quarter goes on, we’ll learn a little more about how to build our view in code,
Dialogue: 0,0:42:06.44,0:42:10.73,yin,,0,0,0,, 但最开始 我们将只使用图形化操作来创建视图 \N{\fs12}but we’re going to start out just purely doing our view by graphically
Dialogue: 0,0:42:10.73,0:42:12.39,yin,,0,0,0,, 将事物拖入 连起 \N{\fs12}dragging things out and wiring them up.
Dialogue: 0,0:42:12.39,0:42:14.67,yin,,0,0,0,, 然后我们再在控制器中写代码 \N{\fs12}And we’ll put our code in our controller.
Dialogue: 0,0:42:14.67,0:42:21.15,yin,,0,0,0,, 这两个边栏可以通过这两个按钮来隐藏和显示 \N{\fs12}This two sides can be hidden and shown with these two buttons.
Dialogue: 0,0:42:21.15,0:42:24.65,yin,,0,0,0,, 看到了吗 你可以隐藏它们 \N{\fs12}See? You can hide those.
Dialogue: 0,0:42:25.16,0:42:29.03,yin,,0,0,0,, 这个按钮也可以点 显示出的这个区域 \N{\fs12}This might appear also, this area right here, this little button down here.
Dialogue: 0,0:42:29.03,0:42:30.57,yin,,0,0,0,, 叫作”文档大纲”\N{\fs12}This is called the “document outline.”
Dialogue: 0,0:42:30.57,0:42:32.36,yin,,0,0,0,, 这也很有用 \N{\fs12}This is really handy dandy.
Dialogue: 0,0:42:32.36,0:42:33.92,yin,,0,0,0,, 但我今天不打算讲 \N{\fs12}But again, we’re not going it talk about that today.
Dialogue: 0,0:42:33.92,0:42:35.78,yin,,0,0,0,, 一次我只能讲那么多 \N{\fs12}We can only talk about so much at once.
Dialogue: 0,0:42:35.78,0:42:37.36,yin,,0,0,0,, 文档大纲 \N{\fs12}The document outline.
Dialogue: 0,0:42:37.36,0:42:42.44,yin,,0,0,0,, 它会将视图中所有对象实例以大纲形式展示出来 \N{\fs12}This just shows you all the instances of objects in your view in a common outline form.
Dialogue: 0,0:42:42.44,0:42:45.70,yin,,0,0,0,, 这样你就能够很轻松地弄清它们之间的相互关系 \N{\fs12}So you can really easily find them and their relationships to each other.
Dialogue: 0,0:42:45.70,0:42:50.30,yin,,0,0,0,, 另外你还可以说 我不想要 iPhone5 的屏幕大小 \N{\fs12}The other thing you can do is I don’t want this iPhone 5 sized
Dialogue: 0,0:42:50.30,0:42:54.69,yin,,0,0,0,, 因为我的屏幕没有这么大 这里我是为了配合投影仪 \N{\fs12}thing because my screen is low resolution here so it works on the projector.
Dialogue: 0,0:42:54.69,0:42:57.01,yin,,0,0,0,, 这时可以点这个按钮 \N{\fs12}So I’m going to click this little button down here,
Dialogue: 0,0:42:57.01,0:43:01.77,yin,,0,0,0,, 这可以将屏幕缩小到 iPhone4 或 4S 的大小 \N{\fs12}which reduces me down to iPhone 4 size. Or iPhone 4S.
Dialogue: 0,0:43:01.77,0:43:03.66,yin,,0,0,0,, 而非又高又窄 \N{\fs12}Not tall and thin.
Dialogue: 0,0:43:03.66,0:43:07.36,yin,,0,0,0,, 你可以点这个来回切换 \N{\fs12}But you can click back and forth and move them back forth.
Dialogue: 0,0:43:07.36,0:43:10.99,yin,,0,0,0,, 我这里只是想让它更好地匹配投影仪大小 \N{\fs12}And I’m just trying to make everything fit on screen here.
Dialogue: 0,0:43:10.99,0:43:14.70,yin,,0,0,0,, 好 让我们开始真正构建视图 \N{\fs12}Okay. So let’s just dive right into building our view here.
Dialogue: 0,0:43:14.70,0:43:21.30,yin,,0,0,0,, 今天我们的视图将是一张上面写有梅花 A 的纸牌 \N{\fs12}What our view is going to be today is a single card with an ace of clubs written on it.
Dialogue: 0,0:43:21.30,0:43:23.22,yin,,0,0,0,, 就这些了 \N{\fs12}That’s going to be it.
Dialogue: 0,0:43:23.22,0:43:25.14,yin,,0,0,0,, 而且我能点击纸牌 \N{\fs12}And I’m going to be able to click on the card
Dialogue: 0,0:43:25.14,0:43:27.32,yin,,0,0,0,, 它会翻过来 显示背面 \N{\fs12}and it will flip over, show the back of the card,
Dialogue: 0,0:43:27.32,0:43:30.16,yin,,0,0,0,, 再点击 它会翻回来 显示正面的梅花 A\N{\fs12}and then click on it again, it will flip back to show me the ace of club again –
Dialogue: 0,0:43:30.16,0:43:31.38,yin,,0,0,0,, 来回来回 \N{\fs12}back and forth, back and forth.
Dialogue: 0,0:43:31.38,0:43:33.63,yin,,0,0,0,, 而你们的作业是 \N{\fs12}And your homework is going to be to make it
Dialogue: 0,0:43:33.63,0:43:36.26,yin,,0,0,0,, 当纸牌翻转时 显示的不是梅花 A\N{\fs12}so when the card flips up it doesn’t show the ace of clubs,
Dialogue: 0,0:43:36.26,0:43:39.05,yin,,0,0,0,, 而是从牌堆中随机抽取的牌 \N{\fs12}it shows a random card drawn from the deck.
Dialogue: 0,0:43:39.06,0:43:42.49,yin,,0,0,0,, 这是周一要交的作业的全部内容 \N{\fs12}That’s going to be your entire homework that’s due on Monday.
Dialogue: 0,0:43:42.49,0:43:44.71,yin,,0,0,0,, 好 我们来做这个 很简单 \N{\fs12}Okay. So let’s do this. Really simple.
Dialogue: 0,0:43:44.71,0:43:47.51,yin,,0,0,0,, 我们到这里 这个对象库 \N{\fs12}We go to this area right here, this object library.
Dialogue: 0,0:43:47.51,0:43:50.29,yin,,0,0,0,, 也就是这里第三个按钮 显示对象库 \N{\fs12}That’s the third button over here, show object library.
Dialogue: 0,0:43:50.29,0:43:52.10,yin,,0,0,0,, 对象都在这里 \N{\fs12}And this is where all our objects are.
Dialogue: 0,0:43:52.10,0:43:54.64,yin,,0,0,0,, 只看这里 你还看不到这些对象 \N{\fs12}If you look in here and you don’t see these objects,
Dialogue: 0,0:43:54.64,0:43:56.62,yin,,0,0,0,, 你要点击视图 \N{\fs12}it might be worth clicking on your view.
Dialogue: 0,0:43:56.62,0:44:00.52,yin,,0,0,0,, 有时 Xcode 想知道目的地在哪 \N{\fs12}Sometimes Xcode wants to know what the destination is
Dialogue: 0,0:44:00.52,0:44:02.76,yin,,0,0,0,, 你要把东西拖放到哪 \N{\fs12}that you’re going to be dragging things into.
Dialogue: 0,0:44:02.76,0:44:04.79,yin,,0,0,0,, 点击之后 你会看到这些东西 \N{\fs12}So if you click on it, then you’ll see these things.
Dialogue: 0,0:44:04.79,0:44:06.95,yin,,0,0,0,, 我们将抓取这里的一个按钮 \N{\fs12}And we’re just going to grab one of these buttons right here.
Dialogue: 0,0:44:06.95,0:44:09.73,yin,,0,0,0,, 我选取这个按钮 并拖出 \N{\fs12}So I’m going to pick this button up and drag it out.
Dialogue: 0,0:44:09.73,0:44:11.41,yin,,0,0,0,, 注意到 当我拖出它时 \N{\fs12}And notice, as I drag it out,
Dialogue: 0,0:44:11.41,0:44:13.87,yin,,0,0,0,, 这些蓝色的参考线会显示出来 \N{\fs12}these little blue lines appear — these guidelines.
Dialogue: 0,0:44:13.87,0:44:16.78,yin,,0,0,0,, 这些参考线非常重要 \N{\fs12}Okay. These guidelines are super important.
Dialogue: 0,0:44:16.78,0:44:18.43,yin,,0,0,0,, 它们除了方便 \N{\fs12}They seem just like a convenience
Dialogue: 0,0:44:18.43,0:44:21.89,yin,,0,0,0,, 帮你将对象放到中间或右下角这些地方以外 \N{\fs12}for helping you put it right in the middle or right in the right-hand corner.
Dialogue: 0,0:44:21.89,0:44:25.81,yin,,0,0,0,, 它们的重要性还体现在 帮你确保 \N{\fs12}And they are, but they’re really important for making sure
Dialogue: 0,0:44:25.81,0:44:29.60,yin,,0,0,0,, 视图中的所有东西都相隔标准距离 \N{\fs12}that all the things in your view are kind of, like, standard space apart.
Dialogue: 0,0:44:29.60,0:44:31.61,yin,,0,0,0,, 并在边缘处对齐 \N{\fs12}And lined up against edges.
Dialogue: 0,0:44:31.61,0:44:34.30,yin,,0,0,0,, 当用户从一个 app 到另一个时 \N{\fs12}So that as the users go from one app to another,
Dialogue: 0,0:44:34.30,0:44:38.61,yin,,0,0,0,, 事物将以可预测的距离分开 一切都会保持一致 \N{\fs12}things will all be separated by predictable spaces and everything will be consistent.
Dialogue: 0,0:44:38.61,0:44:39.65,yin,,0,0,0,, 这很重要 \N{\fs12}It’s really important.
Dialogue: 0,0:44:39.65,0:44:42.19,yin,,0,0,0,, 这里还有一个机制 可以看到这里有个开关 \N{\fs12}And there’s a mechanism — you can see this switch right here,
Dialogue: 0,0:44:42.19,0:44:45.21,yin,,0,0,0,, 使用自动布局 这是在 iOS6 中引入的 \N{\fs12}use auto layout, which was introduced in iOS 6
Dialogue: 0,0:44:45.21,0:44:48.46,yin,,0,0,0,, 在 iOS7 中 特别是 Xcode 中得到了大幅提升 \N{\fs12}and vastly improved in iOS 7, especially in Xcode –
Dialogue: 0,0:44:48.46,0:44:52.76,yin,,0,0,0,, 这使得 当你的用户界面改变大小时 \N{\fs12}that allows when your user interface changes size,
Dialogue: 0,0:44:52.76,0:44:55.37,yin,,0,0,0,, 例如从 iPhone4 到 iPhone5\N{\fs12}like it goes from being an iPhone 4 to an iPhone 5,
Dialogue: 0,0:44:55.37,0:44:59.33,yin,,0,0,0,, 或者从竖直旋转为水平 \N{\fs12}or it rotates from being vertical to being horizontal,
Dialogue: 0,0:44:59.33,0:45:02.23,yin,,0,0,0,, 或是在 iPad 上 有更大空间 \N{\fs12}or it’s on an iPad in a bigger space.
Dialogue: 0,0:45:02.23,0:45:06.46,yin,,0,0,0,, 这会让所有按钮等元件合理地移动到新位置 \N{\fs12}For all the buttons and everything to kind of move to a new position that makes sense
Dialogue: 0,0:45:06.46,0:45:08.12,yin,,0,0,0,, 至少大多数移到合理位置 \N{\fs12}or at least most of them, right?
Dialogue: 0,0:45:08.12,0:45:10.41,yin,,0,0,0,, 还有一些 你可能需要手工移动 \N{\fs12}And then maybe you might have to move a few of them by hand,
Dialogue: 0,0:45:10.41,0:45:11.75,yin,,0,0,0,, 取决于具体情况 \N{\fs12}depending on what’s going on. But
Dialogue: 0,0:45:11.77,0:45:14.00,yin,,0,0,0,, 但基本上是自动布局 \N{\fs12}it mostly automatically lays it out.
Dialogue: 0,0:45:14.00,0:45:15.05,yin,,0,0,0,, 这很重要 \N{\fs12}And this is really important
Dialogue: 0,0:45:15.05,0:45:18.01,yin,,0,0,0,, 因为设备将不断变换大小 \N{\fs12}because I’m sure devices will continue to be differing sizes
Dialogue: 0,0:45:18.01,0:45:20.67,yin,,0,0,0,, 每年都会有新设备出来 \N{\fs12}as new, you know, devices come out over the years.
Dialogue: 0,0:45:20.67,0:45:23.12,yin,,0,0,0,, 所以 使用自动布局很重要 \N{\fs12}So doing auto layout is important,
Dialogue: 0,0:45:23.12,0:45:26.56,yin,,0,0,0,, 而这些蓝色参考线对于自动布局是第一重要的东西 \N{\fs12}and these blue guidelines are the number one most important thing for auto layout.
Dialogue: 0,0:45:26.56,0:45:29.82,yin,,0,0,0,, 我会详细讲解自动布局 它有很多内容 \N{\fs12}We’re going to cover auto layout in detail, and there’s a lot to it.
Dialogue: 0,0:45:29.82,0:45:33.33,yin,,0,0,0,, 下面所有这些按钮都与自动布局有关 \N{\fs12}All these buttons down here have to do with auto layout.
Dialogue: 0,0:45:33.33,0:45:36.53,yin,,0,0,0,, 得到这些蓝色参考线 确保元件所放位置 \N{\fs12}But getting those blue guidelines, making sure you drop things
Dialogue: 0,0:45:36.53,0:45:39.67,yin,,0,0,0,, 至少能够显示出一条蓝色参考线 非常重要 \N{\fs12}with at least one blue guideline somewhere is really important
Dialogue: 0,0:45:39.67,0:45:43.79,yin,,0,0,0,, 这能让你的元件在 UI 自动布局时找到正确的位置 \N{\fs12}to kind get you going down the right path with the properly auto laid out UI.
Dialogue: 0,0:45:43.79,0:45:45.69,yin,,0,0,0,, 这里有个按钮 \N{\fs12}So we have this button here.
Dialogue: 0,0:45:45.69,0:45:47.99,yin,,0,0,0,, 当然 我们可以到这里 \N{\fs12}But before — and of course, we can go over here
Dialogue: 0,0:45:47.99,0:45:50.82,yin,,0,0,0,, 这里是属性检查器 点击它 \N{\fs12}to this is the attributes inspector and click on it.
Dialogue: 0,0:45:50.82,0:45:52.69,yin,,0,0,0,, 这里有各种属性 \N{\fs12}And we’ll see all kinds of attributes.
Dialogue: 0,0:45:52.69,0:45:56.40,yin,,0,0,0,, 我可以隐藏这个 这里有该按钮各式各样的属性 \N{\fs12}In fact, if I hide this, tons and tons of attributes for this button.
Dialogue: 0,0:45:56.40,0:45:58.13,yin,,0,0,0,, 不只是按钮本身 \N{\fs12}Not just the button itself,
Dialogue: 0,0:45:58.13,0:46:00.89,yin,,0,0,0,, 它的父类也有属性 \N{\fs12}but actually its superclass has attributes.
Dialogue: 0,0:46:00.89,0:46:02.23,yin,,0,0,0,,Control 是它的父类 \N{\fs12}Control is its superclass,
Dialogue: 0,0:46:02.23,0:46:05.61,yin,,0,0,0,, 然后 View 是 Control 的父类 它也有属性 \N{\fs12}and then view is control’s superclass and it has attributes.
Dialogue: 0,0:46:05.61,0:46:08.40,yin,,0,0,0,, 这是一个面向对象的检查器 \N{\fs12}Okay. So this is an object-oriented inspector
Dialogue: 0,0:46:08.40,0:46:14.00,yin,,0,0,0,, 它会显示出继承层次下的所有属性 \N{\fs12}that will show all the attributes of all the things through the inheritance hierarchy.
Dialogue: 0,0:46:14.00,0:46:20.15,yin,,0,0,0,, 这里我们所做的 实际上是编辑一个按钮的实例 \N{\fs12}And what’s happening here is we’re actually editing an instance of a button here.
Dialogue: 0,0:46:20.15,0:46:21.57,yin,,0,0,0,, 我们不是… 我知道 \N{\fs12}So we are not — and I know
Dialogue: 0,0:46:21.57,0:46:24.99,yin,,0,0,0,, 某些系统中 你布局按钮 设定大小 设定属性 \N{\fs12}in some systems you layout the button, you set the size, and you set the attributes.
Dialogue: 0,0:46:24.99,0:46:27.35,yin,,0,0,0,, 然后在幕后 \N{\fs12}And then, you know, behind the scenes a bunch
Dialogue: 0,0:46:27.35,0:46:30.52,yin,,0,0,0,, 一堆代码会生成出来 创建按钮 \N{\fs12}of code is being generated to create the button.
Dialogue: 0,0:46:30.52,0:46:31.77,yin,,0,0,0,, 这里不是这样 \N{\fs12}That’s not what we’re doing here.
Dialogue: 0,0:46:31.77,0:46:33.67,yin,,0,0,0,, 我们是在编辑活动对象 \N{\fs12}We’re actually editing live objects.
Dialogue: 0,0:46:33.67,0:46:35.67,yin,,0,0,0,, 它们就像是速冻咖啡粉末 \N{\fs12}They’re essentially going to be freeze dried.
Dialogue: 0,0:46:35.69,0:46:39.56,yin,,0,0,0,,app 运行就像加水 它们会被注入生命 \N{\fs12}And then when your app runs, add water, they come to life, okay,
Dialogue: 0,0:46:39.56,0:46:42.04,yin,,0,0,0,, 它们的属性会被设置 它们的大小和位置 \N{\fs12}with their attributes set, and all their sizes and positions,
Dialogue: 0,0:46:42.04,0:46:44.98,yin,,0,0,0,, 以及所有的自动布局信息都在对象中 \N{\fs12}and all their auto layout information in the object.
Dialogue: 0,0:46:44.98,0:46:50.03,yin,,0,0,0,, 这有些不同于其它系统中你们所习惯的情况 \N{\fs12}So it’s a little different than you might be used to in some other systems.
Dialogue: 0,0:46:50.03,0:46:52.65,yin,,0,0,0,, 无论如何 在我们编辑这个按钮的属性前 \N{\fs12}So anyway, before we edit the attributes of this button,
Dialogue: 0,0:46:52.65,0:46:56.25,yin,,0,0,0,, 我们先来换个背景 因为这是一个扑克牌游戏 \N{\fs12}though, let’s change our background because this is a card game.
Dialogue: 0,0:46:56.25,0:46:59.45,yin,,0,0,0,, 而大多数扑克牌游戏都是绿色绒布 对吧 \N{\fs12}And most card games are on, like, green felt, right?
Dialogue: 0,0:46:59.45,0:47:01.65,yin,,0,0,0,, 让我们把背景换得更像绿色绒布 \N{\fs12}So let’s make our background be more like a green felt.
Dialogue: 0,0:47:01.65,0:47:03.58,yin,,0,0,0,, 我将点击背景 \N{\fs12}So I’m just going to click on the background,
Dialogue: 0,0:47:03.58,0:47:06.81,yin,,0,0,0,, 也就是这个 View 可以看到它的属性 \N{\fs12}which is this view right here, and you can see its properties.
Dialogue: 0,0:47:06.81,0:47:10.49,yin,,0,0,0,, 我将改变这个背景属性 \N{\fs12}So I’m going to change a couple — or just one of its properties — which is the background.
Dialogue: 0,0:47:10.49,0:47:12.94,yin,,0,0,0,, 这里背景还是白色 \N{\fs12}You see this background white color right here?
Dialogue: 0,0:47:12.94,0:47:15.95,yin,,0,0,0,, 点击这里 这里有一些最近使用过的颜色 \N{\fs12}So if I click on this, I have some recently used colors.
Dialogue: 0,0:47:15.95,0:47:18.15,yin,,0,0,0,, 我有所有这些黑白颜色 \N{\fs12}I have all these kind of black and white colors.
Dialogue: 0,0:47:18.15,0:47:19.49,yin,,0,0,0,, 这里还有其它颜色 \N{\fs12}And I also have other.
Dialogue: 0,0:47:19.49,0:47:22.57,yin,,0,0,0,, 点其它会出现这些蜡笔 \N{\fs12}And I bring up other, brings up the crayons.
Dialogue: 0,0:47:22.57,0:47:26.14,yin,,0,0,0,, 还有其它选择颜色的方式 不过我喜欢蜡笔 \N{\fs12}It also brings up other ways to choose colors, but I like the crayons.
Dialogue: 0,0:47:26.14,0:47:29.93,yin,,0,0,0,, 我的蜡笔呢 \N{\fs12}And so where are my crayons?
Dialogue: 0,0:47:29.93,0:47:30.77,yin,,0,0,0,, 这里 \N{\fs12}There they are.
Dialogue: 0,0:47:30.77,0:47:34.45,yin,,0,0,0,, 我们来选一种绿色 青苔色是很好的绿色 \N{\fs12}So let’s pick a green, like, moss is a good green.
Dialogue: 0,0:47:34.45,0:47:36.03,yin,,0,0,0,, 苜蓿色 我更喜欢青苔色 \N{\fs12}Clover. I kind of like moss better.
Dialogue: 0,0:47:36.03,0:47:39.13,yin,,0,0,0,, 这是纸牌游戏的背景 \N{\fs12}So that’s kind of a card game background.
Dialogue: 0,0:47:39.13,0:47:42.97,yin,,0,0,0,, 这就行了 我们设置好了 View 的背景颜色 \N{\fs12}And that’s it. So we’ve set the background color of our views.
Dialogue: 0,0:47:42.97,0:47:45.34,yin,,0,0,0,, 所有的属性设置都和这类似 \N{\fs12}And all the attribute setting is just like this:
Dialogue: 0,0:47:45.34,0:47:48.14,yin,,0,0,0,, 设置好了就可以不用管了 \N{\fs12}You just set it and forget it.
Dialogue: 0,0:47:48.14,0:47:50.98,yin,,0,0,0,, 我们回到按钮和它的属性 \N{\fs12}So let’s go back to the button and its properties.
Dialogue: 0,0:47:50.98,0:47:53.24,yin,,0,0,0,, 按钮我希望它像一张纸牌 \N{\fs12}Okay. The button I want to look like a card.
Dialogue: 0,0:47:53.24,0:47:58.73,yin,,0,0,0,,iOS7 中的按钮比较像网页中的超链接 \N{\fs12}Well, a button in iOS 7 basically looks a lot like a hyperlink on a web page,
Dialogue: 0,0:47:58.73,0:48:02.14,yin,,0,0,0,, 就像这个按钮所做的 这个蓝色按钮 \N{\fs12}just like that button does right there. That blue button.
Dialogue: 0,0:48:02.14,0:48:04.49,yin,,0,0,0,, 这不是我们想要的 \N{\fs12}That’s not really appropriate for what we want.
Dialogue: 0,0:48:04.49,0:48:08.27,yin,,0,0,0,, 我们希望它是一张牌 有圆角矩形边框和白色背景 \N{\fs12}We want it to look like a card with a little rounded rect and a white background, right?
Dialogue: 0,0:48:08.27,0:48:10.15,yin,,0,0,0,, 我希望纸牌背面都一样 \N{\fs12}And I want the back of the card to look the same
Dialogue: 0,0:48:10.15,0:48:13.51,yin,,0,0,0,, 而且具有某种图样设计 \N{\fs12}but have some kind of design on it or something like that.
Dialogue: 0,0:48:13.51,0:48:18.23,yin,,0,0,0,, 所以 我将为我的按钮设置一个背景图 \N{\fs12}So the way I’m going to do that is I’m going to set a background image for my button.
Dialogue: 0,0:48:18.23,0:48:20.36,yin,,0,0,0,, 一个圆角矩形的背景图 \N{\fs12}A background image that’s like a rounded rect.
Dialogue: 0,0:48:20.36,0:48:22.28,yin,,0,0,0,, 这里我们先简单讲一下 \N{\fs12}So let’s take a little aside here and talk about:
Dialogue: 0,0:48:22.28,0:48:25.48,yin,,0,0,0,, 如何将图像置入到 app 中 \N{\fs12}How do we get images into our app?
Dialogue: 0,0:48:25.48,0:48:28.94,yin,,0,0,0,,app 中经常会用到图像 \N{\fs12}Okay. We want to use images in our app; it’s very common to want to use images
Dialogue: 0,0:48:28.94,0:48:31.16,yin,,0,0,0,, 手机程序一般都是图形程序 \N{\fs12}in a graphical application like on a phone.
Dialogue: 0,0:48:31.16,0:48:32.02,yin,,0,0,0,, 那如何做到呢 \N{\fs12}So how do you do it?
Dialogue: 0,0:48:32.02,0:48:35.81,yin,,0,0,0,, 答案是 你可以到下面这个地方 它叫作 \N{\fs12}And the answer is you go down here to this place called the
Dialogue: 0,0:48:35.81,0:48:38.61,yin,,0,0,0,, 图像资源库 Images.xcassets\N{\fs12}”image asset library” — images.xc assets
Dialogue: 0,0:48:38.61,0:48:40.06,yin,,0,0,0,,xcassets 也就是 Xcode 资源 \N{\fs12}or Xcode assets.
Dialogue: 0,0:48:40.06,0:48:43.09,yin,,0,0,0,, 可以看到这里已经有一些图标槽位存在 \N{\fs12}And you can see there’s already a couple of slots for icons here.
Dialogue: 0,0:48:43.09,0:48:45.72,yin,,0,0,0,, 你可以在这里设置 app 图标 \N{\fs12}They’re not set, but this is the app icon.
Dialogue: 0,0:48:45.72,0:48:48.09,yin,,0,0,0,, 你还可以设置一个启动画面 \N{\fs12}And also you can have a launch image that will appear instantly
Dialogue: 0,0:48:48.09,0:48:51.59,yin,,0,0,0,, 程序启动后需要初始化 启动画面会立刻显示 \N{\fs12}when someone launches your app. And then as you’re initializing,
Dialogue: 0,0:48:51.60,0:48:54.39,yin,,0,0,0,, 初始化后再才显示出实际的 UI\N{\fs12}having behind the launch image, and then it will show you are actual UI.
Dialogue: 0,0:48:54.39,0:48:56.45,yin,,0,0,0,, 这是一个快速的启动画面 \N{\fs12}So it’s kind of quick launch image.
Dialogue: 0,0:48:56.45,0:48:58.17,yin,,0,0,0,, 周一我会讲到这个 \N{\fs12}And we’ll talk about this on Monday.
Dialogue: 0,0:48:58.17,0:49:00.81,yin,,0,0,0,, 这里我们将为 Machismo 设置背景 \N{\fs12}We’ll set the app background for Machismo here.
Dialogue: 0,0:49:00.81,0:49:04.82,yin,,0,0,0,, 我将拖入其它图像 \N{\fs12}But I’m going to actually drag in some other image.
Dialogue: 0,0:49:04.82,0:49:06.78,yin,,0,0,0,, 这里我有一些图像 \N{\fs12}So I have some images here.
Dialogue: 0,0:49:06.80,0:49:11.76,yin,,0,0,0,, 例如 这里我有这个斯坦福的 logo\N{\fs12}And for example, I’ve got this Stanford logo right here.
Dialogue: 0,0:49:11.76,0:49:14.17,yin,,0,0,0,, 我将把这个斯坦福的 logo 拖入 \N{\fs12}So I’m going to drag that Stanford logo in
Dialogue: 0,0:49:14.17,0:49:15.46,yin,,0,0,0,, 因为我要用它 \N{\fs12}because I want to use it.
Dialogue: 0,0:49:15.46,0:49:16.83,yin,,0,0,0,, 把它拖到这里就行了 \N{\fs12}And that’s it; you just drag it in here.
Dialogue: 0,0:49:16.83,0:49:17.91,yin,,0,0,0,, 这是斯坦福 logo\N{\fs12}It says Stanford.
Dialogue: 0,0:49:17.91,0:49:21.49,yin,,0,0,0,, 但注意到 这里有很奇怪的 1x 和 2x\N{\fs12}But notice that it kind of has this weird thing here, this 1X and 2X.
Dialogue: 0,0:49:21.49,0:49:26.61,yin,,0,0,0,, 看到了吗 这是因为 iOS 中你们要用到的每张图像 \N{\fs12}You see that? And that’s because every image that you’re going to use in iOS
Dialogue: 0,0:49:26.63,0:49:30.18,yin,,0,0,0,, 需要有一个普通分辨率版本 \N{\fs12}wants to have a normal resolution version that’s going
Dialogue: 0,0:49:30.18,0:49:33.72,yin,,0,0,0,, 用于 iPhone4 这样的非视网膜屏 \N{\fs12}to be used like on the iPhone 4 — nonretina displays basically.
Dialogue: 0,0:49:33.72,0:49:38.14,yin,,0,0,0,, 而 2x 是两倍高分辨率版本 用于视网膜屏 \N{\fs12}And then a 2X, twice as high resolution — one that will be used on retina.
Dialogue: 0,0:49:38.14,0:49:41.51,yin,,0,0,0,, 系统会自动选择正确的图像 取决于运行于什么设备 \N{\fs12}And it will automatically pick the right one, depending on what you’re running on.
Dialogue: 0,0:49:41.51,0:49:43.34,yin,,0,0,0,, 你不需要做任何事 \N{\fs12}You don’t have to do anything about it.
Dialogue: 0,0:49:43.34,0:49:45.75,yin,,0,0,0,, 但你需要提供这些高清版本 \N{\fs12}But you do want to provide these higher res ones.
Dialogue: 0,0:49:45.75,0:49:50.08,yin,,0,0,0,, 这些高清版本并不一定要是原来一样的图像 \N{\fs12}And these higher res ones aren’t just necessarily the same exact image,
Dialogue: 0,0:49:50.09,0:49:53.21,yin,,0,0,0,, 只是分辨率更高一些 \N{\fs12}just, you know, made more high resolution.
Dialogue: 0,0:49:53.21,0:49:54.35,yin,,0,0,0,, 它们可以不同 \N{\fs12}They might allow you to do –
Dialogue: 0,0:49:54.35,0:49:57.32,yin,,0,0,0,, 例如这里 我有一个带树的斯坦福 logo\N{\fs12}for example, here I’ve got a Stanford logo with the little tree.
Dialogue: 0,0:49:57.32,0:49:58.95,yin,,0,0,0,, 看到树了吗 \N{\fs12}See? See the tree in there?
Dialogue: 0,0:49:58.95,0:50:01.93,yin,,0,0,0,, 也许这里由于分辨率太低 树不是很好看 \N{\fs12}So maybe this is too low resolution to really get a good-looking tree.
Dialogue: 0,0:50:01.93,0:50:05.12,yin,,0,0,0,, 但在高分辨率下我可以加个树 所以我加了 \N{\fs12}But I can get the tree in at a higher resolution, so I put it in there.
Dialogue: 0,0:50:05.12,0:50:07.88,yin,,0,0,0,, 两个图像不一样的情况并不常见 \N{\fs12}So it’s not that common that the two ones would be actually
Dialogue: 0,0:50:07.88,0:50:09.53,yin,,0,0,0,, 但它们确实可以不同 \N{\fs12}different-looking but they could be.
Dialogue: 0,0:50:09.53,0:50:11.40,yin,,0,0,0,, 这肯定是允许的 \N{\fs12}Certainly allowed they could be.
Dialogue: 0,0:50:11.40,0:50:14.11,yin,,0,0,0,, 我也不想把这个叫斯坦福 \N{\fs12}I also don’t want to really call this “Stanford.”
Dialogue: 0,0:50:14.11,0:50:17.29,yin,,0,0,0,, 我将把这用作纸牌的背面 \N{\fs12}I’m going to use this as my backup card.
Dialogue: 0,0:50:17.29,0:50:19.61,yin,,0,0,0,, 纸牌背面我将不使用某种花纹 \N{\fs12}Instead of having, you know, some kind of design,
Dialogue: 0,0:50:19.61,0:50:21.89,yin,,0,0,0,, 而使用斯坦福的 logo\N{\fs12}I’m going to have the Stanford logo be the back of my card.
Dialogue: 0,0:50:21.89,0:50:24.35,yin,,0,0,0,, 纸牌翻过来时 我会看到背面的斯坦福 logo\N{\fs12}When my card’s flipped down and I see the back, I’m going to see the Stanford logo.
Dialogue: 0,0:50:24.35,0:50:26.99,yin,,0,0,0,, 所以我将给它取名为 cardback\N{\fs12}So I’m going to call this “card back.”
Dialogue: 0,0:50:26.99,0:50:29.60,yin,,0,0,0,, 其实叫什么都行 \N{\fs12}I can call it anything I want.
Dialogue: 0,0:50:29.60,0:50:32.06,yin,,0,0,0,, 正面我也有个图像 \N{\fs12}I also have things for the front here.
Dialogue: 0,0:50:32.06,0:50:33.45,yin,,0,0,0,, 这个 \N{\fs12}This one right here.
Dialogue: 0,0:50:33.45,0:50:35.93,yin,,0,0,0,, 这是带有圆角的空纸牌 \N{\fs12}This is blank card with a rounded corner.
Dialogue: 0,0:50:35.93,0:50:36.48,yin,,0,0,0,, 这里 \N{\fs12}There it is.
Dialogue: 0,0:50:36.48,0:50:38.01,yin,,0,0,0,, 哦 你们看不到 \N{\fs12}You can’t see it.
Dialogue: 0,0:50:38.01,0:50:40.10,yin,,0,0,0,, 因为这是白色纸牌 所以你们看不到 \N{\fs12}Because it’s a white card so you can’t see it.
Dialogue: 0,0:50:40.10,0:50:43.43,yin,,0,0,0,, 但我将使用它 取名为 cardfront\N{\fs12}But I’m going to use that. I’m going to call this “card front.”
Dialogue: 0,0:50:43.43,0:50:48.81,yin,,0,0,0,, 我还将有一个高清版的 \N{\fs12}And I’m also going to have a high-res version of that as well.
Dialogue: 0,0:50:48.81,0:50:50.62,yin,,0,0,0,, 好 这很不错 \N{\fs12}Okay. So that’s good.
Dialogue: 0,0:50:50.62,0:50:53.51,yin,,0,0,0,, 它只能显示成这样 \N{\fs12}So as much as we can see of it.
Dialogue: 0,0:50:53.51,0:50:56.14,yin,,0,0,0,, 以上一些图像 \N{\fs12}Okay. So now I got some images.
Dialogue: 0,0:50:56.14,0:50:58.72,yin,,0,0,0,, 下面我将把它们用到我的视图中 \N{\fs12}And now I want to use them in my view.
Dialogue: 0,0:50:58.74,0:51:00.89,yin,,0,0,0,, 我将设置纸牌 来使用这个 \N{\fs12}I kind of want to set this card to use this.
Dialogue: 0,0:51:00.89,0:51:05.82,yin,,0,0,0,, 程序运行时 我希望纸牌最开始是正面朝上 \N{\fs12}So I’m going to start with my card here being face up when it runs.
Dialogue: 0,0:51:05.82,0:51:08.74,yin,,0,0,0,,app 运行时 纸牌最开始是正面朝上 \N{\fs12}When my app runs, the card’s going to start face up.
Dialogue: 0,0:51:08.74,0:51:12.59,yin,,0,0,0,, 在作业 app 中 你们需要让它正面朝下 \N{\fs12}In your app when you get your homework you’re probably going to want to start it facedown.
Dialogue: 0,0:51:12.59,0:51:15.80,yin,,0,0,0,, 原因在于 我的 app 只显示一张牌 \N{\fs12}The reason for that is my app only shows one card:
Dialogue: 0,0:51:15.80,0:51:16.88,yin,,0,0,0,, 梅花 A\N{\fs12}Ace of clubs.
Dialogue: 0,0:51:16.88,0:51:19.11,yin,,0,0,0,, 所以最开始梅花 A 朝上没有关系 \N{\fs12}So it’s fine if it comes up with ace of clubs.
Dialogue: 0,0:51:19.11,0:51:22.14,yin,,0,0,0,, 但你们显然不希望一开始就是梅花 A\N{\fs12}But you don’t want your card to come up ace of clubs for sure.
Dialogue: 0,0:51:22.14,0:51:25.36,yin,,0,0,0,, 而且代码上 你们也需要更多工作 \N{\fs12}And it might be a little more work for you coding-wise
Dialogue: 0,0:51:25.36,0:51:27.86,yin,,0,0,0,, 才能初始化它 得到随机的牌 \N{\fs12}to initialize it to come up with some random card.
Dialogue: 0,0:51:27.86,0:51:30.91,yin,,0,0,0,, 所以你们应该让它正面朝下 这会更容易一些 \N{\fs12}So you’ll just have it come up facedown. Make it a lot easier on you.
Dialogue: 0,0:51:30.91,0:51:33.80,yin,,0,0,0,, 这如何设置呢 \N{\fs12}So how do we set that?
Dialogue: 0,0:51:33.80,0:51:34.55,yin,,0,0,0,, 很简单 \N{\fs12}Really simple.
Dialogue: 0,0:51:34.55,0:51:36.03,yin,,0,0,0,, 这里有已选定的按钮 \N{\fs12}I’ve got the button selected here.
Dialogue: 0,0:51:36.03,0:51:37.28,yin,,0,0,0,, 这是它的属性 \N{\fs12}Here’s its properties.
Dialogue: 0,0:51:37.28,0:51:40.13,yin,,0,0,0,, 一个属性是它的背景图像 \N{\fs12}One of its properties is its background image.
Dialogue: 0,0:51:40.13,0:51:42.50,yin,,0,0,0,, 我要点击这里 可以看到 \N{\fs12}So I’m just going to click here, and you can see
Dialogue: 0,0:51:42.50,0:51:45.53,yin,,0,0,0,, 资源库中的所有图像都在这里 \N{\fs12}that all images that are in my assets library will be here.
Dialogue: 0,0:51:45.53,0:51:48.86,yin,,0,0,0,, 有很多的话 你可以键入字符 它会自行匹配 \N{\fs12}And if there was a really lot of them, you can type and it will match it.
Dialogue: 0,0:51:48.86,0:51:51.75,yin,,0,0,0,, 我将把它设为 cardfront\N{\fs12}So I’m going to make it be the card front.
Dialogue: 0,0:51:51.75,0:51:55.39,yin,,0,0,0,, 这就设为了正面 但圆角矩形在哪 \N{\fs12}So it made it the card front, but I don’t see — where’s the rounded rect?
Dialogue: 0,0:51:55.39,0:51:58.58,yin,,0,0,0,, 我看不到圆角矩形 这是因为它太小了 \N{\fs12}I can’t see the rounded rect. And that’s because it’s too small
Dialogue: 0,0:51:58.58,0:52:01.58,yin,,0,0,0,, 圆角看不大清楚 \N{\fs12}to see the rounded corners very well here.
Dialogue: 0,0:52:01.58,0:52:04.59,yin,,0,0,0,, 这里你可以将它拉大一些 \N{\fs12}So you can just take this thing and resize it.
Dialogue: 0,0:52:04.59,0:52:06.87,yin,,0,0,0,, 我希望让它…\N{\fs12}And I’m going to make it –
Dialogue: 0,0:52:06.87,0:52:12.91,yin,,0,0,0,, 这里我希望比例是 2:3 我将使用 64×96\N{\fs12}I want it to be about two to three ratio. So I’m going to make it 64 by 96.
Dialogue: 0,0:52:12.91,0:52:15.91,yin,,0,0,0,, 这是一个很好的尺寸 我调整了它的大小 \N{\fs12}I know this happens to be a very good size, and I’ve resized it.
Dialogue: 0,0:52:15.91,0:52:18.15,yin,,0,0,0,, 这时就可以看到圆角了 \N{\fs12}And now you can see the little rounded corners.
Dialogue: 0,0:52:18.15,0:52:20.80,yin,,0,0,0,, 看到了吗 这就是我刚才拖入的图像 \N{\fs12}You see? So this is that image I dragged in
Dialogue: 0,0:52:20.80,0:52:22.28,yin,,0,0,0,, 上面写有 Button\N{\fs12}with button written on top of it.
Dialogue: 0,0:52:22.28,0:52:24.35,yin,,0,0,0,, 我还可以将它移动一下 \N{\fs12}And of course, I moved it a little so I can put it back
Dialogue: 0,0:52:24.35,0:52:27.50,yin,,0,0,0,, 放到蓝色参考线的中间 \N{\fs12}in the middle using my blue guidelines, right?
Dialogue: 0,0:52:27.50,0:52:30.05,yin,,0,0,0,, 当然 我不希望纸牌上写有 Button\N{\fs12}And of course, I don’t want my card to say “button” it;
Dialogue: 0,0:52:30.05,0:52:33.17,yin,,0,0,0,, 我希望这里是梅花 A 我可以双击它 \N{\fs12}I want the ace of clubs on here. So I’m going to just double-click on it.
Dialogue: 0,0:52:33.17,0:52:34.86,yin,,0,0,0,, 我也可以在这上面编辑 \N{\fs12}I could also edit that up here.
Dialogue: 0,0:52:34.86,0:52:36.14,yin,,0,0,0,, 看到了吗 这里写的是 Button\N{\fs12}You see right here where it says “button”?
Dialogue: 0,0:52:36.14,0:52:36.86,yin,,0,0,0,, 点击这里 \N{\fs12}Click it here.
Dialogue: 0,0:52:36.86,0:52:38.71,yin,,0,0,0,, 我将直接双击它 \N{\fs12}I’m just going to double-click directly on it.
Dialogue: 0,0:52:38.71,0:52:39.98,yin,,0,0,0,, 我将输入 A\N{\fs12}I’m going to type “ace.”
Dialogue: 0,0:52:39.98,0:52:42.18,yin,,0,0,0,, 如何输入梅花 有人知道吗 \N{\fs12}And how do I type clubs, anyone know?
Dialogue: 0,0:52:43.22,0:52:45.42,yin,,0,0,0,,Alt+ 什么 我喜欢这样做 \N{\fs12}Alt something or other. I like to do this way.
Dialogue: 0,0:52:45.42,0:52:49.81,yin,,0,0,0,, 到编辑菜单 选特殊字符 弹出这个窗口 \N{\fs12}I go to edit menu, special characters, get this magic thing.
Dialogue: 0,0:52:49.81,0:52:51.32,yin,,0,0,0,, 看过这个吗 很酷吧 \N{\fs12}You ever seen this, kind of cool?
Dialogue: 0,0:52:51.32,0:52:55.86,yin,,0,0,0,, 双击 找到梅花 然后双击 \N{\fs12}Just double-click — find the clubs and double-click.
Dialogue: 0,0:52:55.86,0:52:58.16,yin,,0,0,0,, 好 这就是我的梅花 A 了 \N{\fs12}All right. So there’s my ace of clubs.
Dialogue: 0,0:52:58.16,0:53:00.61,yin,,0,0,0,, 不过这也不是很好 \N{\fs12}Now but, you know, that’s not quite right, either.
Dialogue: 0,0:53:00.61,0:53:04.05,yin,,0,0,0,, 我不喜欢这个蓝 A 我希望 A 是黑色的 \N{\fs12}I don’t really like that blue A. I really want the A to be black.
Dialogue: 0,0:53:04.05,0:53:06.75,yin,,0,0,0,, 而且它可以更大一些 这里还有更大空间 \N{\fs12}And it could be a little bigger. There’s more room for it.
Dialogue: 0,0:53:06.75,0:53:09.76,yin,,0,0,0,, 我可以到这里 来改变字体 \N{\fs12}So I can go over here, for example, and change the font.
Dialogue: 0,0:53:09.76,0:53:12.66,yin,,0,0,0,, 我可以点这个 让它更大 \N{\fs12}I can change it by clicking this little thing to make it bigger,
Dialogue: 0,0:53:12.66,0:53:16.76,yin,,0,0,0,, 我也可以点击这个 T 设置它为哪一种字体 \N{\fs12}or I can actually click on this T and even set which font it is.
Dialogue: 0,0:53:16.76,0:53:20.61,yin,,0,0,0,,iOS7 中很重要的一点是排版 \N{\fs12}One thing that’s really important in iOS 7 is the typography.
Dialogue: 0,0:53:20.61,0:53:25.63,yin,,0,0,0,, 选择正确的文本样式在 iOS7 中非常非常重要 \N{\fs12}Picking the right text styles is really, really important in iOS 7.
Dialogue: 0,0:53:25.63,0:53:27.20,yin,,0,0,0,, 这里我不打算细讲 \N{\fs12}And we’re not going to really talk about it here;
Dialogue: 0,0:53:27.20,0:53:28.81,yin,,0,0,0,, 我将使用系统字体 \N{\fs12}we’re just going to use the system font.
Dialogue: 0,0:53:28.81,0:53:31.59,yin,,0,0,0,, 不过以后课上我会讲到 \N{\fs12}But that’s something we’ll talk about in lecture,
Dialogue: 0,0:53:31.59,0:53:34.25,yin,,0,0,0,, 确保正确地方使用了正确字体 \N{\fs12}is making sure you pick the right fonts in the right places
Dialogue: 0,0:53:34.25,0:53:36.05,yin,,0,0,0,, 才能让 UI 看起来更漂亮 \N{\fs12}to make the UI look really nice.
Dialogue: 0,0:53:36.05,0:53:40.23,yin,,0,0,0,, 这里我可以改变字符大小 也许 24 点就差不多了 \N{\fs12}I can change the size here, maybe 24 point or something like that.
Dialogue: 0,0:53:40.23,0:53:41.39,yin,,0,0,0,, 这就行了 \N{\fs12}That will still fit.
Dialogue: 0,0:53:41.39,0:53:44.29,yin,,0,0,0,, 然后我不要蓝色 点这里换字符颜色 \N{\fs12}And then I don’t want this blue, so that’s this text color.
Dialogue: 0,0:53:44.29,0:53:46.28,yin,,0,0,0,, 我们要把这个换成黑色 \N{\fs12}So let’s go ahead and make that black.
Dialogue: 0,0:53:46.28,0:53:49.00,yin,,0,0,0,, 好 这样牌就弄成了我想要的样子 \N{\fs12}All right. So I got the card looking the way I want.
Dialogue: 0,0:53:49.00,0:53:49.89,yin,,0,0,0,, 这很好 \N{\fs12}That’s good.
Dialogue: 0,0:53:49.89,0:53:52.77,yin,,0,0,0,, 顺便说下 我们设置的所有这些属性 \N{\fs12}All these properties that we’re setting, by the way,
Dialogue: 0,0:53:52.77,0:53:55.57,yin,,0,0,0,,Button 下面可以看到这个状态配置 \N{\fs12}if you look at button, you see this state config right here?
Dialogue: 0,0:53:55.57,0:53:58.97,yin,,0,0,0,, 这是默认 我们可以设置所有不同状态 \N{\fs12}Default? We can actually set all these things differently
Dialogue: 0,0:53:58.97,0:54:03.01,yin,,0,0,0,, 包括按钮的高亮状态 或选择状态 或禁用状态 \N{\fs12}for the highlighted state of the button, or a selected state, or disabled state.
Dialogue: 0,0:54:03.01,0:54:05.31,yin,,0,0,0,, 不过这里我们设置的是默认 \N{\fs12}But we’re setting these as the default.
Dialogue: 0,0:54:05.31,0:54:09.65,yin,,0,0,0,, 所有按钮都总会显示出默认状态 \N{\fs12}So all our buttons always going to be displaying the default state.
Dialogue: 0,0:54:09.65,0:54:11.64,yin,,0,0,0,, 按钮非常强大 \N{\fs12}So buttons are pretty powerful.
Dialogue: 0,0:54:11.64,0:54:14.04,yin,,0,0,0,, 你可以让它们在高亮或别的状态中有所不同 \N{\fs12}You can have them look different as they highlight or whatever,
Dialogue: 0,0:54:14.04,0:54:16.01,yin,,0,0,0,, 但我们这里用到的将是 \N{\fs12}but we’re going to be working all in what’s called the
Dialogue: 0,0:54:16.01,0:54:18.45,yin,,0,0,0,,”正常”或”默认”状态下的按钮 \N{\fs12}”normal” or “default” state of the button.
Dialogue: 0,0:54:18.45,0:54:20.39,yin,,0,0,0,, 看代码时你们会看到这个 \N{\fs12}You’ll see that when we get to the code.
Dialogue: 0,0:54:20.39,0:54:22.18,yin,,0,0,0,, 我们现在就可以运行这个了 \N{\fs12}So we can actually run this right now.
Dialogue: 0,0:54:22.18,0:54:22.79,yin,,0,0,0,, 运行 \N{\fs12}So running.
Dialogue: 0,0:54:22.79,0:54:24.67,yin,,0,0,0,, 你们大多数人用过 Xcode\N{\fs12}You’ve all — most, again, done Xcode.
Dialogue: 0,0:54:24.67,0:54:26.76,yin,,0,0,0,, 知道如何运行 也就是这个小的播放按钮 \N{\fs12}You know how to run. It’s this little play button.
Dialogue: 0,0:54:26.76,0:54:27.95,yin,,0,0,0,, 下拉列表里还有 \N{\fs12}You can actually hold it down,
Dialogue: 0,0:54:27.95,0:54:30.87,yin,,0,0,0,, 测试和分析等其它这些东西 \N{\fs12}and there’s other things you can do like test and analyze.
Dialogue: 0,0:54:30.87,0:54:31.84,yin,,0,0,0,, 这里我们要运行 \N{\fs12}But we’re just going to run.
Dialogue: 0,0:54:31.84,0:54:36.11,yin,,0,0,0,, 点运行 它会在模拟器中运行 \N{\fs12}So I click run, and it’s going to run this in a simulator.
Dialogue: 0,0:54:36.11,0:54:38.52,yin,,0,0,0,, 这就是了 \N{\fs12}And here it is.
Dialogue: 0,0:54:38.52,0:54:42.36,yin,,0,0,0,, 可以看到 模拟器很大 我的屏幕放不下 \N{\fs12}And you can see that the simulator’s so big it doesn’t even fit on my screen.
Dialogue: 0,0:54:42.36,0:54:44.94,yin,,0,0,0,, 所以我需要滚动 \N{\fs12}So I kind of have to scroll around in it.
Dialogue: 0,0:54:44.94,0:54:48.03,yin,,0,0,0,, 点击它 它什么都做不了 \N{\fs12}And when I click it, it doesn’t do anything.
Dialogue: 0,0:54:48.03,0:54:49.70,yin,,0,0,0,, 这个不好 \N{\fs12}So that’s not good.
Dialogue: 0,0:54:49.70,0:54:52.46,yin,,0,0,0,, 因为控制器中我还没有加入任何代码 \N{\fs12}Because I haven’t put any code in my controller
Dialogue: 0,0:54:52.46,0:54:54.84,yin,,0,0,0,, 来对点击作出响应 \N{\fs12}to respond to that thing being touched.
Dialogue: 0,0:54:54.84,0:54:57.73,yin,,0,0,0,, 这将是我们下面的工作 \N{\fs12}So that’s what we’re going to do next.
Dialogue: 0,0:54:57.73,0:55:00.13,yin,,0,0,0,, 回到这里来 停止 \N{\fs12}So let’s go back here and stop.
Dialogue: 0,0:55:03.79,0:55:05.39,yin,,0,0,0,, 那么 怎么做到呢 \N{\fs12}So how do we do that?
Dialogue: 0,0:55:05.39,0:55:07.68,yin,,0,0,0,, 这个做起来会非常有趣 \N{\fs12}Well, it’s pretty interesting how we do that, actually.
Dialogue: 0,0:55:07.68,0:55:09.95,yin,,0,0,0,, 我这里留一些空间出来 \N{\fs12}I’m going to make some more space here.
Dialogue: 0,0:55:09.95,0:55:14.07,yin,,0,0,0,, 我们需要把它同控制器联系起来 \N{\fs12}And what we need to do is connect up to our controller.
Dialogue: 0,0:55:14.07,0:55:19.69,yin,,0,0,0,, 做法是对照视图 并排加入控制器代码 \N{\fs12}And we do that by putting our controller’s code side by side with our view.
Dialogue: 0,0:55:19.69,0:55:21.83,yin,,0,0,0,, 我将点击这个小按钮 \N{\fs12}So I’m going to click this little button right here,
Dialogue: 0,0:55:21.83,0:55:25.00,yin,,0,0,0,, 这个按钮图标 表示并排显示 \N{\fs12}this button icon, and that puts side by side.
Dialogue: 0,0:55:25.00,0:55:27.82,yin,,0,0,0,, 默认情况下 如果视图在左边 \N{\fs12}And by default if you have a view up here on the left,
Dialogue: 0,0:55:27.82,0:55:30.74,yin,,0,0,0,, 控制器代码会显示在右边 \N{\fs12}it’s going to put that controller’s code on the right.
Dialogue: 0,0:55:30.74,0:55:34.15,yin,,0,0,0,, 我们可以移动这个 给代码腾出更大空间 \N{\fs12}And you can move this to get more space for the code if you want.
Dialogue: 0,0:55:34.15,0:55:37.76,yin,,0,0,0,, 这里还可以在处理公共内容的头文件 \N{\fs12}You can also switch between the header if you want to do public stuff
Dialogue: 0,0:55:37.77,0:55:40.27,yin,,0,0,0,, 和实现之间来回切换 \N{\fs12}or the implementation.
Dialogue: 0,0:55:41.76,0:55:43.14,yin,,0,0,0,, 这很棒 \N{\fs12}So that’s good.
Dialogue: 0,0:55:43.14,0:55:46.24,yin,,0,0,0,, 这段代码是视图控制器生命周期的部分 \N{\fs12}Now, this code right here is part of the view controller lifecycle,
Dialogue: 0,0:55:46.24,0:55:48.39,yin,,0,0,0,, 我们会在两三周后谈到 \N{\fs12}which we’re going to talk about in two or three weeks.
Dialogue: 0,0:55:48.39,0:55:53.11,yin,,0,0,0,, 不过今天我不打算讲它 让我把它删掉 \N{\fs12}But today we’re not going to talk about it. So we can just get rid of it.
Dialogue: 0,0:55:53.11,0:55:57.42,yin,,0,0,0,, 今天我只想说 \N{\fs12}And let’s just start by saying,
Dialogue: 0,0:55:57.42,0:56:01.18,yin,,0,0,0,, 这个按钮被触碰到时 我们希望它翻个面 \N{\fs12}”When this button gets touched, we want it to flip over.”
Dialogue: 0,0:56:01.18,0:56:04.60,yin,,0,0,0,, 我们需要将视图和控制器连接起来 \N{\fs12}So we need to make a connection between our view and the controller.
Dialogue: 0,0:56:04.60,0:56:08.98,yin,,0,0,0,, 我们会将目标挂出去 然后将箭发射 \N{\fs12}And we’re going to do that thing where we hang the target out and shoot the arrow.
Dialogue: 0,0:56:08.98,0:56:10.38,yin,,0,0,0,, 这是目标 动作 \N{\fs12}Called “target action.”
Dialogue: 0,0:56:10.38,0:56:11.89,yin,,0,0,0,, 这会有些怪异 \N{\fs12}And this is going to be kind of whacky.
Dialogue: 0,0:56:11.89,0:56:14.48,yin,,0,0,0,, 看到这个时 你可能都不敢相信自己的眼睛 \N{\fs12}You’re probably not even going to believe this when you see it.
Dialogue: 0,0:56:14.48,0:56:16.86,yin,,0,0,0,, 做法是按住 Control 键 \N{\fs12}The way to do this is you hold down the control key.
Dialogue: 0,0:56:16.86,0:56:21.91,yin,,0,0,0,, 我按住 Control 键 然后拖一条线 \N{\fs12}So I’m holding down the control key, and I’m dragging a line
Dialogue: 0,0:56:21.91,0:56:25.71,yin,,0,0,0,, 从视图直接拖到代码中 \N{\fs12}from the view directly into our code.
Dialogue: 0,0:56:27.07,0:56:28.48,yin,,0,0,0,, 让后松手 \N{\fs12}And I let go.
Dialogue: 0,0:56:28.48,0:56:33.24,yin,,0,0,0,, 然后它说 哦 你想在视图和控制器之间建立连接 对吧 \N{\fs12}And it says, “Oh, you want a connection between your view and your controller, do you?
Dialogue: 0,0:56:33.24,0:56:34.68,yin,,0,0,0,, 这就是我需要知道的 \N{\fs12}Here’s what I need to know.”
Dialogue: 0,0:56:34.68,0:56:37.33,yin,,0,0,0,, 它问我们 你希望给这个连接取名叫什么 \N{\fs12}So it’s asking us, “What you do you want to call this connection?”
Dialogue: 0,0:56:37.33,0:56:38.67,yin,,0,0,0,, 这将是方法名 \N{\fs12}So this is going to be the name of the method.
Dialogue: 0,0:56:38.67,0:56:42.05,yin,,0,0,0,, 它会创建一个在按钮被触碰到时调用的方法 \N{\fs12}It’s actually going to create a method here that gets called when the button gets touched.
Dialogue: 0,0:56:42.05,0:56:44.31,yin,,0,0,0,, 这里我给它取名叫 touchCardButton(触摸纸牌按钮)\N{\fs12}I’m going to call it “touch card button.”
Dialogue: 0,0:56:44.31,0:56:45.53,yin,,0,0,0,, 这个名字不错 \N{\fs12}That’s a good name.
Dialogue: 0,0:56:45.53,0:56:48.20,yin,,0,0,0,, 这里它问的是 你希望参数类型是什么 \N{\fs12}Here it’s saying, “What you do you want the type of the argument to be?”
Dialogue: 0,0:56:48.20,0:56:49.13,yin,,0,0,0,, 以后我会讲到 \N{\fs12}We’ll talk about this later,
Dialogue: 0,0:56:49.13,0:56:51.75,yin,,0,0,0,, 不过这里 我们显然希望参数是 \N{\fs12}but for now we obviously want the argument to be
Dialogue: 0,0:56:51.75,0:56:54.63,yin,,0,0,0,, 发送给我们这个动作的按钮 \N{\fs12}the button that is sending us this action.
Dialogue: 0,0:56:54.63,0:56:55.98,yin,,0,0,0,, 我们能够回头告诉它翻过来 这会很好 \N{\fs12}Which is going to be nice because then we’re going
Dialogue: 0,0:56:55.98,0:56:58.73,yin,,0,0,0,, 我们能够回头告诉它翻过来 这会很好 \N{\fs12}to talk back to it and tell it to flip itself over.
Dialogue: 0,0:56:58.73,0:57:00.19,yin,,0,0,0,, 这里我们还可以设置 \N{\fs12}There’s other things we can set here like:
Dialogue: 0,0:57:00.19,0:57:03.26,yin,,0,0,0,, 你想在哪一类事件下发送这个动作 \N{\fs12}What kind of event do you want to send this action?
Dialogue: 0,0:57:03.26,0:57:05.76,yin,,0,0,0,, 你可以设置为无参数 \N{\fs12}And you can actually set it so there’s no argument,
Dialogue: 0,0:57:05.76,0:57:08.53,yin,,0,0,0,, 它会发送 touchCardButton 不带参数 \N{\fs12}it just sends touch card button with no arguments.
Dialogue: 0,0:57:08.53,0:57:11.01,yin,,0,0,0,, 但这里我们希望 Sender 这一参数 \N{\fs12}But here we want it to have the argument of the sender,
Dialogue: 0,0:57:11.01,0:57:12.52,yin,,0,0,0,, 即发送这一消息的按钮 \N{\fs12}the button sending this message.
Dialogue: 0,0:57:12.52,0:57:14.09,yin,,0,0,0,, 你还可以发送触摸事件 \N{\fs12}You can even send the touch event along,
Dialogue: 0,0:57:14.09,0:57:17.34,yin,,0,0,0,, 但我们几乎从不这样做 使用率小于 0.1%\N{\fs12}but we almost never do that — a tenth of a percent of the time.
Dialogue: 0,0:57:17.34,0:57:18.94,yin,,0,0,0,, 这里选 Sender\N{\fs12}So here I’m going to have the sender.
Dialogue: 0,0:57:18.94,0:57:21.76,yin,,0,0,0,, 我点击连接时 它会创建一个新方法 \N{\fs12}So when I click connect, it creates a new method.
Dialogue: 0,0:57:21.76,0:57:24.50,yin,,0,0,0,, 这一方法同这一按钮接通起来 \N{\fs12}And that method is wired up to that button.
Dialogue: 0,0:57:24.50,0:57:26.50,yin,,0,0,0,, 看到这个圆圈了吗 \N{\fs12}In fact, you see this little round circle?
Dialogue: 0,0:57:26.50,0:57:31.52,yin,,0,0,0,, 鼠标放到上面 它就会告诉你 它连接到的是什么 \N{\fs12}If I mouse over it, it will show you that’s what it’s connected to.
Dialogue: 0,0:57:31.52,0:57:35.47,yin,,0,0,0,, 这是一个非常普通的方法 \N{\fs12}So this is just some pretty normal-looking method right here.
Dialogue: 0,0:57:35.47,0:57:40.13,yin,,0,0,0,, 返回类型 IBAction 这实际上是 typedef void\N{\fs12}The return type, IB action, that’s actually typedef void.
Dialogue: 0,0:57:40.13,0:57:42.10,yin,,0,0,0,, 这个方法实际返回 void\N{\fs12}This method actually returns void.
Dialogue: 0,0:57:42.10,0:57:45.04,yin,,0,0,0,,Xcode 之所以加上 IBAction\N{\fs12}The reason that Xcode puts IB action there
Dialogue: 0,0:57:45.04,0:57:48.27,yin,,0,0,0,, 将 IBAction 类型定义到 void 只是为了便于分辨 \N{\fs12}and typedef’s IB action to void, it’s just so that it can tell
Dialogue: 0,0:57:48.27,0:57:50.12,yin,,0,0,0,, 哪个方法是目标动作 \N{\fs12}which methods are target action
Dialogue: 0,0:57:50.12,0:57:52.89,yin,,0,0,0,, 于是它可以做这样的事情 \N{\fs12}so that it can do stuff like this.
Dialogue: 0,0:57:52.89,0:57:54.29,yin,,0,0,0,, 鼠标悬停 \N{\fs12}The mouse over.
Dialogue: 0,0:57:54.29,0:57:55.56,yin,,0,0,0,, 但编译器会忽略它 \N{\fs12}But the compiler ignores it.
Dialogue: 0,0:57:55.56,0:57:58.38,yin,,0,0,0,, 编译器会把它看作 void 因为它被类型定义为 void\N{\fs12}The compiler sees it as void because it’s typedef to void.
Dialogue: 0,0:57:58.38,0:58:01.12,yin,,0,0,0,,IBAction 完全是为 Xcode 考虑 \N{\fs12}It’s purely an Xcode thing to this IB action thing.
Dialogue: 0,0:58:01.12,0:58:05.26,yin,,0,0,0,, 然后这个方法有一个参数 也就是 sender\N{\fs12}And then you can see this method has one argument, which is the sender.
Dialogue: 0,0:58:05.26,0:58:06.98,yin,,0,0,0,, 这是发送我们这一消息的按钮 \N{\fs12}That’s the button sending us this message.
Dialogue: 0,0:58:06.98,0:58:11.77,yin,,0,0,0,, 每次按钮被触摸时 它都会发送这一消息 \N{\fs12}And it’s going to send this message every time a touch goes up inside the button.
Dialogue: 0,0:58:11.77,0:58:13.79,yin,,0,0,0,, 事件是触摸按钮 \N{\fs12}Touch up inside, right? That was the event.
Dialogue: 0,0:58:13.79,0:58:15.59,yin,,0,0,0,, 这时它会发送这一消息 \N{\fs12}So that’s when it’s going to send this message.
Dialogue: 0,0:58:15.59,0:58:17.03,yin,,0,0,0,, 这很完美 这就是我们要的 \N{\fs12}So that’s perfect. That’s what we want.
Dialogue: 0,0:58:17.03,0:58:19.72,yin,,0,0,0,, 每次发生这个时 我们想要做什么 \N{\fs12}So every time this happens, what do we want to do?
Dialogue: 0,0:58:19.72,0:58:22.32,yin,,0,0,0,, 我们希望将纸牌翻过来 \N{\fs12}Well, we want to flip the card over.
Dialogue: 0,0:58:22.32,0:58:24.57,yin,,0,0,0,, 我们首先来考虑如何翻到反面 \N{\fs12}Okay. So let’s start by just flipping it over to the back.
Dialogue: 0,0:58:24.57,0:58:27.12,yin,,0,0,0,, 为此 我们将创建一个局部变量 \N{\fs12}And the way we’re going to do that is we’re going to create a local variable
Dialogue: 0,0:58:27.12,0:58:29.18,yin,,0,0,0,, 叫 cardImage(纸牌图像)\N{\fs12}called “card image.”
Dialogue: 0,0:58:29.18,0:58:31.51,yin,,0,0,0,, 可以看到 它正为我提供键入帮助 这里会有很多帮助 \N{\fs12}Okay. And you noticed it was trying to help me type there,
Dialogue: 0,0:58:31.51,0:58:34.51,yin,,0,0,0,, 可以看到 它正为我提供键入帮助 这里会有很多帮助 \N{\fs12}and you’re going to see a lot of helping here.
Dialogue: 0,0:58:34.51,0:58:39.34,yin,,0,0,0,,UIImage 是 iOS 中的另一个类 就像 UIButton 一样 \N{\fs12}And UI image is another class in iOS, okay, just like UI button is a class.
Dialogue: 0,0:58:39.34,0:58:42.25,yin,,0,0,0,,UIImage 顾名思义 是用来存储图像的 \N{\fs12}UI image is the class, as you can imagine, stores an image.
Dialogue: 0,0:58:42.25,0:58:44.83,yin,,0,0,0,, 可以是 JPEG 图像 可以是 GIF 动画 \N{\fs12}Could be a JPEG image, could be an animated GIF,
Dialogue: 0,0:58:44.83,0:58:47.05,yin,,0,0,0,, 可以是 TIFF 图像 这些都行 \N{\fs12}it could be a TIFF image, whatever.
Dialogue: 0,0:58:47.05,0:58:50.89,yin,,0,0,0,, 这是一种很强大的容纳图像的类 \N{\fs12}So it’s very powerful image holding class.
Dialogue: 0,0:58:50.89,0:58:54.80,yin,,0,0,0,, 它有一个类方法 叫 imageNamed(图像名叫)\N{\fs12}And it has a class method called “image named,”
Dialogue: 0,0:58:54.80,0:59:00.46,yin,,0,0,0,, 你给它一个字符串 例如 cardfront 或 cardback\N{\fs12}and you give it a string like card front or card back, right?
Dialogue: 0,0:59:00.46,0:59:04.84,yin,,0,0,0,, 它会到资源库并给出一个分辨率正确的图像 \N{\fs12}And it will look in the assets library and give an image of the right resolution,
Dialogue: 0,0:59:04.85,0:59:06.59,yin,,0,0,0,, 实际上 它会给你两种分辨率的图像 \N{\fs12}depending on whether it’s going to be go on –
Dialogue: 0,0:59:06.59,0:59:08.70,yin,,0,0,0,, 实际上 它会给你两种分辨率的图像 \N{\fs12}actually, it will give you an image with both resolutions.
Dialogue: 0,0:59:08.70,0:59:11.22,yin,,0,0,0,, 然后取决于是否在视网膜屏上显示 \N{\fs12}And then depending on where you display it, it will, you know,
Dialogue: 0,0:59:11.22,0:59:13.86,yin,,0,0,0,, 它会为你选出正确分辨率的图像 \N{\fs12}pick the right resolution, whether it’s on a retina or not.
Dialogue: 0,0:59:13.86,0:59:15.38,yin,,0,0,0,, 这很酷 我们得到了图像 \N{\fs12}So that’s cool. We got the image.
Dialogue: 0,0:59:15.38,0:59:18.37,yin,,0,0,0,, 然后我们要告诉按钮把这个 \N{\fs12}So now we’re just going to tell the button to set this
Dialogue: 0,0:59:18.37,0:59:20.12,yin,,0,0,0,, 设置为背景图像 \N{\fs12}as its background image
Dialogue: 0,0:59:20.12,0:59:21.99,yin,,0,0,0,, 替换现在它上面的图像 \N{\fs12}instead of whatever’s on it right now.
Dialogue: 0,0:59:21.99,0:59:26.10,yin,,0,0,0,, 要同按钮通信 我们用 [sender\N{\fs12}So to talk to the button, we do open square bracket sender.
Dialogue: 0,0:59:26.10,0:59:30.65,yin,,0,0,0,,sender 也就是发送这一消息的按钮 \N{\fs12}Right? You see that the sender is the button sending us this message.
Dialogue: 0,0:59:31.73,0:59:36.13,yin,,0,0,0,, 设置背景 这里键入 setBackground…\N{\fs12}Set. Okay, I’m going to start typing set background.
Dialogue: 0,0:59:36.13,0:59:41.39,yin,,0,0,0,, 注意在我键入的过程中 Xcode 会为我提供一些建议 \N{\fs12}And you see as I start to type, Xcode is suggesting to me what I might want.
Dialogue: 0,0:59:41.39,0:59:43.64,yin,,0,0,0,, 它知道 sender 是一个 UIButton\N{\fs12}Now, it knows that the sender’s a UI button,
Dialogue: 0,0:59:43.64,0:59:48.75,yin,,0,0,0,, 所以它这里只会给我推荐以 setB 开头的按钮方法 \N{\fs12}so it’s only suggesting button methods here that start with set B –
Dialogue: 0,0:59:48.75,0:59:50.36,yin,,0,0,0,,setBackgroundColor setBackgroundImage\N{\fs12}set background color, set background image,
Dialogue: 0,0:59:50.36,0:59:51.55,yin,,0,0,0,, 和 setBounds\N{\fs12}and set bounds.
Dialogue: 0,0:59:51.55,0:59:54.60,yin,,0,0,0,, 注意下方还有一些帮助信息 \N{\fs12}Notice I’m also getting some help at the bottom.
Dialogue: 0,0:59:54.60,0:59:55.40,yin,,0,0,0,, 很酷吧 \N{\fs12}See, isn’t that cool?
Dialogue: 0,0:59:55.40,0:59:57.05,yin,,0,0,0,, 有一两行的简短帮助 \N{\fs12}A little one or two lines of help?
Dialogue: 0,0:59:57.05,0:59:58.19,yin,,0,0,0,, 我还可以点这个链接 \N{\fs12}And I could click on this link
Dialogue: 0,0:59:58.19,0:59:59.66,yin,,0,0,0,, 这会让我看到说明文档 \N{\fs12}and it would take me to the documentation.
Dialogue: 0,0:59:59.66,1:00:01.94,yin,,0,0,0,, 由于时间原因 我这里就不点了 \N{\fs12}We’re not going to do that for time reasons.
Dialogue: 0,1:00:01.94,1:00:06.23,yin,,0,0,0,, 不过我可以选择一个 它会写出这一个 \N{\fs12}But I can also just click one and it picks that one
Dialogue: 0,1:00:06.23,1:00:08.30,yin,,0,0,0,, 并立刻选择第一个参数 \N{\fs12}and immediately selects the first argument.
Dialogue: 0,1:00:08.30,1:00:10.05,yin,,0,0,0,, 我可以填入这个 \N{\fs12}So I can take that.
Dialogue: 0,1:00:10.05,1:00:11.28,yin,,0,0,0,, 我要这样做 \N{\fs12}So I’ll do that.
Dialogue: 0,1:00:11.28,1:00:12.25,yin,,0,0,0,,cardImage\N{\fs12}Card image.
Dialogue: 0,1:00:12.25,1:00:15.95,yin,,0,0,0,, 注意到 当我键入 ca 时 这里给出了很多东西 \N{\fs12}And notice here when I type CA, there’s a lot of things
Dialogue: 0,1:00:15.95,1:00:18.28,yin,,0,0,0,, 所有 ca 开头的都在这里 \N{\fs12}that start with CA that could go there.
Dialogue: 0,1:00:18.28,1:00:20.00,yin,,0,0,0,, 但 Xcode 很聪明 \N{\fs12}But Xcode’s pretty smart.
Dialogue: 0,1:00:20.00,1:00:23.82,yin,,0,0,0,, 它知道局部变量更可能是你要的 \N{\fs12}It knows that a local variable is much more likely what you want here
Dialogue: 0,1:00:23.83,1:00:27.66,yin,,0,0,0,, 相比其它这些 ca 开头的函数 \N{\fs12}than all these other CA — functions that start with CA.
Dialogue: 0,1:00:27.66,1:00:30.27,yin,,0,0,0,, 于是它自动给我选了这个 \N{\fs12}So it automatically selects that for me.
Dialogue: 0,1:00:30.27,1:00:31.83,yin,,0,0,0,, 如果我按 Tab 键 \N{\fs12}And if I hit tab, by the way,
Dialogue: 0,1:00:31.83,1:00:35.25,yin,,0,0,0,, 它会自动给我补全 Tab 用于补全 \N{\fs12}it’s going to basically escape complete it. Tab, complete it.
Dialogue: 0,1:00:35.27,1:00:37.41,yin,,0,0,0,, 再点一下 Tab 它会跳到这里 \N{\fs12}And if I hit another tab, it goes over here.
Dialogue: 0,1:00:37.41,1:00:40.60,yin,,0,0,0,, 这里 forState 也就是我刚才讲过的内容 \N{\fs12}This little forState thing is just what I was talking about where
Dialogue: 0,1:00:40.60,1:00:43.26,yin,,0,0,0,, 你可以设置为高亮状态 \N{\fs12}you can set this for the highlighted state,
Dialogue: 0,1:00:43.26,1:00:45.39,yin,,0,0,0,, 或选择状态 或禁用状态 \N{\fs12}or the selected state, or disabled state.
Dialogue: 0,1:00:45.39,1:00:49.28,yin,,0,0,0,, 我们将选择按钮的正常或默认状态 \N{\fs12}We’re just going to do the normal or default state of this button.
Dialogue: 0,1:00:49.28,1:00:52.53,yin,,0,0,0,, 我们在设置这个按钮的背景图像 \N{\fs12}So we’re setting the background image for this button.
Dialogue: 0,1:00:52.53,1:00:56.10,yin,,0,0,0,, 我们还需要设置标题 因为我们不希望 \N{\fs12}And we also need to set the title because we don’t want
Dialogue: 0,1:00:56.10,1:00:58.44,yin,,0,0,0,, 翻过来后还能看到梅花 A\N{\fs12}to see that ace of clubs when we flip it over backwards.
Dialogue: 0,1:00:58.44,1:01:01.12,yin,,0,0,0,, 我将把它设为这个 \N{\fs12}So I’m just going to set it to that.
Dialogue: 0,1:01:01.12,1:01:04.16,yin,,0,0,0,, 这是空字符串 这里我也可以用 nil\N{\fs12}Okay. That’s the empty string. I could also say nil there.
Dialogue: 0,1:01:04.16,1:01:07.24,yin,,0,0,0,, 不过我这里要写空字符串 让你们看看是怎样的 \N{\fs12}Okay. But I’m saying empty string just to see what empty string looks like.
Dialogue: 0,1:01:07.24,1:01:09.45,yin,,0,0,0,, 我们可以运行这个 \N{\fs12}So actually if we run this,
Dialogue: 0,1:01:12.84,1:01:14.01,yin,,0,0,0,,Command 3\N{\fs12}command three.
Dialogue: 0,1:01:14.01,1:01:14.93,yin,,0,0,0,, 好 我试试 \N{\fs12}Okay, let’s try that.
Dialogue: 0,1:01:14.93,1:01:16.42,yin,,0,0,0,, 哦 酷 \N{\fs12}Oh, cool.
Dialogue: 0,1:01:18.21,1:01:19.49,yin,,0,0,0,, 好了 \N{\fs12}So there you go.
Dialogue: 0,1:01:19.49,1:01:21.38,yin,,0,0,0,, 这是一个缩小的版本 \N{\fs12}So there’s a miniature version of it.
Dialogue: 0,1:01:21.38,1:01:22.94,yin,,0,0,0,, 这是我们的纸牌 \N{\fs12}Okay. So here’s our card.
Dialogue: 0,1:01:22.94,1:01:25.05,yin,,0,0,0,, 如果我点它一下 \N{\fs12}And if I click on it,
Dialogue: 0,1:01:25.05,1:01:26.73,yin,,0,0,0,, 哦耶 它翻过来了 \N{\fs12}oh yeah, it flips over.
Dialogue: 0,1:01:26.73,1:01:29.18,yin,,0,0,0,, 很好 带树的斯坦福 logo\N{\fs12}Yes. Stanford logo with the tree.
Dialogue: 0,1:01:29.18,1:01:33.03,yin,,0,0,0,, 但我再点它 它就不动了 永远是反面 \N{\fs12}But now if I click, it doesn’t do anything else; it always flips over to the back,
Dialogue: 0,1:01:33.03,1:01:35.53,yin,,0,0,0,, 这正是我们代码的效果 \N{\fs12}which is exactly what our code does, right?
Dialogue: 0,1:01:35.53,1:01:36.41,yin,,0,0,0,, 这很好 \N{\fs12}So that’s good.
Dialogue: 0,1:01:36.41,1:01:39.47,yin,,0,0,0,, 我们来调整一下代码 让它能两面翻动 \N{\fs12}So let’s fix it so that it flips both ways.
Dialogue: 0,1:01:39.47,1:01:43.32,yin,,0,0,0,, 我可以这样写 加上 if\N{\fs12}And I’m going to do that by saying if the –
Dialogue: 0,1:01:43.32,1:01:45.89,yin,,0,0,0,, 我还是先做另外一件事吧 \N{\fs12}actually, I’m going to do one other thing first
Dialogue: 0,1:01:45.89,1:01:47.70,yin,,0,0,0,, 让代码更简单一些 \N{\fs12}to make this code a little simpler is instead
Dialogue: 0,1:01:47.70,1:01:49.32,yin,,0,0,0,, 这里我可以不用这个局部变量 \N{\fs12}of having this local variable,
Dialogue: 0,1:01:49.32,1:01:52.58,yin,,0,0,0,, 我可以直接把这些写到这里来 \N{\fs12}I can just take this and pop it right in there.
Dialogue: 0,1:01:52.58,1:01:55.10,yin,,0,0,0,, 这是很常见的做法 \N{\fs12}And that’s very common to do that.
Dialogue: 0,1:01:55.10,1:01:58.87,yin,,0,0,0,, 如果要换行 太长的话它会自动换行 \N{\fs12}And if I wanted to wrap it, it will automatically wrap if I make this too short.
Dialogue: 0,1:01:58.87,1:02:00.88,yin,,0,0,0,, 不过我也可以键入一个回车 \N{\fs12}But I can also put a return in there.
Dialogue: 0,1:02:00.88,1:02:02.97,yin,,0,0,0,, 这样做后 注意冒号的情况 \N{\fs12}And when I do, look what it does with the colons.
Dialogue: 0,1:02:02.97,1:02:05.60,yin,,0,0,0,, 看到冒号对齐起来了吗 \N{\fs12}See how it lines the colons up?
Dialogue: 0,1:02:05.60,1:02:06.90,yin,,0,0,0,, 它总会这样做 \N{\fs12}It will always do that.
Dialogue: 0,1:02:06.90,1:02:10.42,yin,,0,0,0,, 如果你在多参数的信息发送中间敲了回车 \N{\fs12}If you press return in the middle of a message send that has multiple arguments,
Dialogue: 0,1:02:10.42,1:02:12.24,yin,,0,0,0,, 它会为所有参数对齐冒号 \N{\fs12}it will line the colons up for all the arguments.
Dialogue: 0,1:02:12.24,1:02:12.91,yin,,0,0,0,, 非常酷 \N{\fs12}Really cool.
Dialogue: 0,1:02:12.91,1:02:16.55,yin,,0,0,0,, 这时所有参数都会像这样左右排列对齐 \N{\fs12}So you can see all the arguments lined up left and right.
Dialogue: 0,1:02:16.55,1:02:21.87,yin,,0,0,0,, 无论如何 我将检验当前标题 \N{\fs12}So anyway, I’m going to check to see if the current title –
Dialogue: 0,1:02:21.87,1:02:24.10,yin,,0,0,0,, 这是一个按钮方法 \N{\fs12}okay, that’s a button method –
Dialogue: 0,1:02:24.10,1:02:25.47,yin,,0,0,0,, 如果它是字符串 \N{\fs12}if it’s a string.
Dialogue: 0,1:02:25.47,1:02:32.39,yin,,0,0,0,, 如果这个长度不为 0\N{\fs12}If that length, okay, is nonzero, okay –
Dialogue: 0,1:02:32.39,1:02:35.19,yin,,0,0,0,, 这是用于检验长度是否不为 0\N{\fs12}so that’s testing there to see if the length of nonzero –
Dialogue: 0,1:02:35.19,1:02:37.49,yin,,0,0,0,, 这样做很酷 因为这会在 \N{\fs12}that’s a cool way to do it because that will work
Dialogue: 0,1:02:37.49,1:02:41.38,yin,,0,0,0,, 按钮标题为 nil 或为空字符串时执行 \N{\fs12}if the button title is nil or if it’s the empty string.
Dialogue: 0,1:02:41.38,1:02:43.20,yin,,0,0,0,, 因为按钮标题默认值是 nil\N{\fs12}Because the button title starts out nil.
Dialogue: 0,1:02:43.20,1:02:45.00,yin,,0,0,0,, 不设置为任何东西 最开始就是 nil\N{\fs12}If you don’t set it to anything, it starts out nil.
Dialogue: 0,1:02:45.00,1:02:48.77,yin,,0,0,0,, 这里通过一行代码 我同时检验了两种可能的初始状态 \N{\fs12}So here with one line of code I’ve checked both the initial state possibly –
Dialogue: 0,1:02:48.77,1:02:50.95,yin,,0,0,0,, 这里不是如此 因为我们把标题设为了梅花 A\N{\fs12}not in our case because we set the title to the A club –
Dialogue: 0,1:02:50.95,1:02:53.10,yin,,0,0,0,, 不过你们的情况中 可能会是这样 \N{\fs12}but in your case it might be.
Dialogue: 0,1:02:53.10,1:02:57.04,yin,,0,0,0,, 然后我们让它执行一段代码 否则执行另一段 \N{\fs12}Then we’ll set it to one thing, else we’ll set it to the other thing.
Dialogue: 0,1:02:57.04,1:03:00.58,yin,,0,0,0,, 我们希望把这个设置到这里 \N{\fs12}So we just wanted to set this to this.
Dialogue: 0,1:03:00.58,1:03:03.41,yin,,0,0,0,, 如果按钮上有标题 \N{\fs12}So if there’s a title on the button,
Dialogue: 0,1:03:03.41,1:03:07.28,yin,,0,0,0,, 换言之 它上面有梅花 A 那我们就将翻到反面 \N{\fs12}in other words it has the ace of clubs, then we’re going to switch over to the back.
Dialogue: 0,1:03:07.28,1:03:13.34,yin,,0,0,0,, 如果按钮上没有标题 那么我们就将翻回正面 \N{\fs12}And if there’s no title on the button, then we’re going to switch back to the front.
Dialogue: 0,1:03:13.34,1:03:17.63,yin,,0,0,0,, 梅花 A\N{\fs12}Ace of clubs.
Dialogue: 0,1:03:20.34,1:03:27.16,yin,,0,0,0,, 之后我们如果运行 纸牌就能来回翻动了 \N{\fs12}So now when we run, our card will flip both ways.
Dialogue: 0,1:03:27.16,1:03:32.43,yin,,0,0,0,, 将视图同控制器连接起来做你想做的事 其实很简单 \N{\fs12}So really simple to wire stuff into your controller to do what you want.
Dialogue: 0,1:03:32.43,1:03:37.43,yin,,0,0,0,, 下面我们再来看这个 \N{\fs12}The next thing we’re going to do is in the –
Dialogue: 0,1:03:37.43,1:03:40.33,yin,,0,0,0,, 这里我将快速展示一下 \N{\fs12}okay, I’ll show you really quickly here.
Dialogue: 0,1:03:40.33,1:03:42.91,yin,,0,0,0,, 按住 Option 键 这个很重要的键 \N{\fs12}If you hold down the option key, a very important key,
Dialogue: 0,1:03:42.91,1:03:46.19,yin,,0,0,0,, 看到它让光标变成问号 并开始高亮显示一些东西吗 \N{\fs12}do you see how it puts a question mark and starts highlighting things?
Dialogue: 0,1:03:46.21,1:03:48.99,yin,,0,0,0,, 这让你能够转到说明文档 \N{\fs12}That’s going to allow to you to transition into the documentation.
Dialogue: 0,1:03:48.99,1:03:51.45,yin,,0,0,0,, 如果关于这个 currentTitle 我想知道更多 \N{\fs12}So if I want to know more about this current title,
Dialogue: 0,1:03:51.45,1:03:53.85,yin,,0,0,0,, 我可以 Option 点击它 \N{\fs12}if I hit option, click on it –
Dialogue: 0,1:03:53.85,1:03:55.41,yin,,0,0,0,, 这里可以得到一些帮助 \N{\fs12}see, I get a little bit of help right here.
Dialogue: 0,1:03:55.41,1:03:58.06,yin,,0,0,0,, 它是一种属性 它是只读的 非原子的 \N{\fs12}It’s a property. It’s read-only, it’s nonatomic.
Dialogue: 0,1:03:58.06,1:04:02.03,yin,,0,0,0,, 记住 说明文档中凡是出现 retain 都表示 strong\N{\fs12}By the way, if you see “retain” in the documentation, that’s the same as “strong.”
Dialogue: 0,1:04:02.03,1:04:04.63,yin,,0,0,0,,retain 其实说的也就是强 \N{\fs12}Retain is the same as strong basically.
Dialogue: 0,1:04:04.63,1:04:07.40,yin,,0,0,0,, 这里有些描述 然后还有超链接 \N{\fs12}Little bit of description here but also hyperlinks.
Dialogue: 0,1:04:07.40,1:04:10.11,yin,,0,0,0,, 如果我点击其中一个超链接 例如这个 \N{\fs12}And if I click on one of these hyperlinks, like this one,
Dialogue: 0,1:04:10.11,1:04:11.52,yin,,0,0,0,, 我会进入说明文档 \N{\fs12}it takes me into the documentation.
Dialogue: 0,1:04:11.52,1:04:13.85,yin,,0,0,0,, 这是一个单独打开的窗口 \N{\fs12}This is a separate window right here.
Dialogue: 0,1:04:13.85,1:04:16.90,yin,,0,0,0,, 你可以在这个说明文档中进行浏览 \N{\fs12}And you can navigate around in this documentation.
Dialogue: 0,1:04:16.90,1:04:18.96,yin,,0,0,0,, 所有这些你们都需要熟悉 \N{\fs12}You really want to get familiar with all this.
Dialogue: 0,1:04:18.96,1:04:21.75,yin,,0,0,0,, 由于时间限制 我今天无法全部展示 \N{\fs12}I can’t really show it all to you today for time constraints,
Dialogue: 0,1:04:21.75,1:04:26.31,yin,,0,0,0,, 不过你可以搜索 例如我可以搜索 UIButton\N{\fs12}but you can do things like search, like I can go find UI button here.
Dialogue: 0,1:04:26.31,1:04:27.62,yin,,0,0,0,, 这是 UIButton\N{\fs12}Okay. There’s UI button.
Dialogue: 0,1:04:27.62,1:04:30.87,yin,,0,0,0,, 我可以往下滚动到 例如 \N{\fs12}I might scroll down and go to, for example,
Dialogue: 0,1:04:30.87,1:04:35.36,yin,,0,0,0,, 我们刚看到过的 setBackgroundImage:forState\N{\fs12}set background image or set background image for state, which we just saw.
Dialogue: 0,1:04:35.36,1:04:37.52,yin,,0,0,0,, 我还可以点击进入 UIImage\N{\fs12}Maybe I’ll click to go UI image.
Dialogue: 0,1:04:37.52,1:04:38.94,yin,,0,0,0,, 所有这些都在这里 \N{\fs12}You see all this.
Dialogue: 0,1:04:38.94,1:04:40.91,yin,,0,0,0,, 一开始有对类的良好描述 \N{\fs12}There’s nice descriptions of the class in the beginning
Dialogue: 0,1:04:40.91,1:04:43.10,yin,,0,0,0,, 然后所有方法 等等 \N{\fs12}and then all the methods, etc., etc.
Dialogue: 0,1:04:43.10,1:04:46.56,yin,,0,0,0,, 你们必须掌握说明文档的使用方法 \N{\fs12}So definitely you want to become a master of that documentation.
Dialogue: 0,1:04:46.56,1:04:48.29,yin,,0,0,0,, 你还可以 Option 双击 \N{\fs12}You can also option double-click on things
Dialogue: 0,1:04:48.29,1:04:49.73,yin,,0,0,0,, 这会直接进入说明文档 \N{\fs12}and it will send you straight to the documentation.
Dialogue: 0,1:04:49.73,1:04:52.71,yin,,0,0,0,, 不会给出小帮助提示 而是直接跳到说明文档 \N{\fs12}If you don’t want to get the little help one first, you can go straight in.
Dialogue: 0,1:04:52.71,1:04:57.00,yin,,0,0,0,,Option 是这里关键的键 \N{\fs12}So option is the key one for that.
Dialogue: 0,1:04:57.00,1:04:58.85,yin,,0,0,0,, 然后再看 \N{\fs12}Let’s go ahead — okay.
Dialogue: 0,1:04:58.85,1:05:02.81,yin,,0,0,0,, 下面这里有一些空白区域 \N{\fs12}Notice that this little space along the bottom here appeared
Dialogue: 0,1:05:02.81,1:05:05.37,yin,,0,0,0,, 运行应用时 注意到了吗 \N{\fs12}when we ran the application — you see that?
Dialogue: 0,1:05:05.37,1:05:10.34,yin,,0,0,0,, 左边这里是调试器 右边是控制台 \N{\fs12}This is the debugger on the left, and this is the console on the right.
Dialogue: 0,1:05:10.34,1:05:15.68,yin,,0,0,0,, 课上你们肯定会用到调试器和控制台 \N{\fs12}And you are definitely going to be using the debugger and the console both in this class.
Dialogue: 0,1:05:15.68,1:05:19.37,yin,,0,0,0,, 我也许没有时间演示控制台的用法 \N{\fs12}And actually, I might not have time to do a quick — show you how to do the console.
Dialogue: 0,1:05:19.37,1:05:22.01,yin,,0,0,0,, 无论如何 你可以通过拖动将它隐藏起来 \N{\fs12}But anyway, you can hide it by dragging it down or also
Dialogue: 0,1:05:22.01,1:05:23.40,yin,,0,0,0,, 或通过点击这个 \N{\fs12}by clicking this thing.
Dialogue: 0,1:05:24.77,1:05:27.71,yin,,0,0,0,, 好 下面我们将要 \N{\fs12}All right. So the next thing we’re going to do is we’re going
Dialogue: 0,1:05:27.71,1:05:31.86,yin,,0,0,0,, 在 UI 上加上一个记录数翻牌次数的小标签 \N{\fs12}to put a little label on our UI that counts the flips.
Dialogue: 0,1:05:31.86,1:05:35.72,yin,,0,0,0,, 每次翻牌时 标签上的数字都会加一 \N{\fs12}A little incremental thing that increments every time there’s a flip.
Dialogue: 0,1:05:35.72,1:05:43.95,yin,,0,0,0,, 要做这个 我们可以回到这里 抓取一个标签 \N{\fs12}And we do that by going back to here and grabbing ourselves a label.
Dialogue: 0,1:05:43.95,1:05:47.78,yin,,0,0,0,, 标签是一段只读文本 不可编辑文本 \N{\fs12}So a label is a read-only piece of text, noneditable text.
Dialogue: 0,1:05:47.80,1:05:50.74,yin,,0,0,0,, 我要把它拖放到左下角 \N{\fs12}And I’m just going to drag it over here and put it in the lower left.
Dialogue: 0,1:05:50.74,1:05:54.09,yin,,0,0,0,, 双击它 改为 Flip: 0\N{\fs12}I’m going to double-click on it to call it “flips colon zero.”
Dialogue: 0,1:05:54.09,1:05:57.73,yin,,0,0,0,, 这是 UI 刚启动时我想要的效果 \N{\fs12}This is what I want it to look like when my UI first launches.
Dialogue: 0,1:05:57.73,1:06:00.15,yin,,0,0,0,, 这个 我永远不会敲击它 \N{\fs12}Now here, I’m never going to be tapping on this
Dialogue: 0,1:06:00.15,1:06:04.08,yin,,0,0,0,, 进而导致按钮那样的消息发送 它是反过来的 \N{\fs12}and causing a message to be sent like the button; it’s the other way around.
Dialogue: 0,1:06:04.08,1:06:08.17,yin,,0,0,0,, 我的控制器希望同它通信 在翻牌进行时告诉它 \N{\fs12}My controller wants to talk to this and tell it when the flips changes all the time.
Dialogue: 0,1:06:08.17,1:06:13.17,yin,,0,0,0,, 也许你会认为可以从代码拖到这个标签 \N{\fs12}So you might think that you would drag from your code down to this flips,
Dialogue: 0,1:06:13.17,1:06:15.22,yin,,0,0,0,, 很不幸的是 你不能这样 \N{\fs12}but unfortunately you don’t do that.
Dialogue: 0,1:06:15.22,1:06:19.17,yin,,0,0,0,, 你还是按住 Control 从这里开始拖动 \N{\fs12}You still hold down control and drag from here.
Dialogue: 0,1:06:19.17,1:06:22.02,yin,,0,0,0,, 但不是拖到实现区 \N{\fs12}But instead of dragging it down into your implementation area,
Dialogue: 0,1:06:22.02,1:06:23.86,yin,,0,0,0,, 而是拖到接口区 \N{\fs12}you drag it into the interface area
Dialogue: 0,1:06:23.86,1:06:28.90,yin,,0,0,0,, 因为你要创建一个同该标签连接的属性 \N{\fs12}because you’re going to create a property that connects to that label basically.
Dialogue: 0,1:06:28.90,1:06:30.54,yin,,0,0,0,, 我们这样做后得到这个 \N{\fs12}So we do that. We get a thing here.
Dialogue: 0,1:06:30.54,1:06:32.08,yin,,0,0,0,, 问的问题略有不同 \N{\fs12}It’s asking us a little bit different questions:
Dialogue: 0,1:06:32.08,1:06:33.81,yin,,0,0,0,, 属性名是什么 \N{\fs12}”What’s the name of this property?”
Dialogue: 0,1:06:33.81,1:06:36.23,yin,,0,0,0,, 我将称其为 flipsLabel(翻牌标签)\N{\fs12}I’m going to call it “flips label.”
Dialogue: 0,1:06:36.23,1:06:38.98,yin,,0,0,0,, 注意到 该属性是弱的 \N{\fs12}Notice that this property is weak.
Dialogue: 0,1:06:38.98,1:06:43.20,yin,,0,0,0,, 我点击连接时 它会创建一个弱属性 \N{\fs12}When I click connect, it’s going to make a property here and it’s going to be weak.
Dialogue: 0,1:06:43.20,1:06:46.53,yin,,0,0,0,, 这是我们首次用弱代替强 \N{\fs12}This is the first time we’ve seen weak versus strong.
Dialogue: 0,1:06:46.53,1:06:48.75,yin,,0,0,0,, 选弱的原因在于 \N{\fs12}The reason this is weak is because
Dialogue: 0,1:06:48.76,1:06:53.37,yin,,0,0,0,, 该标签由视图本身很强地保持着 \N{\fs12}this label is held strongly by the view itself.
Dialogue: 0,1:06:53.37,1:06:56.84,yin,,0,0,0,, 所以我们不需要用强指针指着它 来保证它在堆中 \N{\fs12}So we don’t need to have a strong pointer to it, to keep it in the heap.
Dialogue: 0,1:06:56.84,1:06:57.74,yin,,0,0,0,, 视图会做这个 \N{\fs12}The view will.
Dialogue: 0,1:06:57.74,1:07:02.01,yin,,0,0,0,, 如果该标签离开视图 它就会被清除出堆 \N{\fs12}And if this label ever leaves the view, it will get cleaned out from the heap.
Dialogue: 0,1:07:02.01,1:07:04.60,yin,,0,0,0,, 而这个属性 这个指着它的指针 \N{\fs12}And this property — this pointer to it –
Dialogue: 0,1:07:04.60,1:07:06.84,yin,,0,0,0,, 就会被设为 nil 这正是我们想要的 \N{\fs12}will get set to nil, which is exactly what we want.
Dialogue: 0,1:07:06.84,1:07:09.19,yin,,0,0,0,, 因为当 flipsLabel 不在视图中时 \N{\fs12}Because if that flips label’s not in the view, we don’t want
Dialogue: 0,1:07:09.19,1:07:11.63,yin,,0,0,0,, 我们就不想再更新和发消息给它了 \N{\fs12}to be updating it and sending messages to it.
Dialogue: 0,1:07:11.63,1:07:15.63,yin,,0,0,0,, 所以说 这里对弱的使用很精妙 \N{\fs12}So it’s a great use of weak right here.
Dialogue: 0,1:07:15.63,1:07:19.60,yin,,0,0,0,, 这里是你们很熟悉的通常属性 也许除了 IBOutlet\N{\fs12}This is normal property that you’re used to except for maybe this IB outlet.
Dialogue: 0,1:07:19.60,1:07:21.61,yin,,0,0,0,, 这同 IBAction 类似 \N{\fs12}That’s just like IB action.
Dialogue: 0,1:07:21.61,1:07:26.49,yin,,0,0,0,, 这是无意义的 编译器会忽略 Xcode 使用它 \N{\fs12}It’s a meaningless thing the compiler ignores that Xcode is using.
Dialogue: 0,1:07:26.49,1:07:28.50,yin,,0,0,0,, 这是用来做这个的 \N{\fs12}So that it can do this –
Dialogue: 0,1:07:28.50,1:07:31.40,yin,,0,0,0,, 在鼠标悬停时显示连接到什么 \N{\fs12}show you what it’s connected to when you mouse over it.
Dialogue: 0,1:07:31.40,1:07:36.27,yin,,0,0,0,, 你还可以通过右键点击来看所有连接 \N{\fs12}By the way, you can see all the connections by also right-clicking on things.
Dialogue: 0,1:07:36.27,1:07:40.64,yin,,0,0,0,, 这里我右键点击了按钮 你可以看到它的连接 \N{\fs12}So here I just right-clicked on the button and you can see its connections.
Dialogue: 0,1:07:40.64,1:07:42.24,yin,,0,0,0,, 如果你想重命名 \N{\fs12}If you ever want to rename –
Dialogue: 0,1:07:42.24,1:07:45.45,yin,,0,0,0,, 例如我不喜欢 touchCardButton 我想重命名 \N{\fs12}like if I don’t like touch card button, I want to rename it to something,
Dialogue: 0,1:07:45.45,1:07:47.67,yin,,0,0,0,, 很不幸 你不能重命名 \N{\fs12}you can’t just rename unfortunately.
Dialogue: 0,1:07:47.67,1:07:52.99,yin,,0,0,0,, 你需要到这里 右键 使用这个小东西来断开连接 \N{\fs12}You have to go in here, right-click, use this little thing to disconnect it,
Dialogue: 0,1:07:52.99,1:07:55.55,yin,,0,0,0,, 然后重新 Control 拖动 \N{\fs12}and then control drag again.
Dialogue: 0,1:07:55.55,1:07:57.52,yin,,0,0,0,, 大家都明白了吗 \N{\fs12}Everybody got that?
Dialogue: 0,1:07:57.52,1:07:58.21,yin,,0,0,0,, 很不幸 \N{\fs12}It’s unfortunate.
Dialogue: 0,1:07:58.21,1:08:00.91,yin,,0,0,0,, 如果 Xcode 能跟踪这个就好了 可惜它不能 \N{\fs12}It would be really nice if Xcode could track that for you but it can’t.
Dialogue: 0,1:08:00.91,1:08:03.31,yin,,0,0,0,, 所以 如果你想重命名什么东西 \N{\fs12}So if you ever want to rename something,
Dialogue: 0,1:08:03.31,1:08:06.24,yin,,0,0,0,, 你需要通过右键点击来断开连接 \N{\fs12}you have to disconnect it here by right-clicking on it,
Dialogue: 0,1:08:06.24,1:08:10.63,yin,,0,0,0,, 然后 Control 拖动一个新的 这样来设置名称 \N{\fs12}and then control drag a new one and set the name that way.
Dialogue: 0,1:08:10.63,1:08:13.59,yin,,0,0,0,, 你还可以右键点击这个 \N{\fs12}You can also right-click on this little guy
Dialogue: 0,1:08:13.59,1:08:16.77,yin,,0,0,0,, 这会显示出控制器的所有连接 \N{\fs12}and it will show you all the connections for your controller.
Dialogue: 0,1:08:16.77,1:08:17.79,yin,,0,0,0,, 展开这个窗口 \N{\fs12}Brings up this window.
Dialogue: 0,1:08:17.79,1:08:19.45,yin,,0,0,0,, 我可以看到标签 \N{\fs12}And I can see the label. You see?
Dialogue: 0,1:08:19.47,1:08:21.52,yin,,0,0,0,, 鼠标现在在按钮上 \N{\fs12}I’m mousing over the button.
Dialogue: 0,1:08:21.52,1:08:22.24,yin,,0,0,0,, 标签 \N{\fs12}Label.
Dialogue: 0,1:08:22.24,1:08:25.82,yin,,0,0,0,, 这里还有一个属性 你们没有见过这个 \N{\fs12}There’s also this little property here, which is something you haven’t seen,
Dialogue: 0,1:08:25.82,1:08:29.49,yin,,0,0,0,, 这是从控制器指向整个视图的属性 \N{\fs12}which is basically a property that points to the entire view from your controller.
Dialogue: 0,1:08:29.49,1:08:31.19,yin,,0,0,0,, 这是到控制器的连接 \N{\fs12}So this is the connections to your controllers.
Dialogue: 0,1:08:31.19,1:08:33.75,yin,,0,0,0,, 看到了吗 这里显示有纸牌游戏视图控制器 \N{\fs12}See, it says “card game view controller”?
Dialogue: 0,1:08:33.75,1:08:35.23,yin,,0,0,0,, 这是右键点击 \N{\fs12}So that’s right-clicking.
Dialogue: 0,1:08:35.23,1:08:38.21,yin,,0,0,0,, 我右键点击了这里 \N{\fs12}I’m right-clicking over here.
Dialogue: 0,1:08:38.21,1:08:40.62,yin,,0,0,0,, 我们怎么让这个 flipsLabel 工作呢 \N{\fs12}So how are we going to make this flips label work?
Dialogue: 0,1:08:40.62,1:08:45.32,yin,,0,0,0,, 我们先把它放一放 \N{\fs12}We are going to put it aside for a second.
Dialogue: 0,1:08:45.32,1:08:46.59,yin,,0,0,0,, 先不想它 \N{\fs12}Let’s not think about it.
Dialogue: 0,1:08:46.59,1:08:49.68,yin,,0,0,0,, 先来看另一个属性 \N{\fs12}Let’s instead do another property.
Dialogue: 0,1:08:50.69,1:08:53.48,yin,,0,0,0,, 属性 它是非原子的 \N{\fs12}Property. Which is nonatomic,
Dialogue: 0,1:08:53.48,1:08:55.30,yin,,0,0,0,, 它只是一个 int 型整数 \N{\fs12}which is just going to be an int,
Dialogue: 0,1:08:55.30,1:08:57.85,yin,,0,0,0,, 命名为 flipCount(翻牌计数)\N{\fs12}which I’m going to call “flip count.”
Dialogue: 0,1:08:57.85,1:09:02.04,yin,,0,0,0,,flipCount 是一个整数 用于记录翻牌次数 \N{\fs12}So flip count is just an integer that’s going to keep the count of flips.
Dialogue: 0,1:09:02.04,1:09:05.27,yin,,0,0,0,, 再看这个 \N{\fs12}And watch this.
Dialogue: 0,1:09:05.27,1:09:07.41,yin,,0,0,0,, 这里需要更多空间 \N{\fs12}Some more space here.
Dialogue: 0,1:09:07.43,1:09:09.17,yin,,0,0,0,, 过来一些 \N{\fs12}Go there.
Dialogue: 0,1:09:09.17,1:09:14.18,yin,,0,0,0,, 这里我只需要写 self.flipCount++\N{\fs12}I’m just going to go down here and say self.flip count plus plus.
Dialogue: 0,1:09:14.18,1:09:20.33,yin,,0,0,0,, 这调用的是 flipCount 的 setter 还是 getter\N{\fs12}Now, does that call the setter or the getter for flip count?
Dialogue: 0,1:09:20.33,1:09:21.78,yin,,0,0,0,, 两者都 对 \N{\fs12}Both. Exactly.
Dialogue: 0,1:09:21.78,1:09:23.49,yin,,0,0,0,, 这同时调用了 setter 和 getter\N{\fs12}That is calling both the setter and the getter.
Dialogue: 0,1:09:23.49,1:09:25.61,yin,,0,0,0,, 调用 getter 来获得 flipCount\N{\fs12}It’s calling the getter to get the flip count,
Dialogue: 0,1:09:25.61,1:09:27.40,yin,,0,0,0,, 然后对它进行 ++\N{\fs12}then it’s plus plussing it;
Dialogue: 0,1:09:27.40,1:09:29.70,yin,,0,0,0,, 然后调用 setter 来设置值 \N{\fs12}and then it’s calling the setter to set it back.
Dialogue: 0,1:09:29.70,1:09:32.05,yin,,0,0,0,, 这是一种很别致的代码写法 \N{\fs12}Okay. So that’s kind of a funky lining of code right there.
Dialogue: 0,1:09:32.05,1:09:34.98,yin,,0,0,0,, 等价于 self.flipCount=self.flipCount+1\N{\fs12}That’s the same as saying self.flip count equals self.flip count plus one.
Dialogue: 0,1:09:34.98,1:09:36.91,yin,,0,0,0,, 它会调用 getter 和 setter\N{\fs12}So it’s calling the getter and the setter.
Dialogue: 0,1:09:36.91,1:09:39.03,yin,,0,0,0,, 好 现在我们有了这个很好的 flipCount\N{\fs12}Okay. So now we’ve got this nice flip count.
Dialogue: 0,1:09:39.03,1:09:43.63,yin,,0,0,0,, 它记录计数值 如何将它同这个联系起来呢 \N{\fs12}It’s keeping track of the count; how do we hook that up to this thing over here?
Dialogue: 0,1:09:43.63,1:09:45.92,yin,,0,0,0,, 这个我要弄大一些 \N{\fs12}Which I’m going to make a little bigger, by the way.
Dialogue: 0,1:09:45.92,1:09:48.91,yin,,0,0,0,, 如何同这个联系起来 让它改写为 Flips: 1\N{\fs12}Okay. How do we hook that up so that says flips colon one,
Dialogue: 0,1:09:48.91,1:09:50.60,yin,,0,0,0,,Flips: 2 及 Flips: 3 这些 \N{\fs12}flips colon two, flips colon three?
Dialogue: 0,1:09:50.60,1:09:57.23,yin,,0,0,0,, 我们将使用 flipCount 的 setter 来做到这个 \N{\fs12}Well, we’re going to do it using the setter for flip count.
Dialogue: 0,1:09:57.23,1:10:00.65,yin,,0,0,0,, 普通情况下 flipCount 的 setter 是这样的 \N{\fs12}So normally a setter for flip count would look like this.
Dialogue: 0,1:10:00.65,1:10:05.20,yin,,0,0,0,, 这是 setter 和 getter 的另一妙用 \N{\fs12}And here’s another great use of setters and getters,
Dialogue: 0,1:10:05.20,1:10:08.36,yin,,0,0,0,, 也就是让 UI 同属性保持同步 \N{\fs12}which is to keep UI in sync with a property.
Dialogue: 0,1:10:08.36,1:10:16.94,yin,,0,0,0,, 这里我要写 self.flipsLabel.text =…\N{\fs12}And I’ll just do this by saying self.flips label.text equals –
Dialogue: 0,1:10:16.95,1:10:20.66,yin,,0,0,0,, 哦 抱歉 站着打字很不方便 \N{\fs12}oops, sorry. It’s hard to type standing up.
Dialogue: 0,1:10:20.66,1:10:23.55,yin,,0,0,0,,= NSString stringWithFormat…\N{\fs12}Equals NS string, string with format,
Dialogue: 0,1:10:23.55,1:10:27.94,yin,,0,0,0,, 这个你们见过 Flips: %d\N{\fs12}which you’ve seen before, flips colon percent D
Dialogue: 0,1:10:27.95,1:10:30.89,yin,,0,0,0,,self.flipCount\N{\fs12}self.flip count.
Dialogue: 0,1:10:30.89,1:10:35.13,yin,,0,0,0,, 这样 每次 flipCount 变动时 我们都会更新 UI\N{\fs12}So now every time flip count is changed we’re going to update the UI.
Dialogue: 0,1:10:36.46,1:10:39.86,yin,,0,0,0,, 能明白吗 这里有任何问题吗 \N{\fs12}Make sense? Any questions about that?
Dialogue: 0,1:10:39.86,1:10:41.98,yin,,0,0,0,, 好 我们来运行 \N{\fs12}Okay. So let’s run.
Dialogue: 0,1:10:44.63,1:10:45.89,yin,,0,0,0,, 好的 程序运行 \N{\fs12}Okay. Here’s our thing.
Dialogue: 0,1:10:45.89,1:10:49.23,yin,,0,0,0,, 点击 翻面 翻牌计数更新了 \N{\fs12}So click, flips over, flip count updates.
Dialogue: 0,1:10:49.23,1:10:50.50,yin,,0,0,0,, 翻 翻 翻 翻 \N{\fs12}Flip, flip, flip, flip.
Dialogue: 0,1:10:50.50,1:10:53.32,yin,,0,0,0,, 来回都行 而 flipCount 正确记录着 \N{\fs12}Back and forth working, and the flip count is keeping track
Dialogue: 0,1:10:53.32,1:10:54.55,yin,,0,0,0,, 翻了多少次 \N{\fs12}of how many flips we’re doing.
Dialogue: 0,1:10:54.55,1:10:58.68,yin,,0,0,0,, 可以看到 这些很容易连接起来 \N{\fs12}So you can see this stuff is really simple to wire up.
Dialogue: 0,1:10:58.68,1:11:02.64,yin,,0,0,0,, 在你开始创建更复杂的应用时 \N{\fs12}And, you know, when you get into building even complicated applications,
Dialogue: 0,1:11:02.64,1:11:04.76,yin,,0,0,0,, 因为你总是在使用相同的目标动作和 outlet 机制 \N{\fs12}because you’re always going to use these same mechanisms
Dialogue: 0,1:11:04.76,1:11:06.47,yin,,0,0,0,, 因为你总是在使用相同的目标动作和 outlet 机制 \N{\fs12}with target action and outlets
Dialogue: 0,1:11:06.47,1:11:08.93,yin,,0,0,0,, 而且你将使用 setter 和 getter 来保持事物同步 \N{\fs12}and you’re going to be using setters and getters to keep things in sync,
Dialogue: 0,1:11:08.93,1:11:11.19,yin,,0,0,0,, 这会让人们更容易理解你的代码如何工作 \N{\fs12}it’s going to be easy for people to understand how your code works.
Dialogue: 0,1:11:11.19,1:11:14.39,yin,,0,0,0,, 他们知道在哪去看的 UI 更新发生 \N{\fs12}They know where to look to see where UI updating happens,
Dialogue: 0,1:11:14.39,1:11:17.31,yin,,0,0,0,, 等等 这里我还要做一件事 \N{\fs12}etc. I’m going to do one other thing here.
Dialogue: 0,1:11:17.31,1:11:19.66,yin,,0,0,0,, 花点时间展示 NSLog\N{\fs12}Take a minute and show you NS log.
Dialogue: 0,1:11:19.66,1:11:22.70,yin,,0,0,0,, 我说过 你可以在控制台中记录日志 \N{\fs12}Okay. I told you that you could log something in the console.
Dialogue: 0,1:11:22.70,1:11:25.80,yin,,0,0,0,, 这里每次有变化时 让我们都用 NSLog 进行记录 \N{\fs12}So let’s do every time this thing changes, let’s do an NS log.
Dialogue: 0,1:11:25.80,1:11:27.37,yin,,0,0,0,, 这只是一个 C 函数 \N{\fs12}So it’s just a C function.
Dialogue: 0,1:11:27.39,1:11:29.96,yin,,0,0,0,, 像 printf 一样给它一个格式字符串 \N{\fs12}And you give it a format string like printf.
Dialogue: 0,1:11:29.96,1:11:34.09,yin,,0,0,0,, 这里我用 flipCount = %d\N{\fs12}So I’ll say flip count equals percent d
Dialogue: 0,1:11:34.09,1:11:35.98,yin,,0,0,0,,self.flipCount\N{\fs12}self.flip count.
Dialogue: 0,1:11:35.98,1:11:38.47,yin,,0,0,0,, 这就加入了这个 NSLog\N{\fs12}So you just put that NS log in there,
Dialogue: 0,1:11:38.47,1:11:42.01,yin,,0,0,0,, 于是运行时 你就会在控制台看到它 \N{\fs12}and now when we run you’re going to see it in the console.
Dialogue: 0,1:11:42.01,1:11:45.75,yin,,0,0,0,, 我点击时 它会出现在这里 显示发生了什么 \N{\fs12}It’s going to come up when I click, and it’s going to say what happened here.
Dialogue: 0,1:11:45.75,1:11:48.87,yin,,0,0,0,, 当然 我也可以把它拉宽一些 \N{\fs12}By the way, of course, I can make that wider.
Dialogue: 0,1:11:48.87,1:11:53.57,yin,,0,0,0,, 回到模拟器 看 \N{\fs12}And go back to the simulator. Let’s see.
Dialogue: 0,1:11:53.57,1:11:57.00,yin,,0,0,0,,NSLog 是一种很棒的调试方式 \N{\fs12}So NS logging — awesome way to debug.
Dialogue: 0,1:11:57.00,1:11:59.88,yin,,0,0,0,, 有时比设置断点要容易很多 \N{\fs12}Sometimes a lot easier than setting a breakpoint
Dialogue: 0,1:11:59.88,1:12:01.85,yin,,0,0,0,, 这里会给你打印出来 \N{\fs12}and then when you get there looking at the variables and stuff.
Dialogue: 0,1:12:01.85,1:12:03.58,yin,,0,0,0,, 你可以随时观察 \N{\fs12}It just prints out what’s going on and you can watch it.
Dialogue: 0,1:12:03.58,1:12:07.94,yin,,0,0,0,, 特别是在 UI 中 有时会是动画 它们随时间发生 \N{\fs12}Especially in the UI things are sometimes animated, they’re happening over time.
Dialogue: 0,1:12:07.94,1:12:09.51,yin,,0,0,0,, 在动画中间设置断点会很困难 \N{\fs12}It’s sometimes hard to set a breakpoint in the middle
Dialogue: 0,1:12:09.51,1:12:10.99,yin,,0,0,0,, 在动画中间设置断点会很困难 \N{\fs12}of an animation to see what’s going on.
Dialogue: 0,1:12:10.99,1:12:14.54,yin,,0,0,0,, 但使用 NSLog 你就能看到程序是怎么在运行了 \N{\fs12}but if you do some NS logs, you can kind of see how things progress.
Dialogue: 0,1:12:14.54,1:12:20.10,yin,,0,0,0,, 我要展示的最后一点内容是 如何为 app 添加一个新类 \N{\fs12}The last thing I’m going to show you here is how to add a new class to your app
Dialogue: 0,1:12:20.10,1:12:22.91,yin,,0,0,0,, 因为你们到时要在这个基础上自行添加四个类 \N{\fs12}because you’re going to need to do that. You’re going to add four classes to this.
Dialogue: 0,1:12:22.91,1:12:24.89,yin,,0,0,0,, 你们将从这个开始 \N{\fs12}You’re going to start with this, okay,
Dialogue: 0,1:12:24.89,1:12:27.73,yin,,0,0,0,, 然后添加四个类 \N{\fs12}and then you’re going to add four classes –
Dialogue: 0,1:12:27.73,1:12:29.55,yin,,0,0,0,,Card Deck 等等 \N{\fs12}card, deck, etc.
Dialogue: 0,1:12:29.55,1:12:33.20,yin,,0,0,0,, 添加一个类的做法如下 \N{\fs12}And the way you add a class is you –
Dialogue: 0,1:12:33.20,1:12:37.69,yin,,0,0,0,, 实际上 往项目中添加任何文件的方式都是这样 \N{\fs12}and in fact, the way you add any file to your project –
Dialogue: 0,1:12:37.69,1:12:41.21,yin,,0,0,0,, 也就是到文件菜单 点选新 文件 \N{\fs12}is you go to the file menu, new file.
Dialogue: 0,1:12:41.21,1:12:44.33,yin,,0,0,0,, 这里你可以添加各种东西 \N{\fs12}And there’s all different kinds of things you can add here,
Dialogue: 0,1:12:44.33,1:12:46.49,yin,,0,0,0,, 数据库文件 架构文件等等 \N{\fs12}database file, schema files and everything.
Dialogue: 0,1:12:46.49,1:12:51.02,yin,,0,0,0,, 不过你所需要的是左上角这个 Objective-C 类 \N{\fs12}But you want this one top-left Objective-C class.
Dialogue: 0,1:12:51.02,1:12:53.83,yin,,0,0,0,, 这里你要键入类名 \N{\fs12}Here you’re just going to type the name of the class.
Dialogue: 0,1:12:53.83,1:12:58.28,yin,,0,0,0,, 例如 这里我要添加的是 Card 然后是父类名 \N{\fs12}So for example, if I’m going to add card and the name of the superclass.
Dialogue: 0,1:12:58.28,1:13:01.22,yin,,0,0,0,, 如果是 PlayingCard 这里可以键入 Card\N{\fs12}Okay. If you are doing playing card, you can type card here.
Dialogue: 0,1:13:01.22,1:13:05.24,yin,,0,0,0,, 并不一定要从这个列表中选择 iOS 默认的 \N{\fs12}It doesn’t have to be something that’s chosen from this list, which are the iOS ones.
Dialogue: 0,1:13:05.24,1:13:07.99,yin,,0,0,0,, 这里我要创建的是 Card\N{\fs12}So here I’m going to make card.
Dialogue: 0,1:13:07.99,1:13:09.49,yin,,0,0,0,, 我可以把 Card 放到这里 \N{\fs12}I could put card right here.
Dialogue: 0,1:13:09.49,1:13:10.78,yin,,0,0,0,, 它问我在哪存储这个 \N{\fs12}It’s asking where to store this.
Dialogue: 0,1:13:10.78,1:13:15.19,yin,,0,0,0,, 我可以放到同纸牌游戏控制器相同的位置 \N{\fs12}I could put it right in the same place that my card game controller is, you see?
Dialogue: 0,1:13:15.19,1:13:17.38,yin,,0,0,0,, 但我不大推崇 \N{\fs12}But I’m actually a big fan
Dialogue: 0,1:13:17.38,1:13:20.38,yin,,0,0,0,, 将模型放到它自身的目录下 \N{\fs12}of putting your model in its own directory.
Dialogue: 0,1:13:20.38,1:13:23.44,yin,,0,0,0,, 我希望你们使用新文件夹 \N{\fs12}So you would use new folder down here.
Dialogue: 0,1:13:23.44,1:13:25.55,yin,,0,0,0,, 例如可以创建一个 Model 目录 \N{\fs12}Let’s create like a model directory,
Dialogue: 0,1:13:25.55,1:13:28.52,yin,,0,0,0,, 于是这里有了一个 Model 目录 \N{\fs12}and that creates a model directory here.
Dialogue: 0,1:13:28.52,1:13:31.09,yin,,0,0,0,, 这是控制器 这是模型目录 \N{\fs12}There’s a controller, here’s the model directory.
Dialogue: 0,1:13:31.09,1:13:32.46,yin,,0,0,0,, 创建 \N{\fs12}And so create.
Dialogue: 0,1:13:32.46,1:13:35.35,yin,,0,0,0,, 这会创建 Card.h 和.m\N{\fs12}So that’s going to create card dot H and M.
Dialogue: 0,1:13:35.35,1:13:39.05,yin,,0,0,0,, 这是 Card.h 和.m 目前还是空白 \N{\fs12}Here’s card dot H and M, okay, kind of blank versions of them.
Dialogue: 0,1:13:39.05,1:13:41.20,yin,,0,0,0,, 你可以在它们之间来回切换 \N{\fs12}You can switch back and forth between them here.
Dialogue: 0,1:13:41.20,1:13:44.93,yin,,0,0,0,, 注意到 如果我改变左边 右边会随之变化 \N{\fs12}Notice that if I switch the left, the right changes to match.
Dialogue: 0,1:13:44.93,1:13:47.50,yin,,0,0,0,, 看到了吗 改变这个 这个随之变化 \N{\fs12}You see? Change this, this matches.
Dialogue: 0,1:13:47.50,1:13:49.67,yin,,0,0,0,, 这是因为这里我选了 counterparts(对应)\N{\fs12}That’s because I have counterparts chosen right here.
Dialogue: 0,1:13:49.67,1:13:52.56,yin,,0,0,0,, 如果使用 manual 手动设置这个 \N{\fs12}If you go to manual and pick this file manually,
Dialogue: 0,1:13:52.56,1:13:54.18,yin,,0,0,0,, 这时它就不会这样做了 \N{\fs12}then it won’t be doing that magic anymore.
Dialogue: 0,1:13:54.18,1:13:57.69,yin,,0,0,0,, 不过你总是可以选回 counterparts 这会保持同步 \N{\fs12}But you can always go back to counterparts and it will keep them in sync.
Dialogue: 0,1:13:57.69,1:14:00.85,yin,,0,0,0,, 有些人喜欢让头文件在左 \N{\fs12}Okay. So you can have — some people like their header file on the left,
Dialogue: 0,1:14:00.85,1:14:02.73,yin,,0,0,0,, 有些人则喜欢在右 \N{\fs12}some on the right, whatever.
Dialogue: 0,1:14:02.73,1:14:04.55,yin,,0,0,0,, 还要注意到这里 \N{\fs12}Also, notice over here
Dialogue: 0,1:14:04.55,1:14:07.57,yin,,0,0,0,, 这些在导航栏中能够组起来 这很棒 \N{\fs12}it would be nice if I can also group these things in the navigator.
Dialogue: 0,1:14:07.57,1:14:12.13,yin,,0,0,0,, 我只需要选择它们 右键点击 新组 \N{\fs12}And I can by having them selected right-click new group.
Dialogue: 0,1:14:12.13,1:14:13.54,yin,,0,0,0,, 命名为 Model\N{\fs12}Say model.
Dialogue: 0,1:14:13.54,1:14:17.66,yin,,0,0,0,, 这样我就将我的模型放到了这个小地方 \N{\fs12}Right here. And now I’ve put my model in its own little place right here.
Dialogue: 0,1:14:17.66,1:14:20.29,yin,,0,0,0,, 我可以将它移动到下面这里 诸如此类 \N{\fs12}I can even move this around, put it down here, whatever.
Dialogue: 0,1:14:20.29,1:14:22.86,yin,,0,0,0,, 我可以把所有四个类都放到这里 \N{\fs12}I could put all my four classes in there.
Dialogue: 0,1:14:22.86,1:14:27.73,yin,,0,0,0,, 还可以将这个组同文件系统连起来 \N{\fs12}It is possible to link this group to the file system.
Dialogue: 0,1:14:27.73,1:14:31.85,yin,,0,0,0,, 实际上 你可以点击文件 在这里打开检查器 \N{\fs12}In fact, if you just click on a file and bring up the inspector on it right here,
Dialogue: 0,1:14:31.87,1:14:33.69,yin,,0,0,0,, 可以看到有这些可供选择 \N{\fs12}you can see that it’s got this location
Dialogue: 0,1:14:33.69,1:14:36.33,yin,,0,0,0,, 你可以指定是绝对路径 \N{\fs12}where you can specify whether it’s an absolute path,
Dialogue: 0,1:14:36.33,1:14:38.80,yin,,0,0,0,, 还是相对于它所在的组 等等 \N{\fs12}or relevant to the group it’s in, or whatever.
Dialogue: 0,1:14:38.80,1:14:41.00,yin,,0,0,0,, 这是可以控制的 \N{\fs12}So you can control that.
Dialogue: 0,1:14:41.00,1:14:42.84,yin,,0,0,0,, 就这些了 \N{\fs12}And that’s it.
Dialogue: 0,1:14:42.84,1:14:44.58,yin,,0,0,0,, 知道这些就能开始做作业了 \N{\fs12}So I think that’s all you need to do your homework.
Dialogue: 0,1:14:44.58,1:14:48.29,yin,,0,0,0,, 你们需要键入 Card 的所有代码 并加入另三个类 \N{\fs12}You’re just going to type in all your code here for card and add your three other ones.
Dialogue: 0,1:14:48.29,1:14:49.52,yin,,0,0,0,, 键入所有代码 \N{\fs12}Type all that code in.
Dialogue: 0,1:14:49.53,1:14:52.83,yin,,0,0,0,, 你们要让纸牌不是总显示梅花 A\N{\fs12}And then all you got to do is make that card instead of showing ace of clubs all the time,
Dialogue: 0,1:14:52.83,1:14:55.64,yin,,0,0,0,, 你需要在牌堆中抽取 \N{\fs12}needs to go through the deck.
Dialogue: 0,1:14:55.64,1:14:58.59,yin,,0,0,0,, 我发布有详细的作业指南 \N{\fs12}There’s a detailed homework write up posted.
Dialogue: 0,1:14:58.61,1:15:02.65,yin,,0,0,0,, 其中有各种提示和帮助 告诉你需要做哪些任务 \N{\fs12}It has all kinds of hints and help, and tells you about what the required tasks are,
Dialogue: 0,1:15:02.65,1:15:04.93,yin,,0,0,0,, 还有评定标准 等等所有这些 \N{\fs12}and evaluation criteria, and all that stuff.
Dialogue: 0,1:15:04.93,1:15:07.14,yin,,0,0,0,, 所以请务必仔细阅读 \N{\fs12}So definitely read that thing in detail.
Dialogue: 0,1:15:07.14,1:15:09.94,yin,,0,0,0,, 不要跳过 不要直接做作业 \N{\fs12}Don’t skip that stuff and just try to go straight to doing it.
Dialogue: 0,1:15:09.96,1:15:13.57,yin,,0,0,0,, 有问题的 现在可以来提 下课 \N{\fs12}And if you have questions, I’ll be here. That’s it.
Dialogue: 0,1:15:13.57,1:15:17.57,yin,,0,0,0,, 更多内容 请访问我校官网 stanford.edu\N{\fs12}For more, please visit us at Stanford.edu.
